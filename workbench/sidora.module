<?php
/*
 * Copyright 2015 Smithsonian Institution.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.You may obtain a copy of
 * the License at: http://www.apache.org/licenses/
 *
 * This software and accompanying documentation is supplied without
 * warranty of any kind. The copyright holder and the Smithsonian Institution:
 * (1) expressly disclaim any warranties, express or implied, including but not
 * limited to any implied warranties of merchantability, fitness for a
 * particular purpose, title or non-infringement; (2) do not assume any legal
 * liability or responsibility for the accuracy, completeness, or usefulness of
 * the software; (3) do not represent that use of the software would not
 * infringe privately owned rights; (4) do not warrant that the software
 * is error-free or will be maintained, supported, updated or enhanced;
 * (5) will not be liable for any indirect, incidental, consequential special
 * or punitive damages of any kind or nature, including but not limited to lost
 * profits or loss of data, on any basis arising from contract, tort or
 * otherwise, even if any of the parties has been warned of the possibility of
 * such loss or damage.
 *
 *
 * This distribution includes several third-party libraries, each with their own
 * license terms. For a complete copy of all copyright and license terms, including
 * those of third-party libraries, please see the product release notes.
 */


defined("SIDORA_NEVER_SET") or define('SIDORA_NEVER_SET',"Never Set");
defined("SI_RELS_EXT_URI") or define('SI_RELS_EXT_URI',"http://oris.si.edu/2017/01/relations#");

/*
 * hook_init
 * run on every drupal call, loads items that the rest of the code needs
 */
function sidora_init() {
  // The ahah call on the edit metadata form cannot find the function for the form
  // because it assumes that Islandora has already loaded it.  Since we are not using
  // the Islandora interface, the form has not been loaded. The ahah call would
  // throw an error, disallowing the addition or deletion of items with the add.png (green plus)
  // -- the tags / tag element from the xml_form_builder
  // This is related to SID-305
  if (request_path() == 'system/ajax') {
    module_load_include('inc', 'xml_forms', 'builder/includes/datastream.form');
  }
  module_load_include('inc', 'sidora', 'includes/sidora_nodes');

  // Production is not on PHP 5.3.6 (currently 5.3.3) and some of Islandora uses 5.3.6 defined constants that are complained about
  defined('DEBUG_BACKTRACE_PROVIDE_OBJECT') or define('DEBUG_BACKTRACE_PROVIDE_OBJECT', TRUE);
  defined('DEBUG_BACKTRACE_IGNORE_ARGS') or define('DEBUG_BACKTRACE_IGNORE_ARGS', TRUE);
}


/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function sidora_help($path, $arg) {
  switch ($path) {
    case "admin/help#sidora":
      $output =  '<p>' . t("Sidora") . '</p>';
      $output .=  '<p>' . t("Smithsonian Institution's module to allows users to store and share information.") . '</p>';
      return $output;
      break;
  }
}

/**
 * Implements hook_block_info().
 */
function sidora_block_info() {
  $blocks['sidora_navigation'] = array(
    'info' => t('Sidora Navigation'),
    'cache' => DRUPAL_NO_CACHE,
    // Our caching is done with the Sidora specific caching
  );
  $blocks['sidora_individual_resource_info'] = array(
    'info' => t('Sidora Individual Resource Information'),
    'cache' => DRUPAL_NO_CACHE,
    // Our caching is done with the Sidora specific caching
  );
  $blocks['sidora_concept_info'] = array(
    'info' => t('Sidora Folder Information'),
    'cache' => DRUPAL_NO_CACHE,
    // Our caching is done with the Sidora specific caching
  );
  return $blocks;
}



/**
 * Implements hook_menu().
 */
function sidora_menu() {
  return array(
    'admin/sidora/configure' => array(
      'title' => 'Sidora Configuration',
      'description' => 'Configure the Sidora Module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'sidora.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'sidora/upload' => array(
      'description' => 'Uploader for files',
      'page callback' => 'sidora_upload',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_NORMAL_ITEM,
    ),
    'sidora/workbench' => array(
      'title callback' => 'sidora_title_callback',
      'description' => '',
      'page callback' => 'sidora_main_non_block_content',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_NORMAL_ITEM,
    ),
    'sidora/info' => array(
      'title' => 'Sidora Information',
      'description' => 'General Information Interface',
      'page callback' => 'sidora_info_json',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/open_access' => array(
      'description' => 'This is information that is available to all, regardless of log-in status',
      'page callback' => 'sidora_open_access',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'sidora/edit_metadata' => array(
      'title' => 'Edit Metadata',
      'description' => 'Edit the metadata of an array of resources',
      'page callback' => 'sidora_edit_metadata',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/manage' => array(
      'title' => 'Manage Object',
      'description' => 'Show the management panel',
      'page callback' => 'sidora_management_panel',
      'type' => MENU_CALLBACK,
      'access callback' => 'user_is_logged_in',
      'file' => 'includes/sidora_admin_only.inc',
    ),
    'sidora/create_resource' => array(
      'title' => 'Create Resource',
      'description' => 'Create a new folder',
      'page callback' => 'sidora_create_resource',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/create_concept' => array(
      'title' => 'Create Folder',
      'description' => 'Create a new folder',
      'page callback' => 'sidora_create_concept',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/ajax_parts' => array(
      'title' => 'Ajax Parts',
      'description' => 'Specifically for use with ajax, returning HTML snippets',
      'page callback' => 'sidora_ajax_parts',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/osd' => array(
      'title' => 'OpenSeaDragon',
      'description' => '',
      'page callback' => 'sidora_osd_proxy_version',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/test' => array(
      'title' => 'TESTING',
      'description' => 'Not intended to be used in production',
      'page callback' => 'sidora_testing',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
     'sidora/workbench/test' => array(
      'title' => 'TESTING',
      'description' => 'Not intended to be used in production',
      'page callback' => 'sidora_testing',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/ps_migration' => array(
      'title' => 'Migration utilities',
      'description' => 'Administrative utilities to turn legacy objects to project space / research space structures and relationships',
      'page callback' => 'sidora_migration_options',
      'access callback' => 'user_access',
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/ps_migration.inc',
      'type' => MENU_CALLBACK,
    ),
   'sidora/codebook/autocomplete' => array(
      'title' => 'Codebook Autocomplete',
      'description' => 'Return codebook information',
      'page callback' => 'sidora_codebook_autocomplete',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/pid_expired' => array(
      'title' => 'PID Expiration Interface',
      'description' => 'Inform Workbench that this PID has been updated externally and will need reloading before being shown',
      'page callback' => 'sidora_fedora_queue_sync_external_call',
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'sidora/resource_viewer' => array(
      'title' => 'Resource Viewer',
      'description' => 'return the resource in the designated view style',
      'page callback' => 'sidora_resource_viewer',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    /* Called by Delete XSL button in admin - sidora.admin.inc */
    'sidora/delete_xsl' => array(
      'title' => 'Delete XSL',
      'description' => 'Delete a XSL',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_delete_xsl_form'),
      'access callback' => 'user_is_logged_in',
      'file' => 'includes/xsl_handling.inc',
      'type' => MENU_CALLBACK,
    ),
   'sidora/request_account' => array(
      'title' => 'Request a new account',
      'description' => 'Request a new account',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_account_request_form'),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
   ),
   'sidora/workbench/request_account' => array(
      'title' => 'Request a account',
      'description' => 'Request a sidora account',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_account_request_form'),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
   ),
   'admin/sidora/fedora_object_issues' => array(
      'title' => 'SIdora Fedora Object Issues',
      'description' => 'List the current issues found with Fedora Objects',
      'page callback' => 'sidora_fedora_object_issues',
      'access arguments' => array('administer site configuration'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/sidora_admin_only.inc',
   ),
   'admin/sidora/fedora_sync' => array(
      'title' => 'SIdora / Fedora Drupal node Resynchronization',
      'description' => 'Set nodes as out of sync with Fedora so that they are reloaded',
      'page callback' => 'sidora_fedora_sync',
      'access arguments' => array('administer site configuration'),
      'type' => MENU_CALLBACK,
   ),
   'admin/sidora/fedora_sync_external' => array(
      'title' => 'SIdora / Fedora Drupal node Resynchronization from outside source',
      'description' => 'Sync a selection of nodes with Fedora',
      'page callback' => 'sidora_fedora_sync_external',
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/sidora_nodes.inc',
      'type' => MENU_CALLBACK,
   ),
   'admin/sidora/config_transfer' => array(
      'title' => 'SIdora configuration transfer',
      'description' => 'Save, export, and import SIdora configurations',
      'page callback' => 'sidora_config_transfer',
      'access arguments' => array('administer site configuration'),
      'type' => MENU_CALLBACK,
      'file' => 'includes/sidora_admin_only.inc',
   ),
   'admin/sidora/check_user_projects' => array(
      'title' => 'SIdora Check User Projects Against Fedora Repo',
      'description' => 'Determine if the children si:user-projects is out of sync with the Drupal users',
      'page callback' => 'sidora_check_user_projects',
      'access arguments' => array('administer site configuration'),
      'type' => MENU_CALLBACK,
   ),
   'admin/sidora/incoming_links' => array(
      'title' => 'SIdora check isAdministeredBy status',
      'description' => 'Status of items in Fedora repo of hasConcept / hasResource vs isAdministeredBy',
      'page callback' => 'sidora_incoming_links_form',
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/ps_migration.inc',
      'type' => MENU_CALLBACK,
   ),
   'sidora/workbench/contact_us' => array(
      'title' => 'Contact Us',
      'description' => 'Contact Us',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_contact_us_form'),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
   ),
   'sidora/contact_us' => array(
      'title' => 'Contact Us',
      'description' => 'Contact Us',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_contact_us_form'),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
   ),
   'sidora/version_history' => array(
    'title' => 'Datastream Versions',
    'description' => 'View version history for a datastream',
    'page callback' => 'sidora_datastream_version_view',
    'type' => MENU_CALLBACK,
    'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
  ),
   'sidora/version_viewer' => array(
      'title' => 'Resource Viewer',
      'description' => 'return the resource in the designated view style',
      'page callback' => 'sidora_resource_version_viewer',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/version_info' => array(
      'title' => 'Datastream Version Info',
      'description' => 'view or download a datastream version',
      'page callback' => 'sidora_info_version',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/import_xml_form/%/import' => array(
      'title' => 'Import XML Form',
      'description' => 'Import an XML Form with association',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_import_xml_form', 2),
      'access arguments' => array('Create XML Forms'),
      'type' => MENU_CALLBACK,
    ),
    'sidora/sharing_permissions/%' => array(
      'title' => 'Sharing Permissions',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_sharing_permissions_form', 2),
      'access callback' => 'user_is_logged_in',
      'file' => 'includes/project_spaces.inc',
    ),
    'sidora/research_spaces' => array(
      'title' => 'Research Spaces',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_project_spaces_form', 2),
      'access callback' => 'user_is_logged_in',
      'file' => 'includes/project_spaces.inc',
    ),
    'sidora/research_space_transfer' => array(
      'title' => 'Change Research Space Owner',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_project_space_transfer_form', 2, 3),
      'access callback' => 'user_is_logged_in',
      'file' => 'includes/project_spaces.inc',
    ),
    'sidora/research_space_delete' => array(
      'title' => 'Delete Research Space',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_project_space_delete_form', 2),
      'access callback' => 'user_is_logged_in',
      'file' => 'includes/project_spaces.inc',
    ),
    'sidora/research_space_create' => array(
      'title' => 'Create Research Space',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_project_space_creation_form', 2),
      'access callback' => 'user_is_logged_in',
      'file' => 'includes/project_spaces.inc',
    ),
    'admin/sidora/update_xsl_db' => array(
      'title' => 'Update SIdora XSLs in database',
      'description' => 'Update SIdora XSLs in database',
      'page callback' => 'sidora_update_xsl',
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/xsl_handling.inc',
      'type' => MENU_CALLBACK,
    ),
    'admin/sidora/download_xsl' => array(
      'title' => 'Download SIdora XSLs as archive',
      'description' => 'Download SIdora XSLs as archive',
      'page callback' => 'sidora_download_xsl',
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/xsl_handling.inc',
      'type' => MENU_CALLBACK,
    ),
    'admin/sidora/concept_review' => array(
      'title' => 'Concept clean up',
      'description' => 'Perform certain clean up procedures for concept nodes',
      'page callback' => 'sidora_concept_node_maintenance',
      'access arguments' => array('administer site configuration'),
      'file' => 'includes/sidora_nodes.inc',
      'type' => MENU_CALLBACK,
    ),
  );
}

/*
 * Set Drupal to be ready to upload a file using the multiple uploader plupload and
 * returns the html / js necessary to show the uploader.  This is designed to be placed
 * into a page that is being loaded and does not print or echo on its own.
 */
function sidora_generic_upload($configure = array()) {
  global $user;
  $button_text = (empty($configure['button_text']))?'Upload File':$configure['button_text'];
  $file_types = (empty($configure['file_types']))?array('*'):$configure['file_types'];
  $post_location_js = (empty($configure['post_location_js']))?'""':$configure['post_location_js'];
  $success_function_js = (empty($configure['success_function_js']))?'':$configure['success_function_js'];
  $form_id = (empty($configure['form_id']))?'create-resource-upload':$configure['form_id'];
  $post_data_js = (empty($configure['post_data_js']))?'""':$configure['post_data_js'];
  $on_file_add_js = (empty($configure['on_file_add_js']))?'':$configure['on_file_add_js'];
  $on_file_upload_js = (empty($configure['on_file_upload_js']))?'':$configure['on_file_upload_js'];

  $elements = array('#extensions' => $file_types );
  $to_return = '';
  $to_return .= "<div id='$form_id'>";
  $to_return .= sidora_get_plupload_html($elements, $button_text);
  $to_return .= "</div>";
  $_SESSION['file_uploads'][$user->uid] = array();

  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_create_resource.css',array('weight' => '1000000', 'group' => CSS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_util.js',array('weight' => '1000000', 'group' => JS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_uploader.js',array('weight' => '1000000', 'group' => JS_THEME));
  drupal_add_js('
submitIt = function() {
  var postData = '.$post_data_js.';
  jQuery.ajax({
    type: "POST",
    url: '.$post_location_js.',
    data: postData,
    success: function() {'.
      $success_function_js.'
    }
  });
}

jQuery(document).ready(function() {
  jQuery("#'.$form_id.'").append("<input class=\"form-submit\" value=\"Add\" onclick=\"submitIt();\">");
  uploader.bind("FilesAdded", function(up, files) {'.
    $on_file_add_js.'
  });
  uploader.bind("FileUploaded", function() {'.
    $on_file_upload_js.'
  });

});
',array('type' => 'inline', 'weight' => '1000000', 'group' => JS_THEME));
  return $to_return;
}

/*
* Attempts to load the item to get output as a JPEG
* $content - the original file content
* $output_to_browser - if TRUE then outputs direct to browser or gives message that there is not available view
*                    - if FALSE then returns whether or not the item can be output as JPEG
*/
function sidora_direct_jpg_output($content, $output_to_browser = TRUE) {
  $tempfilename = tempnam('','Sidora_temp_pic_');
  file_put_contents($tempfilename, $content);
  $tempimage = image_load($tempfilename);
  if (!empty($tempimage)) {
    if (!$output_to_browser) return TRUE;
    image_scale($tempimage, 800, 700);
    $save_info = image_save($tempimage);
    header("Content-type: image/jpeg");
    readfile($tempfilename);
  }
  else {
    if (!$output_to_browser) return FALSE;
    print t('There is no viewer available view for this content');
  }
  drupal_exit();
}

/**
 * Returns what is set in the admin for the viewer of this object or a message that none was set
 */
function sidora_resource_viewer($pid) {
  $obj = sidora_obj($pid);
  if (empty($obj)) {
    return;
  }
  $viewer_config = sidora_get_viewer_config($pid);
  if (empty($viewer_config)) {
    print t('The Administrator has not chosen a viewer for this combination of resource and dataset type.  You can still download the object through the View > Download option.');
    print t('<br/>The possible models that this resource uses:');
    $models = $obj->models;
    print '<br/>'.implode('<br/>',$models);
  }
  else {
    sidora_resource_version_viewer_display($pid,$viewer_config['dsid'],$viewer_config['viewer_id'],'0');
  }
  drupal_exit();
}


/**
 * Drupal autocomplete for codebooks, based on the logged in user
 */
function sidora_codebook_autocomplete($s1) {
  module_load_include('inc', 'sidora', 'includes/utils');
  $user_projects = sidora_obj(sidora_get_user_object());
  if (empty($user_projects)) {
    return array();
  }
  $matches = array();
  if (!empty($user_projects)) {
    $rels = $user_projects->relationships->get(FEDORA_RELS_EXT_URI, 'managesCodebook');
    foreach ($rels as $rel) {
      $pid = $rel['object']['value'];
      $curr_codebook = sidora_obj($pid);
      if (!empty($curr_codebook)) {
        $label = $curr_codebook->label;
        if (strpos($label, $s1) !== FALSE || strpos($pid, $s1) !== FALSE) {
          $matches[$pid] = $label.' ('.$pid.')';
        }
      }
    }
  }
  drupal_json_output($matches);
}

/*
 * Standard hook_title_callback
 */
function sidora_title_callback() {
  return 'SIdora Workbench';
}

function sidora_is_fedora_user_pid($pid) {
  return sidora_startsWith($pid, 'si-user:');
}
/**
 * Pull information from the session that is associated with the specified build id and create the assocated
 * Fedora changes
 */
function sidora_process_object_with_build_id($form_build_id) {
  global $user;
  sidora_object_creation_info($form_build_id,'started',TRUE);
  $id_to_filename = cache_get("sidora:form_id_to_filename");
  $id_to_filename = (empty($id_to_filename)) ? array() : $id_to_filename->data;
  $file_location = '';
  if (array_key_exists($form_build_id, $id_to_filename)) {

  // Wont be on concepts or non-file upload forms
    $file_location = $id_to_filename[$form_build_id]['filepath'];
    $file_name = $id_to_filename[$form_build_id]['filename'];
    foreach ($_SESSION['file_uploads'][$user->uid] as $index => $file_obj) {
      if ($file_obj->filepath == $file_location) {
        unset($_SESSION['file_uploads'][$user->uid][$index]);
        // If this was the codebook sample, reset the codebook sample information
        $_SESSION['file_uploads'][$user->uid] = array_values($_SESSION['file_uploads'][$user->uid]);
        // unlink($file_obj->filepath);
      }
    }
  }
  $creation_info = sidora_object_creation_info($form_build_id);
  $parent_pid = NULL;
  if (!empty($creation_info)) {
    $pid = $creation_info['pid'];
    $all_meta_entered = $creation_info['all_meta_entered'];
    /* SID-453 : Add parent pid to the Sidora datastream of the newly created
     * object. This info gets added only once after a new object is ingested.
     * Any subsequent operations on the object like copy or move do not change
     * this info in Sidora datastream.
     */
    $parent_pid = empty($creation_info['parent_pid']) ? '' : $creation_info['parent_pid'];
    $pid = $creation_info['pid'];
    $object = sidora_obj($pid);
    if (sidora_is_fedora_user_pid($pid)) {
      $dsid_and_form = sidora_guess_dsid_and_form_name($object);
      $creation_info['dsid'] = variable_get('sidora_automatic_person_dsid','');
      $creation_info['model'] = variable_get('sidora_automatic_person_model','');
      $creation_info['form'] = variable_get('sidora_automatic_person_form','');
      $creation_info['ontology_id'] = '';
      $parent_pid = 'si:user-projects'; //BBB TODO
      $all_meta_entered = TRUE;
    }
    elseif (empty($creation_info['added_sidora_ds']) && !empty($creation_info['form']) && !empty($creation_info['model'])) {
      $dsids = sidora_get_proper_dsid($creation_info['model'],$creation_info['form']);
      $creation_info['dsid'] = (empty($dsids)) ? '' : $dsids[0];
      sidora_update_datastream($object, '<sidora>
<model>'.$creation_info['model'].'</model>
<form>'.$creation_info['form'].'</form>
<ontology_location_id>'.$creation_info['ontology_id'].'</ontology_location_id>
<meta_requirements_fulfilled>'.$all_meta_entered.'</meta_requirements_fulfilled>
<initial_dsid>'.$creation_info['dsid'].'</initial_dsid>
<original_parent>'.$parent_pid.'</original_parent>
<original_creator>'.$user->name.'</original_creator>
</sidora>', 'SIDORA', NULL, NULL, 'X');
    }
    sidora_object_creation_info($form_build_id,'added_sidora_ds',TRUE);
  }
  else {
    // Items like Codebooks have no creation info, this should only be items that were not created via the menu
  }

  if ($parent_pid) {
    $parent = sidora_obj($parent_pid);
    // If the user that should own the item does not match the actual owner, update the actual owner
    $owner_id = sidora_get_default_owner_id_under_pid($parent_pid);
    $proper_owner_username = sidora_get_username_from_uid($owner_id);
    if (strtolower($proper_owner_username) != strtolower($object->owner)){
      $object->owner = $proper_owner_username;
    }

    // link to parent with Sidora nomenclature
    $is_concept = sidora_is_concept($object);
    $is_codebook = sidora_is_codebook($object);
    if ($is_concept || $is_codebook) {
      $parent_node = sidora_get_concept_node($parent_pid);
      $parent_node_id = $parent_node->nid;
      module_load_include('inc', 'sidora', 'includes/project_spaces');
      $parent_gids = sidora_get_group_nids_membership($parent_node_id);
      $parent_groups = node_load_multiple($parent_gids);
      if ($is_concept) {
        // Create the Drupal node to go along with it
        $info = array("label"=>$object->label,"concept_children"=>'',"resource_children"=>0);
        $concept_node = sidora_create_concept_node($object->id, $info, TRUE, $owner_id);
        foreach($parent_groups as $parent_group) {
          og_group('node', $parent_group, array('entity_type' => 'node', 'entity' => $concept_node->nid));
        }
        // Update Drupal node of parent
        // don't show the new folder message for automatically created research spaces, show message otherwise for JS to pick up
        if (empty($object['SIDORA']) || !sidora_contains($object['SIDORA']->content, '<ontology_location_id>AUTOMATIC_USER_CREATION_FROM_SIDORA_DEFAULT</ontology_location_id>', FALSE)){
          drupal_set_message("New node created for new folder --" . $concept_node->nid . "--");
        }
        sidora_update_concept_node_add_child($parent_node, $concept_node->nid);


        // Update Fedora parent
        if (empty($creation_info['added_to_parent'])) {
          $parent->relationships->add(FEDORA_RELS_EXT_URI, 'hasConcept', $object->id);
          $object->relationships->registerNamespace("sidora", SI_RELS_EXT_URI);
          $object->relationships->add(SI_RELS_EXT_URI, 'isAdministeredBy', $parent->id);
        }
        sidora_object_creation_info($form_build_id,'added_to_parent',TRUE);
        // clear THEIR parents out since the number in parens is held there
        $grandparents = sidora_get_parent_concepts($parent);
        foreach ($grandparents as $grandparent_pid => $grandparent) {
          sidora_clear_tree_cache($grandparent_pid);
        }
        // put the new object into its groups
        node_save($concept_node);
        sidora_put_this_into_their_project_space($object->id, $parent->id);
      }
      elseif ($is_codebook) {
        // add codebook to project space's main item
        // find the project space's main item by getting the node of the parent and finding its organic groups
        $pids = sidora_get_project_space_pids_from_og_groups($parent_groups, NULL, FALSE);
        // then get the main pid for the organic group
        $ps_object = sidora_obj($pids[0]);
        if (empty($creation_info['added_to_parent'])) {
          $ps_object->relationships->add(FEDORA_RELS_EXT_URI, 'managesCodebook', $object->id);
          $object->relationships->registerNamespace("sidora", SI_RELS_EXT_URI);
          $object->relationships->add(SI_RELS_EXT_URI, 'isAdministeredBy', $ps_object->id);
        }
        sidora_object_creation_info($form_build_id,'added_to_parent',TRUE);
        // set the user's recent codebook to this new codebook
        $edit['data']['recent_codebook_id'] = $object->id;
        user_save($user,$edit);
      }
    }
    else {
      if (empty($creation_info['added_to_parent'])) {
        $parent->relationships->add(FEDORA_RELS_EXT_URI, 'hasResource', $object->id);
        $object->relationships->registerNamespace("sidora", SI_RELS_EXT_URI);
        $object->relationships->add(SI_RELS_EXT_URI, 'isAdministeredBy', $parent->id);
      }
      sidora_object_creation_info($form_build_id,'added_to_parent',TRUE);
      $tuque = islandora_get_tuque_connection();
      // if its a video, set the mime type for OBJ explicitly
      if ($creation_info['model'] == 'islandora:sp_videoCModel') {
        $file_mime_type = '';
        if (sidora_get_file_extension_from_mime(pathinfo($file_location, PATHINFO_EXTENSION), TRUE)) {
          $file_mime_type = sidora_get_file_extension_from_mime(pathinfo($file_location, PATHINFO_EXTENSION), TRUE);
          sidora_update_datastream($object, $file_location, 'OBJ', $file_name, $file_mime_type);
        }
        else {
          sidora_update_datastream($object, $file_location, 'OBJ', $file_name);
        }
      }
      else {
        sidora_update_datastream($object, $file_location, 'OBJ', $file_name);
      }
      // Update Drupal node of parent
      $parent_node = sidora_get_concept_node($parent_pid);
      // Update the number of resources on the node
      sidora_update_concept_node_add_child($parent_node);
      // if it's a tabular, see if there is a proper codebook
      if ($creation_info['model'] == 'si:datasetCModel') {
        $codebook_pid = $user->data['recent_codebook_id'];
        $object->relationships->add(FEDORA_RELS_EXT_URI, 'hasCodebook', $codebook_pid);
      }
    }
    sidora_clear_tree_cache($object->id);
  }
  sidora_object_creation_info($form_build_id,'complete',TRUE);
}

/**
 * Checks the forms that are held in the cache and reprocesses any that have been started but were not completed
 * The assumption being that the communication with Fedora failed somewhere
 * $only_these_form_ids - csv string of form build ids or an array of form build ids, if NULL then do all
 */
function sidora_reprocess_incomplete_object_creation_forms($only_these_form_ids = NULL) {
  if (is_string($only_these_form_ids)) {
    $only_these_form_ids = explode(',' , $only_these_form_ids);
  }
  $id_to_creation_info = cache_get("sidora:form_id_to_creation_info");
  if (empty($id_to_creation_info)) {
    return;
  }
  else {
    $id_to_creation_info = $id_to_creation_info->data;
  }
  foreach ($id_to_creation_info as $form_id => $creation_info) {
    if (
      !empty($creation_info['started']) &&
      empty($creation_info['complete']) &&
      (empty($only_these_form_ids) || in_array($form_id, $only_these_form_ids))
    ) {
      sidora_process_object_with_build_id($form_id);
      print 'Complete';
    }
  }
}

/*
 * Get or set cached information that is associated with this form id
 * $submitted_form_id - form_id to grab information about (if NULL, pulls from current POSTed form)
 * $key - if used, set a value into the cache for the form
 * $value - if used with $key, then sets this key/value pair into the cached information about the form
 * returns an associative array
 */
function sidora_object_creation_info($submitted_form_id = NULL, $key = NULL, $value = NULL) {
  if (empty($submitted_form_id)) {
    if (array_key_exists('form_build_id', $_POST)) {
      $submitted_form_id = $_POST['form_build_id'];
    }
  }
  $creation_info = array();
  $id_to_creation_info = cache_get("sidora:form_id_to_creation_info");
  if (empty($id_to_creation_info)) {
    $id_to_creation_info = array();
    // so additional checks no longer has to ask if this array exists
  }
  else {
    $id_to_creation_info = $id_to_creation_info->data;
  }
  if (array_key_exists($submitted_form_id, $id_to_creation_info)) {
    $creation_info = $id_to_creation_info[$submitted_form_id];
  }
  if (empty($key)) {
    return $creation_info;
  }
  if ($value === NULL) {
    if (empty($creation_info[$key])) return NULL;
    return $creation_info[$key];
  }
  $creation_info[$key] = $value;
  $id_to_creation_info[$submitted_form_id] = $creation_info;
  cache_set("sidora:form_id_to_creation_info",$id_to_creation_info);
  return $creation_info;
}

/**
 * Implementation for hook_islandora_object_ingested
 * Uses information set into the page load to determine what to do with the object
 *   The information is set during the "form submit" stage of sidora_create_concept and sidora_create_resource
 * Uses information set into session during the file uploads to determine what files to add
 *   TBD / TODO: Create better implementation for storing which files go with which item
 *   For example, save it in the form's cache / form
 */
function sidora_islandora_object_ingested(AbstractObject $object) {
  sidora_after_ingest_processing($object);
  $creation_info = sidora_object_creation_info();
}

/**
 * Split out the SIdora processing from the hook, so it can be called apart from the hook
 */
function sidora_after_ingest_processing(AbstractObject $object) {
  global $user;
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/ingest.form');
  module_load_include('inc', 'sidora', 'includes/utils');

  /*
  if (strpos($object->id, "si-user:") === FALSE) {
    drupal_set_message("Object:".$object->id);
    drupal_set_message("Parent:".$parent_pid);
    drupal_set_message("New Pid:" . $object->id . ":End New Pid");
  }
  */
  if (array_key_exists('form_build_id', $_POST)) {
    $submitted_form_build_id = $_POST['form_build_id'];
    sidora_object_creation_info($submitted_form_build_id, 'pid', $object->id);
    $all_meta_entered = filter_input(INPUT_POST, 'all_meta_entered', FILTER_SANITIZE_URL);
    if ($all_meta_entered != 'TRUE') $all_meta_entered = 'FALSE';
    sidora_object_creation_info($submitted_form_build_id, 'all_meta_entered', $all_meta_entered);
    $ontology_id = drupal_static('ontology_id');
    sidora_object_creation_info($submitted_form_build_id, 'ontology_id', $ontology_id);
    $parent_pid = drupal_static('parent_collection_pid');
    sidora_object_creation_info($submitted_form_build_id, 'parent_pid', $parent_pid);
    sidora_process_object_with_build_id($submitted_form_build_id);
  }
  else {
    // This is likely from the duplicate process.
    // The additional datastreams will be handled in the duplicate process
  }
}

/**
 * Implements hook_islandora_object_modified
 */
function sidora_islandora_object_modified(AbstractObject $object) {
  // drupal_set_message("Sidora Object Modified");
  sidora_clear_tree_cache($object->id);
}

/**
 * Implements hook_islandora_datastream_modified
 */
function sidora_islandora_datastream_modified(AbstractObject $object, AbstractDatastream $datastream) {
//print "++++++++++++++++++++++++";
//var_dump($object->id);
//var_dump($datastream[0]);
//print "========================";
  module_load_include('inc', 'sidora', 'includes/utils');
  // Assume that any update that occurs to a datastream that is of type xml but is not one of the "main" types is the proper type for
  // metadata to be complete.  The more formal way to do this would be:
  // 1) Take information from the SIDORA datastream to determine form and model
  // 2) Use this information with the Islandora XML form builder association information to determine the datastream ID SI cares about
  // 3) Use Islandora XML form builder to produce the form required
  // 4) Check that the information in the submitted information matches the required fields
  // The reason that the formal method is skipped is that the only way to otherwise get to this point is through advanced manipulation, either
  // trying to get around the UI by doing direct calls or by using the management system available to admins
  // If the user is doing either of those, then they also have the ability to directly write to the SIDORA datastream and can
  // manipulate it as they desire.  This is NOT a security problem, the user would be allowed to perform these actions.
  // However, it would be a user directly manipulating data in a way that is
  // not fully supported by the Workbench.
  if ($datastream->id == 'DC') {
    $edit_metadata_path_to_pid = 'sidora/edit_metadata/';
    if (sidora_startsWith(current_path(), $edit_metadata_path_to_pid)) {
      if (empty($GLOBALS['sidora_set_dc'])) {
        $pid = substr(current_path(), strlen($edit_metadata_path_to_pid));
        module_load_include('inc', 'sidora', 'includes/dc_manipulation');
        $new_dc_ds = sidora_dc_join_and_return_xml($pid);
        $obj = sidora_obj($pid);
        $GLOBALS['sidora_set_dc'] = TRUE;
        $obj['DC']->setContentFromString($new_dc_ds);
      }
    }

  }
  if ($datastream->id == 'EAC-CPF')
  {
      $edit_metadata_path_to_pid = 'sidora/edit_metadata/';
      $pid = substr(current_path(), strlen($edit_metadata_path_to_pid));
      //watchdog("sidora", "sidora_emammal module exists", NULL, WATCHDOG_NOTICE);
      $opt_in = sidora_check_opt_in_for_wi($object);
      sidora_wi_curl_request($pid, $opt_in);
      //watchdog("sidora", "opt-in for pid !pid is !opt", array("!pid" => $pid, "!opt" => $opt_in?"TRUE":"FALSE"), WATCHDOG_NOTICE);
  }
  if ((strpos($datastream->mimetype,'xml') !== false) && $datastream->id != 'SIDORA' && $datastream->id != 'DC' && $datastream->id != 'RELS-EXT') {
    $all_meta_entered = filter_input(INPUT_POST, 'all_meta_entered', FILTER_SANITIZE_URL);
    $form_name = filter_input(INPUT_POST, 'form_name', FILTER_SANITIZE_URL);
    if (!empty($object['SIDORA'])){
      $doc = new DOMDocument();
      $docToLoad = ('<'.'?'.'xml version="1.0" encoding="UTF-8"'.'?'.'>'.$object['SIDORA']->content);
      // vi gets borked when it sees the xml declaration and no longer highlights correctly for the rest of the file
      // for the sanity of anyone using vi please leave the xml declaration as a concatenation
      $doc->loadXML($docToLoad);
      $mrf = $doc->getElementsByTagName('meta_requirements_fulfilled');
      if (!empty($mrf) && $mrf->length > 0) {
        foreach ($mrf as $smrf) {
         $smrf->nodeValue = $all_meta_entered;
        }
      }
      else {
        $node = $doc->createElement('meta_requirements_fulfilled');
        $node->nodeValue = $all_meta_entered;
        $sidora_node = $doc->getElementsByTagName('sidora');
        $sidora_node->item(0)->appendChild($node);
      }
      $sidora_node = $doc->getElementsByTagName('sidora');
      $object['SIDORA']->content = $doc->saveXML($sidora_node->item(0));
      $sidora_form_name = $doc->getElementsByTagName('form');
      if (empty($sidora_form_name) || $sidora_form_name->length == 0) {
        $node = $doc->createElement('form');
        $node->nodeValue = $form_name;
        $sidora_node = $doc->getElementsByTagName('sidora');
        $sidora_node->item(0)->appendChild($node);
        $sidora_node = $doc->getElementsByTagName('sidora');
        $object['SIDORA']->content = $doc->saveXML($sidora_node->item(0));
                        }
    }
    else {
      // Didn't have the SIDORA datastream, add at least that the metadata has been updated
      // sidora_update_datastream($object, '<sidora><meta_requirements_fulfilled>TRUE</meta_requirements_fulfilled></sidora>', 'SIDORA');
      sidora_update_datastream($object, '<sidora>
      <meta_requirements_fulfilled>'.$all_meta_entered.'</meta_requirements_fulfilled>
      <form>'.$form_name.'</form>
      </sidora>', 'SIDORA',NULL,NULL,'X');
    }
  }
  sidora_clear_tree_cache($object->id);
  // update its parents too.  What probably happened affected its concept children number (is in the parens) which is held at the parent level
  $parents = sidora_get_parent_concepts($object);
  foreach ($parents as $parent_pid => $parent) {
    sidora_clear_tree_cache($parent_pid);
  }
}

/**
 * Implements hook_islandora_datastream_ingested
 */
function sidora_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  // ("Sidora Datastream Ingested");
}

/**
 * Implements hook_islandora_datastream_alter
 */
function sidora_islandora_datastream_alter(AbstractObject $object, AbstractDatastream $datastream, array &$context) {
  // drupal_set_message("Sidora Datastream Alter");
  sidora_clear_tree_cache($object->id);
}

/**
 * Guess the dsid and form name used to create the object
 * returns an array of the form:
 *     $to_return['dsid'] = 'FGDC';
 *     $to_return['form_name'] = 'Tabular Data Set Object';
 */
function sidora_guess_dsid_and_form_name($object) {
  module_load_include('inc', 'sidora', 'includes/utils');
  // for is_concept

  // Tries to guess the dsid and form_name for an object
/*
If concept:
  Look at what datastreams exist on the object, several datastreams correspond directly to a specific form, however these break down on
EAC-CPF
  Person
  Expedition
  Research Project
FGDC
  Camera Trap Deployment
  Archaeology Site

If resource:
First, get the models of the item which will narrow down the choices.
Choose a datastream based on the model
Hard code each set of dsid by type:
Image: MODS
Tabular: FGDC
PDF: MODS

If necessary, look into the datastream contents to see if it has items specific to a certain form (hard-coded)

Reference (if needed)
Image metadata:
  is Camera Trap if in XML (doesn't exist in other forms of this model):
    relatedItem identifier
    originInfo dateOther
  is General if in XML (doesn't exist in other forms of this model):
    genre
    note


PDF metadata:
  is Digitized Text if in XML (doesn't exist in other forms of this model):
    genre
    originInfo dateIssued
    physicalDescription extent
  is Field Book if in XML (doesn't exist in other forms of this model):
    location shelfLocator
*/
  $to_return = array();
  $to_return['dsid'] = '';
  $to_return['form_name'] = '';

  $is_codebook = sidora_is_codebook($object);
  $is_concept = sidora_is_concept($object);
  if ($is_codebook) {
    $to_return['dsid'] = 'DDI';
    $to_return['form_name'] = 'Codebook';
  }
  elseif ($is_concept) {
    if (!empty($object['EAC-CPF'])) {
      $to_return['dsid'] = 'EAC-CPF';
      if (sidora_startsWith($object->id, 'si-user:')) {
         $to_return['form_name'] = (variable_get('sidora_legacy_person_form','Person') != 'None') ? variable_get('sidora_legacy_person_form','Person') : 'Person';
       // $to_return['form_name'] = 'Person';
      }
      else {
/*

  Person
  Expedition
  Research Project
*/
        $EACCPF_content = $object['EAC-CPF']->content;
        if (strpos($EACCPF_content, "<localControl localType=\"Publication Date\">") !== FALSE) {
          $to_return['form_name'] = (variable_get('sidora_legacy_research_project_form','Research Project') != 'None') ? variable_get('sidora_legacy_research_project_form','Research Project') : 'Research Project';
          // $to_return['form_name'] = 'Research Project';
        }
        else {
          $to_return['form_name'] = (variable_get('sidora_legacy_expedition_form','Expedition') != 'None') ? variable_get('sidora_legacy_expedition_form','Expedition') : 'Expedition';
          // $to_return['form_name'] = 'Expedition';
        }
      }
    }
    elseif (!empty($object['FGDC-Research'])) {
      $to_return['dsid'] = 'FGDC-Research';
      $to_return['form_name'] = (variable_get('sidora_legacy_research_site_or_area_form','Research Site or Area - Full Description') != 'None') ? variable_get('sidora_legacy_research_site_or_area_form','Research Site or Area - Full Description') : 'Research Site or Area - Full Description';
      // $to_return['form_name'] = 'Research Site or Area - Full Description';
    }
    elseif (!empty($object['FGDC'])) {
/*
  Camera Trap Deployment
  Archaeology Site
*/
      $to_return['dsid'] = 'FGDC';
      $to_return['form_name'] = variable_get('sidora_legacy_archaeology_site_form','Archaeology Site');
      // $to_return['form_name'] = 'Archaeology Site';
      $object_content_models = $object->relationships->get('info:fedora/fedora-system:def/model#', 'hasModel');
      foreach ($object_content_models as $ocm) {
        if ($ocm['object']['value'] == 'si:cameraTrapCModel') {
          $to_return['form_name'] = (variable_get('sidora_legacy_camera_trap_deployment_form','Camera Trap Deployment') != 'None') ? variable_get('sidora_legacy_camera_trap_deployment_form','Camera Trap Deployment') : 'Camera Trap Deployment';
          // $to_return['form_name'] = 'Camera Trap Deployment';
        }
      }
    }
    elseif (!empty($object['FGDC-CTPlot'])) {
      $to_return['dsid'] = 'FGDC-CTPlot';
      $to_return['form_name'] = (variable_get('sidora_legacy_camera_trap_plot_form','Camera Trap Plot') != 'None') ? variable_get('sidora_legacy_camera_trap_plot_form','Camera Trap Plot') : 'Camera Trap Plot';
      // $to_return['form_name'] = 'Camera Trap Plot';
    }
    elseif (!empty($object['NCD'])) {
      $to_return['dsid'] = 'NCD';
      $to_return['form_name'] = (variable_get('sidora_legacy_field_book_collection_form','Field Book Collection') != 'None') ? variable_get('sidora_legacy_field_book_collection_form','Field Book Collection') : 'Field Book Collection';
      // $to_return['form_name'] = 'Field Book Collection';
    }
    elseif (!empty($object['LIDO'])) {
      $to_return['dsid'] = 'LIDO';
      $to_return['form_name'] = (variable_get('sidora_legacy_cultural_heritage_entity_or_object_form','Cultural Heritage Entity or Object') != 'None') ? variable_get('sidora_legacy_cultural_heritage_entity_or_object_form','Cultural Heritage Entity or Object') : 'Cultural Heritage Entity or Object';
      // $to_return['form_name'] = 'Cultural Heritage Entity or Object';
    }
    /*
    $object_content_models = $object->relationships->get('info:fedora/fedora-system:def/model#', 'hasModel');
    foreach ($object_content_models as $ocm) {
      ($ocm['object']['value']);
    }
    */
  }
  else {
    // So our known types are si:generalImageCModel (Image), si:fieldbookCModel (PDF), si:datasetCModel (CSV)
    $object_content_models = $object->relationships->get('info:fedora/fedora-system:def/model#', 'hasModel');
    foreach ($object_content_models as $ocm) {
      $cm = $ocm['object']['value'];
      if ($cm == 'si:generalImageCModel') {
        $to_return['dsid'] = 'MODS';
        $MODS_content = $object['MODS']->content;
        if (strpos($MODS_content, "<relatedItem>") !== FALSE) {
          $to_return['form_name'] = (variable_get('sidora_legacy_camera_trap_image_form','Camera Trap Image') != 'None') ? variable_get('sidora_legacy_camera_trap_image_form','Camera Trap Image') : 'Camera Trap Image';
          // $to_return['form_name'] = 'Camera Trap Image';
        }
        else {
          $to_return['form_name'] = (variable_get('sidora_legacy_general_image_form','General Image Description') != 'None') ? variable_get('sidora_legacy_general_image_form','General Image Description') : 'General Image Description';
          // $to_return['form_name'] = 'General Image Description';
        }
      }
      if ($cm == 'si:fieldbookCModel') {
        // Since we won't be editing metadata yet for fieldbooks, assume this is a PDF
        $to_return['dsid'] = 'MODS';
        $to_return['form_name'] = (variable_get('sidora_legacy_pdf_form','Digitized Text (PDF)') != 'None') ? variable_get('sidora_legacy_pdf_form','Digitized Text (PDF)') : 'Digitized Text (PDF)';
        // $to_return['form_name'] = 'Digitized Text (PDF)';
      }
      if ($cm == 'si:datasetCModel') {
        $to_return['dsid'] = 'FGDC';
        $to_return['form_name'] = (variable_get('sidora_legacy_tabular_data_set_object_form','Tabular Data Set Object') != 'None') ? variable_get('sidora_legacy_tabular_data_set_object_form','Tabular Data Set Object') : 'Tabular Data Set Object';
        // $to_return['form_name'] = 'Tabular Data Set Object';
      }
    }
  }
  return $to_return;
}

/*
 * returns an array('form_name'=> <form_name>, 'dsid'=> <dsid>, 'ontology_id'=> <ontology_id>) or FALSE if it can't be figured out
 */
function sidora_get_form_and_dsid($object_pid) {
  $to_return = array();
  module_load_include('inc', 'sidora', 'includes/utils');
  // for is_concept
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/ingest.form');
  module_load_include('inc','xml_forms','builder/includes/datastream.form');
  module_load_include('inc','xml_forms','builder/includes/associations');
  $object = sidora_obj($object_pid);
  // Now that we have the object, check to see if it has the SIDORA datastream (which will tell us the model and form to use)
  if ($object['SIDORA'] &&
        strpos($object['SIDORA']->content, '<form>') > 0 &&
        strpos($object['SIDORA']->content, '<model>') > 0 &&
        (
          strpos($object['SIDORA']->content, '<ontology_location_id>') > 0 ||
          strpos($object['SIDORA']->content, '<ontology_location_id/>') > 0
        )
     ) {
    $to_model = '
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:mods="http://www.loc.gov/mods/v3"
xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
xmlns:cpf="urn:isbn:1-931666-33-4"
>
<xsl:template match="/">
  <xsl:for-each select="//model">
      <xsl:value-of select="current()"/>
    </xsl:for-each>
</xsl:template>
</xsl:stylesheet>';

    $to_form_name = '
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:mods="http://www.loc.gov/mods/v3"
xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
xmlns:cpf="urn:isbn:1-931666-33-4"
>
<xsl:template match="/">
  <xsl:for-each select="//form">
      <xsl:value-of select="current()"/>
    </xsl:for-each>
</xsl:template>
</xsl:stylesheet>';

    $to_ontology_id = '
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:mods="http://www.loc.gov/mods/v3"
xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
xmlns:cpf="urn:isbn:1-931666-33-4"
>
<xsl:template match="/">
  <xsl:for-each select="//ontology_location_id">
      <xsl:value-of select="current()"/>
    </xsl:for-each>
</xsl:template>
</xsl:stylesheet>';
    $doc = new DOMDocument();
    $xsl = new XSLTProcessor();
    $doc->loadXML($to_form_name);
    $xsl->importStyleSheet($doc);
    $docToLoad = ('<?xml version="1.0" encoding="UTF-8"?'.'>'.$object['SIDORA']->content);
    $doc->loadXML($docToLoad);
    $form_name = '';
    if (!empty($xsl->transformToDoc($doc)->firstChild)) {
      $form_name = trim($xsl->transformToDoc($doc)->firstChild->wholeText);
    }

    $doc->loadXML($to_model);
    $xsl->importStyleSheet($doc);
    $docToLoad = ('<'.'?xml version="1.0" encoding="UTF-8"?'.'>'.$object['SIDORA']->content);
    $doc->loadXML($docToLoad);
    $model = '';
    if (!empty($xsl->transformToDoc($doc)->firstChild)) {
      $model = trim($xsl->transformToDoc($doc)->firstChild->wholeText);
    }

    $doc->loadXML($to_ontology_id);
    $xsl->importStyleSheet($doc);
    $docToLoad = ('<'.'?xml version="1.0" encoding="UTF-8"?'.'>'.$object['SIDORA']->content);
    $doc->loadXML($docToLoad);
    $found_ontology_id = FALSE;
    $ontology_id = SIDORA_NEVER_SET;
    $xsl_transformed = $xsl->transformToDoc($doc);
    if (!empty($xsl_transformed)) {
      $fc = $xsl_transformed->firstChild;
      if (!empty($fc)) {
        $ontology_id = trim($xsl->transformToDoc($doc)->firstChild->wholeText);
        $found_ontology_id = TRUE;
      }
    }
    if (!$found_ontology_id) {
      $ontology_id = '';
    }
    $checker = xml_form_builder_get_associations(array(), array(), array(), FALSE);
    // Sidora assumes that we will only have one form that we care about as metadata, and that we will only have one association of model to form
    $found_dsid = '';
    foreach ($checker as $check_association) {
      if ($check_association['content_model'] == $model && $check_association['form_name'] == $form_name) {
        $found_dsid = $check_association['dsid'];
      }
    }
    $to_return['dsid'] = $found_dsid;
    $to_return['form_name'] = $form_name;
    $to_return['ontology_id'] = $ontology_id;
    return $to_return;
  }
  else {
    $associations = xml_form_builder_get_associations(array(), $object->models, array());
    if (count($associations) == 1) {
      $curr_association = $associations[0];
      $to_return['form_name'] = $curr_association['form_name'];
      $to_return['dsid'] = $curr_association['dsid'];
      $to_return['ontology_id'] = '';
      return $to_return;
    }
    else {
      $info = sidora_guess_dsid_and_form_name($object);
      if (!empty($info['form_name'])) {
        // watchdog('sidora_workbench',$object_pid.' - Form was guessed, not included in information:'.$dsid.' "'.$form_name.'"');
        $info['ontology_id'] = '';
        return $info;
      }
      else {
        return FALSE;
      }
    }
  }
  return $to_return;
}

/*
 * Show the form used to edit the object's metadata
 */
function sidora_edit_metadata($object_id_string = '', $dsid = '', $form_name = '') {
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_create_resource.css',array('weight' => '1000000', 'group' => CSS_THEME));
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_metadata_screens.css',array('weight' => '1000000', 'group' => CSS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_util.js',array('weight' => '1000000', 'group' => JS_THEME));
  drupal_add_library('system','ui.dialog');
  global $user;
  if (strpos($object_id_string, 'retry') !== false) {
    $to_return = '<script>
      jQuery(document).ready(function() {
      jQuery("body").prepend(\'<div id="retry_edit" style="width:100%;height:100%;position:absolute;left:0;top:0;z-index:100;background:white;"></div>\');
      var parent = window.parent;
      jQuery("#retry_edit").html(parent.jQuery("#edit_form").text());
      });
    </script>';
  }
  else {
  // if the pid is locked, can't do it
  $to_return = '';
  $to_return .= '<div id="edit-metadata">';
  $object_id_array = explode("&",$object_id_string);
  for ($resource_count = 0; $resource_count < count($object_id_array); $resource_count++) {
  $object_id = $object_id_array[$resource_count];
  if (!sidora_obtain_lock($object_id)) {
    $to_return = '';
    $to_return .= t('The object %object is currently locked by another user', array('%object' => $object_id)).'</div>';
    return $to_return;
  }
  $to_return .= '<div id="form-num-'.$resource_count.'" class="sidora-ingest-form-holder">';

  $sidora_data = sidora_get_form_and_dsid($object_id);
  $dsid = $sidora_data['dsid'];
  $form_name = $sidora_data['form_name'];
  $object = sidora_obj($object_id);
  $form_state = array();
  $associations = xml_form_builder_datastream_form_get_associations($form_state,$object->models, $dsid);
        // first param goes unused
  $association = null;
  foreach ($associations as $curr_association) {
    if ($curr_association['form_name'] == $form_name) {
      $association = $curr_association;
    }
  }
  if (empty($association)) {
    print "<div style='padding:20px;'>";
    print "The form is not configured correctly.  The form specified is not associated to this model. Error:A2<br/>";
    print "If this is a legacy item, please ensure there is an association between the form you want to use with one of the models listed here.<br/>";
    print "pid:$object_id_string<br/>";
    print "dsid:$dsid<br/>";
    print "form:$form_name<br/>";
    print "models:";
    var_dump($object->models);
    print "</div>";
    return "";
  }
  try{
    $available_content = FALSE;
    foreach ($object as $dsid_loop=>$datastream_loop) {
      if ($dsid_loop == $association['dsid']) {
        $available_content = $association['dsid'];
      }
    }
    $tform = drupal_get_form('xml_form_builder_datastream_form_metadata_form',$object,$association);
  }catch(Exception $exc){

    print '<!-- SHOW ME -->';
    print 'The form for: '.$object->label.' could not be saved. ';
    print t('Please contact the site administrator %email',
      array('%email' => (variable_get('site_admin_email_to', '') != ''?' at ' . variable_get('site_admin_email_to'):''))
    );
    print '<!-- FINISH -->';
    $information_string = t("Likely issue: XML in the dsid: '%dsid' is does not match the form: '%form_name'",
      array('%dsid' => $dsid, '%form_name' => $form_name)
    );
    sidora_add_fedora_assumption_problem_object(
      $object_id_string,
      $information_string
    );
    watchdog('sidora_obj', "Problem with pid: $object_id_string " . $information_string);
  }
  $download_meta_url = '';
  if (!empty($available_content)) {
    $download_meta_url = $GLOBALS['base_url'].'/sidora/info/'.$object_id.'/meta/' . $available_content . '/download';
    $download_meta_url = l('Download this information as XML', $download_meta_url);
  }
  $to_return .= '<div id="top-panel" class="top-panel" style="left:0; width:100%; height:30px;">'.$download_meta_url.'</div>';
  // If the user is not allowed to update it, then don't allow the system to call the submit handlers that would do the updates and do not provide information that would allow user to bypass
  if (!sidora_allow($user,$object_id,'update')) {
    $tform['update']['#submit'] = array();
    $tform['#submit'] = array();
    $tform['#form_id'] = 'do_not_allow_update_xml_form';
    $tform['#build_id'] = 'do_not_allow_update_xml_form';
    $tform['form_build_id'] = array();
    $tform['form_token'] = array();
    $tform['submit'] = array();
    unset($tform['update']);
  }
  $tform['pid'] = array(
  '#type' => 'hidden',
  '#name' => 'Pid',
  '#value' => $object_id
  );
  $tform['form_name'] = array(
  '#type' => 'hidden',
  '#name' => 'form_name',
  '#value' => $form_name
  );
  $tform['#attributes']['name'][] = $object_id;
  $tform['#attributes']['class'][] = $object_id;
  $tform['#attributes']['count'][] = $resource_count;
  $is_concept = sidora_is_concept($object);
  if ($is_concept)
    drupal_add_js('window.isConcept = true;',array('type' => 'inline', 'weight' => '1000000', 'group' => JS_THEME));
  else
    drupal_add_js('window.isConcept = false;',array('type' => 'inline', 'weight' => '1000000', 'group' => JS_THEME));
  $pic_shown = FALSE;
  if (!$is_concept) {
    if ($association['content_model'] == "si:codebookCModel") {
      $codebook_used_on = (sidora_get_where_codebook_used($object));
      if (!empty($codebook_used_on)) {
        drupal_set_message(t('This codebook is used on %num %objects:', array(
          '%num' => count($codebook_used_on),
          '%objects' => count($codebook_used_on)==1?'object':'objects',
        )));
        foreach ($codebook_used_on as $curr_used_on) {
          drupal_set_message('<div style="display:none">'.$curr_used_on['pid'].'</div>'.$curr_used_on['label']);
        }
      }
    }
    $vmt = sidora_get_viewable_mime_types();
    if (!empty($object['OBJ']) &&  strpos($object['OBJ']->mimetype, 'image') !== FALSE) {
      $to_return .= '<div class="picHolder" style="overflow:auto">';
      $tn = '';
      if (!empty($object['TN']) && in_array($object['TN']->mimetype, $vmt)) {
        $tn = '<img src="'.$GLOBALS['base_url'].'/sidora/info/'.$object_id.'/meta/TN/browser" />';
      }
      $viewer_link = $GLOBALS['base_url'].'/sidora/resource_viewer/'.$object_id;
      $obj_pic = "\r\n" . '<a href="'.$viewer_link.'" onclick="window.open(\''.$viewer_link.'\');return false;">';
      $obj_pic .= 'Open in New Window</a>';
      $obj_pic .= "\r\n" . '<iframe style="height:100%;width:100%;" src="'.$viewer_link.'" allowfullscreen="true" webkitallowfullscreen="true" mozallowfullscreen="true" oallowfullscreen="true" msallowfullscreen="true"></iframe>';
      $to_return .= "\r\n" .'<div style="width:100%;display:inline-block;overflow:auto;vertical-align:top;">';
      $to_return .= $tn;
      $to_return .= '<div style="width:100%;height:600px;overflow:auto;">';
      $to_return .= $obj_pic;
      $to_return .= '</div>';
      $to_return .= '</div>';
      $pic_shown = TRUE;
      $to_return .= '</div>';
    }
  }
  if ($pic_shown) {
    $to_return .= '<div style="width:49%;display:inline-block;margin-left:9px; float:right;">'.drupal_render($tform);
  }
  else {
    $to_return .= '<div>'.drupal_render($tform);
  }
  $to_return .= '<div id="bottom-panel" class="bottom-panel" style="position:absolute; bottom:0; left:0; width:100%;">'.$download_meta_url.'</div></div>';
  $to_return .= "</div>";
}

  $to_return .= "</div>";
  }
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_uploader.js',array('weight' => '1000000', 'group' => JS_THEME));
  // Next line says don't let them submit the form by pressing enter
  drupal_add_js(
    'jQuery(document).ready(function(){jQuery("form").bind("keypress keydown keyup", function(e){  if(e.keyCode == 13 && e.target.tagName != "TEXTAREA") { e.preventDefault(); }});  })',
    array('type' => 'inline', 'weight' => '1000000', 'group' => JS_THEME)
  );
  return $to_return;
}

/*
 * Returns array of mime types which are "displayable" directly to browser
 */
function sidora_get_viewable_mime_types() {
  return array(
    'image/jpeg',
    'image/gif',
    'image/png',
    'text/csv'
  );

}

/**
 * Tell any imagemagic transforms to convert it to jpg
 */
function sidora_imagemagick_arguments_alter($args, $context) {
  $context['destination'] = $context['destination_original'];
  $context['destination_format'] = 'jpg';
}

/*
 * returns an array of strings that are the DSIDs that are currently conigured for use with the specified model and form name
 * convenience method to xml_form_builder_get_associations
 */
function sidora_get_proper_dsid($model_id, $form_name) {
  module_load_include('inc', 'xml_form_builder', 'XMLFormRepository');
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  // $names = XMLFormRepository::GetNames();
  $associations = xml_form_builder_get_associations(array($form_name), array($model_id), array(), FALSE);
  $to_return = array();
  foreach ($associations as $association) {
    $to_return[] = $association['dsid'];
  }
  return $to_return;
}

/*
 * Returns HTML containing a table of codebooks or empty string if no codebooks are associated with the pid
 */
function sidora_get_related_codebook_table($pid) {
  module_load_include('inc', 'sidora', 'includes/utils');
  $output = 'Codebook';
  $cbs = sidora_get_codebooks($pid);
  $rows = array();
  $header = array(t('Title'), t('Edit Codebook'));
  foreach ($cbs as $cb) {
    $text_link = array(
      '#type' => 'submit',
      '#value' => t('Edit Codebook'),
      '#attributes' => array("cbid"=>$cb->id, "class"=>array('codebook-edit')),
    );

    $row = array(
      array('data' => $cb->label),
      array('data' => $text_link),
    );
    $rows[] = $row;
  }
  $table_attributes = array();
  if (!empty($rows)) {
    $output .= theme('table', array('header'=>$header, 'rows'=>$rows, 'attributes'=>$table_attributes));
  }
  else {
    $output = '';
    // No codebook table if no codebooks
  }
  $output .= '<script>
jQuery(document).ready(function() {
  jQuery("input.codebook-edit").click(function() {
    id = jQuery(this).attr("cbid");
    Shadowbox.open({
        content:    Drupal.settings.basePath + "sidora/edit_metadata/"+id+"",
        player:     "iframe",
        title:      "Edit Metadata",
        options: {
          onFinish:  function() {}
        }
    });
  });
});
</script>';
  return $output;
}

/*
 * Returns HTML that is a table containing the parents with removal links (if more than one parent) or
 * HTML indicating it is an orphan.
 */
function sidora_get_parent_table($pid, $only_basic_table_and_direct_removal_call = FALSE, $include_pid_column = FALSE, $ps_migration_buttons = FALSE) {
  module_load_include('inc', 'sidora', 'includes/utils');
  $output = '';
  if (empty($only_basic_table_and_direct_removal_call)) {
    $output = t('Parents');
  }
  $object = sidora_obj($pid);
  if (empty($object)) {
    return '';
  }
  $parents = sidora_get_parent_concepts($object);

  $header = array(t('Title'), t('Type'));
  if ($include_pid_column) {
    $header[] = t('PID');
  }
  if (sizeof($parents) > 1) {
    $header[] = t('Remove');
  }
  $unassociate_location = $GLOBALS['base_url'].'/sidora/ajax_parts/unassociate/';
  $unassociate_with_note_location = $GLOBALS['base_url'].'/sidora/ajax_parts/unassociate_with_note/';
  $administering_pid = sidora_get_owning_parent_concept_pid_by_administered_pid($pid);
  if (empty($administering_pid) && !$only_basic_table_and_direct_removal_call) {
    $output .= "<br>" . t("None of this object's parents have been selected as the administration parent.");
  }
  foreach ($parents as $parent) {
    $text_link = array(
      '#type' => 'submit',
      '#value' => t('Remove Link'),
      '#attributes' => array("directlink"=>$pid . '-' . $parent['pid'], "ppid"=>$parent['pid'], "class"=>array('parent-removal')),
    );
    $sidora_data = sidora_get_form_and_dsid($parent['pid']);
    $form_name = $sidora_data['form_name'];
    $concept_type = $form_name;
    if ($sidora_data['ontology_id'] != '') {
      $concept_type = sidora_get_concept_type($sidora_data['ontology_id']);
    }
    if (!$concept_type) $concept_type = $form_name;
    $row = array(
      array('data' => $parent['label'], 'ppid' => $parent['pid']),
      array('data' => $concept_type),
    );
    if ($include_pid_column) {
      $row[] = array('data' => $parent['pid']);
    }
    if (sizeof($parents) > 1) {
      if ($parent['pid'] == $administering_pid) {
       $row[] = array('data' => t('Administering parent'));
      }
      else {
        if ($ps_migration_buttons) {
          $remove_with_restore = array(
            '#type' => 'submit',
            '#value' => t('Remove with note:'),
            '#attributes' => array("directlink"=>$pid . '-' . $parent['pid'], "ppid"=>$parent['pid'], "use-note"=>'1', "class"=>array('parent-removal')),
          );
          $row[] = array(
            'data' => drupal_render($text_link).drupal_render($remove_with_restore).'<input type="text" name="123restore" value="Restore">',
            'class' => array('migration-button'),
          );
        }
        else {
          $row[] = array('data' => drupal_render($text_link));
        }
      }
    }
    $rows[] = $row;
  }
  $table_attributes = array('id' => 'sidora_exhibit_projects_table');
  if (!empty($rows)) {
    $output .= theme('table', array('header'=>$header, 'rows'=>$rows, 'attributes'=>$table_attributes));
  }
  else {
    $output .= '<div>'.t('This is an orphan.').'</div>';
  }
  if ($ps_migration_buttons) {
    $trailRows = array();
    $current_pids_path = array();
    $current_path = array();
    $sobj = sidora_obj($pid);
    $paths = sidora_get_crumbtrails($pid, $sobj->label, $current_path, $current_pids_path);
    $rows = array();
    foreach($paths as $path) {
      $to_print = ($path);
      $trail = "";
      $preTrail = "";
      foreach($to_print as $entry) {
        if (!empty($preTrail)){
          $trail .= '<br>';
        }
        $trail .= $preTrail . json_encode($entry);
        $preTrail .= "&nbsp;&nbsp;";
      }
      $trailRows[] = array(array('data' => ($trail)));
    }
    $output .= theme('table', array('header'=>array("Crumbtrails"), 'rows'=>$trailRows, 'attributes'=>$table_attributes));
  }
  if ($only_basic_table_and_direct_removal_call) {
    $output .= '<script>jQuery(document).ready(function() {
  jQuery("input.parent-removal").click(function() {
    var directLink = jQuery(this).attr("directlink");
    var ppid = jQuery(this).attr("ppid");
    var pid = "'.$pid.'";
    var url = "'.$unassociate_location.'"+ ppid + "/" + pid;
    if (jQuery(this).attr("use-note") == 1) {
      var note = jQuery(this).parent().find("[type=\'text\']").val();
      var url = "'.$unassociate_with_note_location.'"+ ppid + "/" + pid + "/" + encodeURIComponent(note);
    }
    var clicked = jQuery("input[directlink=\'"+directLink+"\']");
    var cp = clicked.parent();
    cp.children().remove();
    cp.append("<div>Removing...</div>");
    jQuery.ajax({
      "url" : url
    }).done(
      function(data) {
        if (typeof(data) == "string") data = jQuery.parseJSON(data);
        if (data.error) {
          cp.children().remove();
          cp.append("<div>Problem removing: "+data.description+"</div>");
        }
        else {
          cp.children().remove();
          if (typeof(data.note) != "undefined") {
            cp.append("<div style=\"background: rgba(111,222,111,0.5);\">Removed, note characters written:" + data.note + "</div>");
          }
          else {
            cp.append("<div style=\"background: rgba(111,222,111,0.5);\">Removed</div>");
          }
        }
      }
    );
  });
});
// Next sourceURL line makes it easier to debug when using Chrome
//# sourceURL=dynamic_for_' . $pid . '.js
 </script>';
  }
  else {
    $output .= '<script>jQuery(document).ready(function() {
  jQuery("input.parent-removal").click(function() {
    var ppid = jQuery(this).attr("ppid");
    var pid = "'.$pid.'";
    var clicked = jQuery("input[ppid=\'"+ppid+"\']");
    var cp = clicked.parent();
    cp.children().remove();
    var url = "'.$unassociate_location.'"  + ppid + "/" + pid;
    cp.append("<div pid=\"' . $pid . '\" url=\""+url+"\">Removing...</div>");
    if (typeof(sidora) == "undefined") {
      sidora = window.parent.sidora;
    }
    sidora.queue.RequestPost("Remove parent "+ppid+" from "+pid, url, "",
      function(data) {
        if (typeof(data) == "string") data = jQuery.parseJSON(data);
        if (data.error) {
          cp.children().remove();
          cp.append("<div>Problem removing: "+data.description+"</div>");
        }
        else {
          // When I unassociate from the currently selected folder, reload the resources table,
          if (ppid == sidora.concept.GetPid()) {
            sidora.concept.LoadContentHelp.FullTableReload(ppid);
            sidora.concept.LoadContentHelp.Relationships();
          }
          else {
            // otherwise reload the tree? TBD
            sidora.util.RefreshTree();
            sidora.resources.individualPanel.LoadRelationships();
          }
        }
        window.lastArgs = arguments;
        jQuery("[url=\'" + this.url + "\']").text("Successfully removed");
      },
      function() {},[pid,ppid]
    );
    sidora.queue.Next();

  });
});</script>';
  }
  return $output;
}

/*
 * Viewer for pdfjs (reroute to file that houses the html & js with the proper download link
 */
function sidora_get_html_pdfjs($pid, $dsid = 'OBJ', $version = '0') {
 drupal_goto(variable_get('sidora_pdf_js_location','').'?file='.sidora_get_direct_download_url($pid, $dsid, $version));
}


/*
 * If we want the user to be able to directly access the content, use this URL
 */
function sidora_get_direct_download_url($pid, $dsid, $version = '0') {
 global $base_url;
  return $base_url . '/sidora/version_info/' . $pid . '/' . $dsid . '/' . $version . '/download';
}

/*
 * Creates a codebook in the Fedora repo and returns the Fedora object
 */
function sidora_create_codebook_from_url($url, $codebook_label, $header_amount = 0) {
  global $user;
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/ingest.form');
  try
  {
    $tuque = islandora_get_tuque_connection();
    $codebook = $tuque->repository->constructObject(islandora_get_namespace('si:root'));
   }catch(Exception $e) {
     return t('The Fedora repository server is currently unavailable. Please contact the site administrator %email',
       array('%email' => (variable_get('site_admin_email_to', '') != ''?' at ' . variable_get('site_admin_email_to'):''))
    );
  }
  $codebook->owner = $user->name;
  $codebook->label = $codebook_label;
  $codebook->models = 'si:codebookCModel';
  $datastream_id = 'DDI';
  $new_datastream = $codebook->constructDatastream($datastream_id);
  $new_datastream->label = 'DDI Record';
  $new_datastream->mimetype = 'text/xml';
  $new_datastream->setContentFromUrl($url);
  $codebook->ingestDatastream($new_datastream);

  // XACML
  $xacml_ds = $codebook->constructDatastream('POLICY');
  $xacml_ds->label = 'XACML Policy Stream';
  $xacml_ds->mimetype = 'text/xml';
  $xacml_ds->setContentFromString(sidora_create_default_xacml());
  $codebook->ingestDatastream($xacml_ds);

  // SIDORA
  $sidora_ds_content = '<sidora>
<model>si:codebookCModel</model>
<form>Codebook 2015</form>
<ontology_location_id/>
<meta_requirements_fulfilled>TRUE</meta_requirements_fulfilled>
<initial_dsid>DDI</initial_dsid>
<num_header_rows>'.intval($header_amount).'</num_header_rows>
</sidora>';
  $sidora_ds = $codebook->constructDatastream('SIDORA');
  $sidora_ds->label = 'SIDORA';
  $sidora_ds->mimetype = 'text/xml';
  $sidora_ds->setContentFromString($sidora_ds_content);
  $codebook->ingestDatastream($sidora_ds);

  $new_fedora_object = islandora_add_object($codebook);
  return $new_fedora_object;
}

/**
 * Filter watchdog log entry. Works similar to hook_node_access().
 *
 * Implements hook_watchdog_filtering
 *
 * Requires the watchdog_filtering module to be installed/enabled
 * @param array $log_entry
 *   The watchdog log entry
 */
function sidora_watchdog_filtering(array $log_entry) {
  $message = $log_entry['message'];
  if (strpos($message, "LAME encoding failed for object") === 0) {
    return WATCHDOG_FILTERING_EXCLUDE;
  }
  elseif (strpos($message, 'XSLTProcessor::importStylesheet(): xsl:version: only 1.0 features are supported in ') !== FALSE) {
    return WATCHDOG_FILTERING_EXCLUDE;
  }
  elseif (strpos($message, 'XSLTProcessor::importStylesheet(): compilation error') !== FALSE) {
    return WATCHDOG_FILTERING_EXCLUDE;
  }
  elseif (strpos($message, 'Undefined index: callback in <em class="placeholder">securepages_match_form()</em> (line <em class="placeholder">369</em> of') !== FALSE) {
    return WATCHDOG_FILTERING_EXCLUDE;
  }
  // Don't affect filtering on other messages.
  return WATCHDOG_FILTERING_IGNORE;
}

/**
 * Do not refresh the timer for the thumbnail callbacks or the locking
 *
 * Implements hook_autologout_prevent
 */
function sidora_autologout_prevent() {
  if (sidora_startsWith(request_path(), 'sidora/ajax_parts/lock')) {
    return TRUE;
  }
  if (sidora_startsWith(request_path(), 'sidora/info') && sidora_endsWith(request_path(),'meta/TN/browser')) {
    return TRUE;
  }

}

function sidora_check_user_projects() {
  $users = entity_load('user');
  $header = array(array('data' => 'username', 'width' => '30%'),array('data' => 'islandora_pid', 'width' => '20%'),'label');
  $rows_proper_users = array();
  $rows_users_without_pids = array();
  $rows_users_with_invalid_pids = array();
  $rows_overused_pids = array();
  $rows_unused_pids = array();
  $rows_research_spaces = array();
  $in_use_pids = array();
  $overused_pids = array();
  foreach ($users as $account) {
    if (is_array($account->data) && array_key_exists('islandora_user_pid',$account->data)) {
      $pid = $account->data['islandora_user_pid'];
      $obj = sidora_obj($pid);
      if (empty($obj)) {
        $rows_users_with_invalid_pids[] = array(l($account->name, 'user/' . $account->uid),$pid,'');
      }
      else {
        $rows_proper_users[] = array(l($account->name, 'user/' . $account->uid),$pid,$obj->label);
      }
      if (empty($in_use_pids[$pid])) {
        $in_use_pids[$pid] = array(l($account->name, 'user/' . $account->uid));
      }
      else {
        $in_use_pids[$pid][] = l($account->name, 'user/' . $account->uid);
        if (empty($obj)) {
          $overused_pids[$pid] = '<div class="messages warning">' . t('Invalid object') . '</div>';
        }
        else {
          $overused_pids[$pid] = $obj->label;
        }
      }
    }
    else {
      if (!empty($account->uid)) {
        $rows_users_without_pids[] = array(l($account->name, 'user/' . $account->uid),t('No Pid assigned'),'');
      }
    }
  }
  foreach ($overused_pids as $pid => $label) {
      $rows_overused_pids[] = array(implode($in_use_pids[$pid], ', '),$pid,$label);
  }

  $cr = _sidora_get_child_results_cache('si:user-projects');
  foreach ($cr as $child) {
    $pid = $child['o']['value'];
    if (empty($in_use_pids[$pid])) {
      module_load_include('inc', 'sidora', 'includes/project_spaces');
      if (sidora_is_project_space($pid)) {
        $rows_research_spaces[] =  array('Research Space', $pid , $child['t']['value']);
      }
      else {
        $rows_unused_pids[] =  array('No User Found', $pid , $child['t']['value']);
      }
    }
  }
  $to_return = t('Configured Users') . theme('table',array('header' => $header, 'rows' => $rows_proper_users));
  $to_return .= t('Users without Pids') . theme('table',array('header' => $header, 'rows' => $rows_users_without_pids));
  $to_return .= t('Users with Invalid Pids') . theme('table',array('header' => $header, 'rows' => $rows_users_with_invalid_pids));
  $to_return .= t('Overused Pids') . theme('table',array('header' => $header, 'rows' => $rows_overused_pids));
  $to_return .= t('Unused Pids in si:user-projects') . theme('table',array('header' => $header, 'rows' => $rows_unused_pids));
  $to_return .= t('Research Spaces si:user-projects') . theme('table',array('header' => $header, 'rows' => $rows_research_spaces));
  return $to_return;
}
function sidora_get_crumbtrails($pid, $label, $current_path, $current_pids_path) {
  $current_path[] = array($pid, $label);
  $current_pids_path[] = $pid;
  // if this is si:root then we're done, return the path
  if ($pid == 'si:root') {
    return array($current_path);
  }
  // if this is not si:root, check if it has parents
  module_load_include('inc', 'sidora', 'includes/utils');
  $parents = sidora_get_parent_concepts_by_pid($pid);
  if (sizeof($parents) == 0) {
    // Dead end, go ahead and return what you've got
    return array($current_path);
  }
  // return as many arrays as parents
  $to_return = array();
  foreach ($parents as $parent_pid => $parent) {
    $plabel = $parent['label'];
    // if the parent is already used, then return that it's a cycle:
    if (in_array($parent_pid, $current_pids_path)) {
      $copy_path = $current_path;
      $copy_path[] = array($parent_pid, "CYCLE FOR:" . $plabel);
      $to_return[] = $copy_path;
    }
    else {
      // get this parent's paths to si:root
      $ppaths = sidora_get_crumbtrails($parent_pid, $plabel, $current_path, $current_pids_path);
      foreach($ppaths as $pipath) {
        $to_return[] = $pipath;
      }
    }
  }
  return $to_return;
}
/**
 * Used only for testing purposes.  Should not be called by the main application
 */
function sidora_testing($one = 'one', $two = 'two', $parent_pid = 'si:root', $extra = '') {
  // This begins the sidora_testing function.  dsm is used in sidora_testing often and should be allowed to remain there
  if (!sidora_is_admin() && variable_get('sidora_allow_all_to_debug','') != "ALL") {
    return t("You must be an administrator or have an administrator set sidora_allow_all_to_debug in order to access this information");
  }
  if (!sidora_is_admin()) print t("Remember that nonadmins will NOT see output from dsm!");
  if ($one == 'put_in_rs'){
    $pid = $two;
    module_load_include('inc', 'sidora', 'includes/project_spaces');
    sidora_put_into_proper_project_space($pid);
    return 'complete';
  }
  if ($one == 'memory'){
    return "" . (sidora_get_available_memory());
  }
  if ($one == 'check_nodes_in_fedora'){
    $checker = sidora_check_nodes_in_fedora();
    dpm($checker);
    return 'ding';
  }
  if ($one == 'get_between_timestamps'){
    $cns = sidora_get_concept_nodes_between_timestamps($two, $parent_pid);
    dpm($cns);
    return 'timestamp checks:' . $two . ' to ' . $parent_pid;
  }
  if ($one == 'node_dump') {
    $node = node_load($two);
    var_dump($node);
    exit();
  }
  if ($one == 'crumbtrail') {
    print "CT start<br>";
    $pid = $two;
    $current_path = array();
    $current_pids_path = array();
    $paths = sidora_get_crumbtrails($pid, "origin", $current_path, $current_pids_path);
    foreach($paths as $path) {
      print "<br>";
      $to_print = array_reverse($path);
      foreach($to_print as $entry) {
        if ($entry != 'si:root') {
          print ' - ';
        }
        print json_encode($entry);
      }
    }
    exit();
  }
  if ($one == 'clearcache') {
    if ($two == 'all') {
      sidora_clear_entire_tree_cache();
    }
    else {
      sidora_clear_tree_cache($two);
    }
    $to_return = sidora_html_tree_for_ajax();
    return "cleared $two".$to_return;
  }
  if ($one == 'session') {
    dsm("use session/clear to clear session");
    dsm($_SESSION);
    if ($two == 'clear') {
      $_SESSION = array();
    }
    return 'session';
  }
  if ($one == 'administeredByCrumbtrail') {

  }
  //This ends the testing function and should also indicate the end of liberal use of the dsm function
}
function sidora_short_admin_by_tree($pid) {
  $object_values_build = ' <info:fedora/' . $pid . '>';
  $query = 'select ?object ?adminBy ?adminByT ?adminByT2 ?adminT3 ?title ?titleT ?titleT2 ?titleT3 from <#ri> where {
    ?object <http://oris.si.edu/2017/01/relations#isAdministeredBy> ?adminBy .
               ?adminBy <info:fedora/fedora-system:def/model#label> ?title .
    OPTIONAL { ?adminBy <http://oris.si.edu/2017/01/relations#isAdministeredBy>  ?adminByT .
               ?adminByT <info:fedora/fedora-system:def/model#label> ?titleT .
      OPTIONAL { ?adminByT <http://oris.si.edu/2017/01/relations#isAdministeredBy>  ?adminByT2 .
                 ?adminByT2 <info:fedora/fedora-system:def/model#label> ?titleT2 .
        OPTIONAL { ?adminByT2 <http://oris.si.edu/2017/01/relations#isAdministeredBy>  ?adminByT3 .
                   ?adminByT3 <info:fedora/fedora-system:def/model#label> ?titleT3 .
        }
      }
    }
    VALUES ?object { ' . $object_values_build . '}
  }';
  $results = sidora_direct_query($query);
  $return = "This object does not have an administering parent";
  $start = "";
  $end = "";
  foreach($results as $result) {
    $return = "";
    $start .= "<ul><li pid='".$result['adminBy']['value']."'>";
    $start .=  $result['title']['value'];
    $start .=  '</li>';
    if (!empty($result['adminByT']['value'])) {
      $start =  "<ul><li pid='".$result['adminByT']['value']."'>" . $result['titleT']['value'] . "</li>" . $start;
      if (!empty($result['adminByT2']['value'])) {
        $start = "<ul><li pid='".$result['adminByT2']['value']."'>" . $result['titleT2']['value'] . "</li>" . $start;
        if (!empty($result['adminByT3']['value'])) {
          $start = "<ul><li pid='".$result['adminByT3']['value']."'>" . $result['titleT3']['value'] . "</li>" . $start;
          $end .= '</ul>';
        }
        $end .= '</ul>';
      }
      $end .= '</ul>';
    }
    $end .= '</ul>';
    $return = $start . $end;
  }
  return $return;
}
function sidora_direct_query($query) {
  $tuque = islandora_get_tuque_connection();
  $results = NULL;
  if ($tuque) {
    try{
      $ri = $tuque->repository->ri;
      $results = $ri->sparqlQuery($query);
      //var_dump($results);
    }catch(Exception $e){
      var_dump($e);
    }
  }
  else {
   print 'no tuque';
  }
  return $results;
}
function sidora_flatten_tree($branch, &$rows,$visibility_settings,$path) {
  if (isset($branch) && sizeof($branch) && !empty($branch)) {
    $resource_visibility_settings = array('show_name','show_meta','show_preview','allow_download','show_degraded');
    $concept_visibility_settings = array('show_name','show_meta','future_children_show_name','future_children_show_meta','future_children_show_preview','future_children_allow_download','future_children_show_degraded');
    foreach ($branch as $child_array) {
      if (sizeof($child_array)) {
        //print_r($child_array);
        $tree_depth = substr_count($path,'/');
        if ($path == '') {
          $array_index = $child_array['pid'];
        }else{
          $array_index = $path;
        }
        if ($tree_depth > 0) $array_index = $path.$child_array['pid'];
                $rows[$array_index] = array(
           'pid' => $child_array['pid'],
           'type' => $child_array['type'],
                 'label' => $child_array['label'],
                 'model' => $child_array['model']);
        foreach ($visibility_settings as $setting => $name) {
          if (($child_array['type'] == 'Concept') && (in_array($setting,$concept_visibility_settings))) {
            $visibility_value = (isset($child_array[$setting]))?($child_array[$setting]):'';
            $rows[$array_index][$setting] = $visibility_value;
          }
          if (($child_array['type'] == 'Resource') && (in_array($setting,$resource_visibility_settings))) {
            $visibility_value = (isset($child_array[$setting]))?($child_array[$setting]):'';
            $rows[$array_index][$setting] = $visibility_value;
          }
        }
      }
      if ((isset($child_array['children'])) && (sizeof($child_array['children']) > 0)) {
        sidora_flatten_tree($child_array['children'],$rows,$visibility_settings,$array_index.'/');
      }
    }
  }
}

/*
 * Show the form to create a concept
 */
function sidora_create_concept($parent_pid = 'si:root', $model = 'si:collectionCModel', $form_name='', $ontology_id = '') {
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_metadata_screens.css',array('weight' => '1000000', 'group' => CSS_THEME));
  global $user;
  // if the parent pid is locked, can't do it
  if (!sidora_obtain_lock($parent_pid)) {
    $to_return = '';
    $to_return .= t('The parent of this folder is currently locked by another user');
    return $to_return;
  }
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/ingest.form');
  if (!sidora_allow($user, $parent_pid, 'create')) {
    $to_return = t('This user does not have permission to create children of the selected folder. The option to create should not have been visible. Error #: scc1');
    return $to_return;
  }
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_util.js',array('weight' => '1000000', 'group' => JS_THEME));
  try
  {
    $tuque = islandora_get_tuque_connection();
    $page = $tuque->repository->constructObject(islandora_get_namespace('si:root'));
  }catch(Exception $e) {
    return t('The Fedora repository server is currently unavailable. Please contact the site administrator %email',
      array('%email' => (variable_get('site_admin_email_to', '') != ''?' at ' . variable_get('site_admin_email_to'):''))
    );
  }
  $page->owner = $user->name;
  $page->label = 'New Folder';
  // Label of object if no label gets put into place
  $page->models = 'si:collectionCModel';
  drupal_static('parent_collection_pid', $parent_pid);
  drupal_static('form_of_interest', $form_name);
  $form = drupal_get_form('islandora_ingest_form', array(
    'models' => array($model),
    'objects' => array($page),
    'parent' => $parent_pid,
    // 'si:root',//$object->id,
    ));
  $id_to_creation_info = cache_get("sidora:form_id_to_creation_info");
  if (empty($id_to_creation_info)) {
    $id_to_creation_info = array();
  }
  else {
    $id_to_creation_info = $id_to_creation_info->data;
  }
  $creation_info = array();
  $creation_info['model'] = $model;
  $creation_info['form'] = $form_name;
  $creation_info['ontology_id'] = $ontology_id;
  $id_to_creation_info[$form['#build_id']] = $creation_info;
  cache_set("sidora:form_id_to_creation_info",$id_to_creation_info);
  $to_return = drupal_render($form);
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_metadata_screens.css',array('weight' => '1000000', 'group' => CSS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_metadata_screens.js',array('weight' => '1000000', 'group' => JS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/drupal_ajax_fix.js',array('weight' => '1000000', 'group' => JS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_util.js',array('weight' => '1000000', 'group' => JS_THEME));
  sidora_clear_tree_cache($parent_pid);
  return $to_return;
}

/**
 * Implementation of hook_form_alter
 * We want to remove "required" fields, but also know when user's didn't enter info in the field
 * TBD / TODO: Create a system that will track if users entered info in the field
 *
 * Add a link to tell Admin there is a request for an account
 */
function sidora_form_alter(&$form, &$form_state, $form_id) {
  sidora_login_form_alter($form, $form_state, $form_id);
  drupal_add_http_header(
    'Pragma',
    'no-Cache',
    FALSE
  );
  drupal_add_http_header(
    'Cache-Control',
    'no-store, no-cache, must-revalidate, post-check=0, pre-check=0',
    FALSE
  );
  if ($form_id == 'sidora_concept_node_form') {
    if (!sidora_is_admin()){
      foreach($form as $form_element_id=>$form_element) {
        if (!sidora_startsWith($form_element_id, "#")){
          unset($form[$form_element_id]);
        }
      }
      $form['info'] = array("#markup" => t("Special permission is required to edit this information"));
    }
  }
  if (($form_id == 'islandora_revert_datastream_version_form') || ($form_id == 'islandora_delete_datastream_version_form')) {
    unset($form['actions']['cancel']['#href']);
    $form['actions']['cancel']['#href'] = '';
    $form['actions']['cancel']['#id'] = 'cancel';
    if ($form_id == 'islandora_revert_datastream_version_form') {
      $form['#submit'][] = 'sidora_revert_datastream_form_submit';
    }
    else {
      $form['#submit'][] = 'sidora_delete_datastream_form_submit';
    }
    $form['#attached']['css'] = array(
     array(
     'data' => base_path() . drupal_get_path('module', 'sidora') . '/css/workbench_create_resource.css',
     'type' => 'external',
     ),
     array(
      'data' => '#edit-submit { display:inline-block;
    }',
      'type' => 'inline',
     ),
    );
    $form['#attached']['js'] = array(
       array(
       'data' => 'jQuery(function() { var title = jQuery(".page-title"); jQuery("#edit-actions").parent("div").prepend(title); jQuery("#cancel").click(function() {
         window.parent.jQuery("#versionHistoryDialog").dialog("close");});})',
       'type' => 'inline',
       ),
     );
  }
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  module_load_include('inc', 'islandora','includes/ingest.form');
  if (!array_key_exists('#submit', $form)) $form['#submit'] = array();
  array_unshift($form['#submit'], 'sidora_form_submit_alter');
  $association = NULL;
  if ($form_id == 'xml_form_builder_ingest_form' || $form_id == 'islandora_ingest_form' || $form_id == 'xml_form_builder_datastream_form_metadata_form') {
    if (array_key_exists('form_build_id', $_POST)) {
      $submitted_form_id = $_POST['form_build_id'];
      $association = sidora_find_association($form_state, $submitted_form_id);
      if (!empty($association)) {
        $association_step_storage = &islandora_ingest_form_get_step_storage($form_state, 'xml_form_builder_metadata_step');
        // Make $association_step_storage have only the association you want to use.
        $association_step_storage['association'] = $association;
      }
    }
    remove_validation_for_this_and_children($form);
    $form['all_meta_entered'] = array(
      '#name' => 'all_meta_entered',
      '#type' => 'hidden',
      '#title' => 'All metadata entered',
      '#description' => '',
      '#required' => false,
    );
    if ((isset($form['#action']) && (strpos($form['#action'],'metabulk') !== false)) || (isset($form_state['batch']))) {
      unset($form['#submit']);
      $form['#submit'][] = 'sidora_process_batch_submit';
      unset($form['next']['#submit']);
      $form['next']['#submit'][] = 'sidora_process_batch_submit';
      if (isset($form['hidden_next'])) {
        unset($form['hidden_next']['#submit']);
        $form['hidden_next']['#submit'][] = 'sidora_process_batch_submit';
      }
      if (isset($form['#action']) && (strpos($form['#action'],'metabulk') !== false)) {
        $form['#action'] = substr($form['#action'],0,strpos($form['#action'],'//metabulk'));
      }
     $form_state['batch'] = array(
         '#name' => 'batch',
         '#type' => 'hidden',
         '#title' => 'Apply batch',
         '#description' => '',
         '#required' => false,
         '#value' => 'batch',
      );
    }
  }
  switch ($form_id) {
    case 'user_login':
    case 'user_login_block':
      /*
      $form['link'] = array('#markup' => 'Not a member?'.l(t(' To request an account click here.'),'mailto:'.variable_get('site_mail', '').'?Subject=Request SIdora Account&body=My name is:-Enter Name- and my Email is:-Enter Email- and I would like to request a new SIdora Account').
      '<script>jQuery(".page-title").html("Welcome to the SIdora Workbench");jQuery("body").append(\'<div style="padding:20px">'.l(t('Can\'t access your account?'),'mailto:'.variable_get('site_mail', '').
      '?Subject=SIdora Account Help&body=My name is:-Enter Name- and my Email is:-Enter Email- and I am requesting help with my SIdora Account.  -Enter more information that indicates the kind of assistance you would like-').'</div>\');</script>');
      */
      $form['link'] = array('#markup' => 'Not a member?'.l(t(' To request an account click here.'),'sidora/request_account').
      '<script>jQuery(".page-title").html("Welcome to the SIdora Workbench");jQuery("body").append(\'<div style="padding:20px">'.l(t('Can\'t access your account?'),'mailto:'.variable_get('site_mail', '').
      '?Subject=SIdora Account Help&body=My name is:-Enter Name- and my Email is:-Enter Email- and I am requesting help with my SIdora Account.  -Enter more information that indicates the kind of assistance you would like-').'</div>\');</script>');
      $form['login_message'] = array('#markup' => ''.variable_get('sidora_login_message', '').'');
      break;
  }
}

function sidora_process_batch_submit($form,&$form_state) {
  global $user,$base_url;
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  module_load_include('inc', 'sidora', 'includes/utils');
  $form_build_id = $form['#build_id'];
  $id_to_creation_info = cache_get("sidora:form_id_to_creation_info");
  $id_to_creation_info = $id_to_creation_info->data;
  $id_to_filename_info = cache_get("sidora:form_id_to_filename");
  $id_to_filename_info = $id_to_filename_info->data;
  $creation_info = $id_to_creation_info[$form_build_id];
  $batch_id = $id_to_filename_info[$form_build_id]['filename'];
  $step_storage = $form_state['islandora']['step_storage']['xml_form_builder_metadata_step'];
  $association = $step_storage['association'];
  if (is_array($association['title_field'])) {
    $parent_array = $form;
    $xml_association = $association;
    for ($ctr=0;$ctr<sizeof($association['title_field']);$ctr++) {
      $title_field = sidora_get_nested_title_field(array($association['title_field'][$ctr]),$parent_array);
      if (isset($title_field['#actions']) && isset($title_field['#actions']['create'])) {
        if (isset($title_field['#actions']['create']['value']) && ($title_field['#actions']['create']['value'] != '')) {
    $xml_association['title_field'][$ctr] = $title_field['#actions']['create']['value'];
  }
      }
      $parent_array = $title_field;
     }
     $association = $xml_association;
   }
   $run_transforms = !variable_get('xml_form_builder_use_default_dc_xslts', FALSE);
  // generate the xml with the form metadata
  $xml_form = new XMLForm($form_state);
  $document = $xml_form->submit($form, $form_state);
  $document = $document->document;
  if (isset($association['self_transform']) && $association['self_transform'] != 'No Transform' && $run_transforms) {
    $document = xml_form_builder_transform_metadata_datastream($document, $association['self_transform']);
    $document->preserveWhiteSpace = TRUE;
    $document->formatOutput = TRUE;
  }
  $batch_xml = trim($document->saveXML());
  file_put_contents('public://' . 'batch_' . $batch_id . '.xml', $batch_xml);
  if ($run_transforms) {
    $transform = xml_form_builder_get_transform_file($association['transform']);
    if ($transform != '') {
      if (strpos($transform,'sidora_specific') !== false) {
        $association['transform'] = str_replace('https://','http://',$base_url . "/sites/all/modules/sidora_specific/transforms/" . pathinfo($transform,PATHINFO_BASENAME));
      }
      else {
        $association['transform'] = str_replace('https://','http://',file_create_url($transform));
      }
    }
  }
  if (sidora_create_association_xml($batch_id,$association)) {
    // generate the sidora datastream xml
    $all_meta_entered = filter_input(INPUT_POST, 'all_meta_entered', FILTER_SANITIZE_URL);
    if ($all_meta_entered != 'TRUE') $all_meta_entered = 'FALSE';
    $sidora_xml = '<sidora>
<model>'.$creation_info['model'].'</model>
<form>'.$creation_info['form'].'</form>
<ontology_location_id>'.$creation_info['ontology_id'].'</ontology_location_id>
<meta_requirements_fulfilled>'.$all_meta_entered.'</meta_requirements_fulfilled>
<initial_dsid>'.$association['dsid'].'</initial_dsid>
<parent>'.$creation_info['parent'].'</parent>
</sidora>';
    file_put_contents('public://' . 'sidora_' . $batch_id . '.xml',$sidora_xml);
    $post_params = array(
     'resourceFileList' => str_replace('https://','http://',file_create_url('public://' . '/files_' . $batch_id . '.xml')),
     'ds_metadata' => str_replace('https://','http://',file_create_url('public://' . '/batch_' . $batch_id . '.xml')),
     'ds_sidora' => str_replace('https://','http://',file_create_url('public://' . '/sidora_' . $batch_id . '.xml')),
     'resourceOwner' => $user->name,
     'association' => str_replace('https://','http://',file_create_url('public://' . '/association_' . $batch_id . '.xml'))
    );
    $get_params = '';
    if ($association['content_model'] == 'si:datasetCModel') {
      $get_params = '?codebookPID=' . $user->data['recent_codebook_id'];
     }
     $batch_url = variable_get('sidora_batch_ingest_url', '') . '/' . $id_to_creation_info[$form_build_id]['parent'] . $get_params;
     watchdog('Sidora_debug',t("Sending Bulk metadata Curl to:<br/> %curl_url",
                array('%curl_url' => $batch_url))
                );
     $ingest_response = sidora_ingest_request($batch_url,$post_params);
        // save the curl request id to session along with the parent concept
     if (strpos($ingest_response,'</CorrelationID>') !== false) {
       $doc = new DOMDocument();
       $doc->loadXML($ingest_response);
       $parent_pid_from_response = $doc->getElementsByTagName('ParentPID')->item(0)->nodeValue;
       if ((!empty($parent_pid_from_response)) && ($parent_pid_from_response == $id_to_creation_info[$form_build_id]['parent'])) {
         $request_id = (string)$doc->getElementsByTagName('CorrelationID')->item(0)->nodeValue;
         $session_key = 'sidora_batch_request_'.$batch_id;
         $_SESSION[$session_key] = array();
         $_SESSION[$session_key]['request_id'] = $request_id;
         $_SESSION[$session_key]['batch_id'] = $batch_id;
         $_SESSION[$session_key]['Parent'] = $id_to_creation_info[$form_build_id]['parent'];
         $update_query = db_update('sidora_batch_ingest')
         ->fields(array(
           'status' => 'corelation id received',
           'corelation_id' => $request_id,
         ))
         ->condition('batch_id', $batch_id, '=');
         $num_updated = $update_query->execute();
         $created = db_query("select DATE_FORMAT(Created,'%h:%i:%s') AS Created, count, resource_type from sidora_batch_ingest where batch_id = :batchid", array(':batchid' => $batch_id))->fetchAssoc();
         print json_encode(array('status' => 'Request for batch ingest successfully received','request_id' => $request_id,'batch_id' => $batch_id,'timestamp' => $created['Created'],'message' => $created['count'] . ' ' . $created['resource_type'] . ' resources'));
         drupal_exit();
      }
   }
 }

  watchdog('Sidora_debug',t("Bulk metadata Curl response trimmed :<br/> %curl_response",
                array('%curl_response' => substr($ingest_response,0,1024)))
                );
  print json_encode(array('status' => 'Error in submitting batch ingest request to the backend', 'message' => $ingest_response));
  drupal_exit();
}

/**
 * Helper to step through the entire form and remove actual validation, putting a red * in its place
 */
function remove_validation_for_this_and_children(&$item, $current_location = '') {
  if ($item != null && array_key_exists('#required', $item)) {
    if ($item['#required']) {
      if (empty($item['#title'])) $item['#title'] = '';
      $item['#title'] .= ' <span class="form-required" title="This field is required.">*</span>';
    }
  }
  $item['#required'] = FALSE;
  foreach ($item as $si_name => $subitem) {
    if (strpos($si_name, "#") === FALSE) {
      $next_location = '';
      if ($current_location == '') {
        $next_location = $si_name;
      }
      else {
        $next_location = $current_location.'['.$si_name.']';
      }
      $returned = remove_validation_for_this_and_children($subitem, $next_location);
      $item[$si_name] = $returned;
    }
  }
  return $item;
}

/*
 * Place holder to output information for debugging, standard hook_form_submit_alter
 */
function sidora_form_submit_alter($form, &$form_state) {
  // ('sidora_form_submit_alter');
}


/**
 * Show the form that the user chooses the codebook or to create a new codebook
 * returns the string of the HTML representation of the form to use
 */
function sidora_create_resource_codebook_creation_step() {
  global $user;
  $to_return = '';
  $form['tabular_codebook'] = array(
    '#id' => 'user_supplied_codebook_pid',
    '#name' => 'user_supplied_codebook_pid',
    '#type' => 'textfield',
    '#title' => 'Use Existing Tabular Data Codebook',
    '#description' => 'Type a codebook name to associate with the tabular dataset or use the button below to create a new codebook',
    '#required' => false,
    '#value' => empty($user->data['recent_codebook_id'])?'':$user->data['recent_codebook_id'],
    // Since this is not a normal drupal form / validate / submit, using #value instead of #default_value
    '#autocomplete_path' => 'sidora/codebook/autocomplete',
    '#maxlength' => 1024,
  );
  $form['new_tabular_codebook'] = array(
    '#id' => 'ntc',
    '#type' => 'markup',
    '#markup' => '<input id="create-new-codebook" value="Create and use new codebook" style="width:222px;" class="form-submit"><br/>',
  );
  $form['continue'] = array(
    '#id' => 'continue',
    '#type' => 'button',
    '#value' => 'Continue with listed codebook',
  );
  $to_return .= '<form id="codebook-form" method="post">';
  $to_return .= drupal_render($form);
  $to_return .= '</form>';
  return $to_return;
}


/**
 * Determine if any uploads have occurred in the session
 * returns the uploads themselves or FALSE
 */
function sidora_create_resource_get_current_uploads() {
  global $user;
  if (!array_key_exists('file_uploads', $_SESSION)) {
    $_SESSION['file_uploads'] = array();
    $_SESSION['file_uploads'][$user->uid] = array();
  }

  if (array_key_exists('file_uploads', $_SESSION) && !empty($_SESSION['file_uploads'])) {
    $fu = $_SESSION['file_uploads'];
    if (array_key_exists($user->uid, $fu)) {
      $current_uploads = $_SESSION['file_uploads'][$user->uid];
      if (!empty($current_uploads)) {
        return $current_uploads;
      }
    }
  }
  return FALSE;
}


/*
 * gives the proper upload form for the model selected
 * returns string of HTML
 */
function sidora_create_resource_get_upload_form_html($model, $form_name, $ontology_location, $upload_button_text = 'Browse', $clear_file_list = TRUE) {
  global $user;
  $to_return = '';
  $file_extensions = array(
    'si:imageCModel' => array('jpg', 'png', 'gif', 'tiff', 'tif', 'jp2', 'raw', 'nef', 'dng'),
    'si:generalImageCModel' => array('jpg', 'png', 'gif', 'tiff', 'tif', 'jp2', 'raw', 'nef', 'dng'),
    'si:datasetCModel' => array('csv', 'xlsx', 'xls'),
    'si:fieldbookCModel' => array('pdf'),
    'islandora:sp-audioCModel' => array('mp3','aiff','wav'),
    'islandora:sp_videoCModel' => array('ogg','mp4','mov','qt', 'm4a', 'm4v', 'avi', 'mkv'),
    'si:rawGeneSequenceCModel' => array('fastq','fq','fasta','fa','fas','fsn','fna','faa'),
    'si:assembledGeneSequenceCModel' => array('fastq','fq','fasta','fa','fas','fsn','fna','faa'),
    'si:massSpectrometryCModel' => array('*'),
    'si:genericCModel' => array('*'),
    '*' => array('*')
  );
  $elements = NULL;
  if (!empty($ontology_location)) {
    switch($ontology_location) {
      case 'DynamicText':
        $extensions_for_ontology_location = array('doc', 'docx');
        $elements = array(
          '#extensions' => $extensions_for_ontology_location
        );
      break;
    }
  }
  if (empty($elements)) {
    if (array_key_exists($model, $file_extensions)) {
      $extensions_for_model = $file_extensions[$model];
      $elements = array(
        '#extensions' => $extensions_for_model
      );
    }
  }
        if (!empty($elements)) {
    $to_return .= "<div id='create-resource-upload'>";
    $to_return .= "<div><ul>";
    //if ($elements['#extensions'][0] != '*') {
      $to_return .= '<li class="non-bulk">You can upload one or multiple files at a time</li>';
      $to_return .= '<li>';
      $to_return .= 'File types allowed: ' . implode($elements['#extensions'],', ');
      $to_return .= '</li>';
    //}
    //else {
    //  $to_return .= '<li>';
    //  $to_return .= 'Upload a single file of any type';
    //  $to_return .= '</li>';
    //}
    $to_return .= "</ul></div>";
    $to_return .= sidora_get_plupload_html($elements, $upload_button_text);
    $to_return .= '<div style="display:inline-block;position:relative">';
    $to_return .= "<input class=\"form-submit\" id=\"Next\" value=\"Add Individual Metadata\" onclick=\"jQuery('#create-resource-upload').hide(); location.reload();\" style='top:0px;position:absolute;'></input>";
    //if ($elements['#extensions'][0] != '*') {
      $to_return .= "<div style='position:absolute;left:230px;width:300px;'>";
      $to_return .= "<input class=\"form-submit\" id=\"applyBatch\" value=\"Add Same Metadata to All\" onclick=\"jQuery('#create-resource-upload').hide(); if (window.location.href.indexOf('metabulk') == -1) {window.location.href += '//metabulk';}\" style='margin-bottom:0px;width:200px;'></input>";
      $to_return .= '<div class="non-bulk" style="font-style: italic;font-size: 9px;font-weight: bold;">Metadata entered here will be applied to all resources listed.</div>';
      $to_return .= "</div>";
    //}
    // end button holder
    $to_return .= "</div>";
    // end create-resource-upload
    $to_return .= "</div>";
    if ($clear_file_list) {
      $_SESSION['file_uploads'][$user->uid] = array();
    }
  }
  return $to_return;
}


/*
 * Returns if a codebook is required for items of this type
 */
function sidora_is_create_resource_codebook_choice_required($model) {
  return ($model == 'si:datasetCModel');
}

/*
 * Resets the information for whether a user has selected a codebook in this session and information tied to that codebook
 */
function sidora_reset_codebook_choice($codebook_pid = NULL) {
  $_SESSION['codebook_choice'] = array();
  $_SESSION['codebook_choice']['sample_uploaded'] = FALSE;
  $_SESSION['codebook_choice']['edit_complete'] = FALSE;
  $_SESSION['codebook_choice']['codebook_id'] = $codebook_pid;
  $_SESSION['codebook_choice']['filepath'] = NULL;
  $_SESSION['codebook_choice']['upload_browser_already_shown'] = FALSE;
}

/*
 * Returns whether user still needs to make a choice about a codebook
 *
 * If the model does not require a codebook return false (codebook does not need to be chosen)
 * If the codebook was entered into the most recent post:
 *   save the codebook pid in the user's data for preload next time
 *   return false (codebook choice is complete)
 * else
 *   return true (codebook choice still needs to be made)
 *
 *
 */
function sidora_is_create_resource_codebook_choice_completed($model) {
  global $user;
  $ask_for_codebook = FALSE;
  if ($model == 'si:datasetCModel') {
    if (!empty($_SESSION['codebook_choice']['codebook_id'])) {
      $ask_for_codebook = FALSE;
    }
    elseif (empty($_POST['user_supplied_codebook_pid'])) {
      $ask_for_codebook = TRUE;
    }
    else {
      // if it's not a codebook, say so
      $codebook_pid = $_POST['user_supplied_codebook_pid'];
      $codebook_obj = sidora_obj($codebook_pid);
      if (empty($codebook_obj)) {
        drupal_set_message(t('Invalid codebook, please choose a different codebook.'), 'warning');
        watchdog('SIdora',t("Problem during codebook selection, user picked invalid codebook:").$codebook_pid);
        $ask_for_codebook = TRUE;
      }
      else {
        sidora_reset_codebook_choice($codebook_pid);
        $edit['data']['recent_codebook_id'] = $codebook_pid;
        // Choice for any time they log in
        user_save($user,$edit);
      }
    }
  }
  return $ask_for_codebook;
}

function sidora_is_displayable_within_display_params($filepath){
      // SIdora is going to need about 200MB to run
      // and the file needs to be loaded into memory to be downloaded
      // When there is large amounts of memory available, PHP seems to use too much?
        // We would like to use $free = shell_exec('free'); but exec is limited on production
      $available_for_file = sidora_get_available_memory() - 200000000;
      if ($available_for_file > 1000000000){
        $available_for_file /= 2;
      }
      // The resizer needs about an additional 30MB plus 2 times the size of file to run
      $available_for_resize = $available_for_file - 30000000 - (2 * filesize($filepath));
      if (!empty($_GET['info'])){
        print "Total memory: ";
        var_dump(sidora_get_available_memory());
        print "Available for file load: ";
        var_dump($available_for_file);
        print "File size::::::::::::::: ";
        var_dump(filesize($filepath));
        print "Available for resize:::: ";
        var_dump($available_for_resize);
        print "Can this be resized:";
        var_dump($available_for_resize >= filesize($filepath));
        print "Can this be shown:";
        var_dump(!($available_for_file < filesize($filepath)));
        module_load_include('inc', 'sidora', 'includes/utils');
        $vmt = sidora_get_viewable_mime_types();
        $mime_detect = new MimeDetect();
        $mimeType = $mime_detect->getMimeType($filepath);
        var_dump($filepath);
        var_dump($mimeType);
        drupal_exit();
      }
      $fs_fp = filesize($filepath);
      if (empty($fs_fp) || $available_for_file < filesize($filepath)) {
        return 0;
      }
      else if ($available_for_resize < filesize($filepath)){
        return 1;
      }
      else {
        return 2;
      }
  return 0;
}
/**
 * Use the filename to determine if this can be used once the graphics library converts it to jpg
 * returns TRUE or FALSE;
 */
function sidora_is_displayable_image_with_convert($filename) {
  $convertable_extensions = array('jpg','png','gif');
  return sidora_is_displayable_image($filename, $convertable_extensions);

}

/**
 * Use the filename to determine if this can be used as a src in an HTML image tag
 * returns TRUE or FALSE;
 */
function sidora_is_displayable_image($filename, $extensions = array()) {
  $filename = strtolower($filename);
  $can_be_shown_extensions = array('jpg','png','gif');
  if (!empty($extensions)) $can_be_shown_extensions = $extensions;
  $extension = '';
  if (strpos($filename,".") !== FALSE) {
    $extension = substr($filename, strrpos($filename, ".")+1);
  }
  if (in_array($extension,$can_be_shown_extensions)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Creates the entire structure holding all the metadata forms HTML and sets Drupal cache for usage
 * later to connect the form_id to the filenames
 * TBD / TODO - use the form's actual cache instead of a made-up one
 * returns string HTML of all forms
 */
function sidora_create_resource_get_metadata_form_html($parent_pid, $model, $form_name, $current_uploads, $batch = '') {
  global $user;
  module_load_include('inc', 'sidora', 'includes/utils');
  $tuque = islandora_get_tuque_connection();
  $to_return = '';
  $to_return .= "<div id='create-resource-form'>";
  if (count($current_uploads) == 0 || empty($current_uploads)) {

  // if no files
  $to_return .= '<div id="form-num-0" class="sidora-ingest-form-holder"><div id="top-panel" class="top-panel" style="left:0; width:100%; height:30px;"></div>';
  try {
    $page = $tuque->repository->constructObject(islandora_get_namespace('si:root'));
  }catch(Exception $e) {
    return t('The Fedora repository server is currently unavailable. Please contact the site administrator %email',
       array('%email' => (variable_get('site_admin_email_to', '') != ''?' at ' . variable_get('site_admin_email_to'):''))
     );
    }
    $form = drupal_get_form('islandora_ingest_form', array(
      'models' => array($model),
      'objects' => array($page),
      'parent' => $parent_pid,
    ));
    $id_to_creation_info = cache_get("sidora:form_id_to_creation_info");
    if (empty($id_to_creation_info)) {
      $id_to_creation_info = array();
    }
    else {
      $id_to_creation_info = $id_to_creation_info->data;
    }
    $creation_info = array();
    $creation_info['model'] = $model;
    $creation_info['form'] = $form_name;
    $ontology_id = drupal_static('ontology_id');
    $creation_info['ontology_id'] = $ontology_id;
    $id_to_creation_info[$form['#build_id']] = $creation_info;
    cache_set("sidora:form_id_to_creation_info",$id_to_creation_info);
    $to_return .= drupal_render( $form);
    $to_return .= "<div id='bottom-panel' class='bottom-panel' style='position:absolute; bottom:0; left:0; width:100%;'></div></div>";
  }
  else {
    $at_least_one_pic = false;
    foreach ($current_uploads as $cu) {
      $at_least_one_pic = $at_least_one_pic ||  sidora_is_displayable_image_with_convert($cu->filename) && ($batch != 'metabulk');
    }
    if ($batch == 'metabulk') {

    // rename and move the uploaded files
      $batch_uniqueId = '';
      $batch_uniqueId = sidora_upload_batch($current_uploads,drupal_static('ontology_id'));
      if ($batch_uniqueId == '') {
        drupal_set_message(t('An error occured while copying the files for batch ingest'),'error');
       return;
     }
    }
    for ($form_total = 0; $form_total < count($current_uploads); $form_total++) {
      if ($form_total > 0 && $batch == 'metabulk') {
        break;
        // we need to create only one copy of the form for all the uploaded files
      }
      $to_return .= '<div id="form-num-'.$form_total.'" class="sidora-ingest-form-holder ';
      if (!empty($current_uploads[$form_total]) && $at_least_one_pic) {
        $to_return .= 'has-image';
      }
      $to_return .= '"><div id="top-panel" class="top-panel" style="left:0; width:100%; height:30px;"></div>';
      if (!empty($current_uploads[$form_total]) && $at_least_one_pic) {
        $to_return .= "<div class='picHolder' id='picHolder-".$form_total."'>";
        global $user;
        $fileinfo = $_SESSION['file_uploads'][$user->uid][$form_total];
        $filepath = $fileinfo->filepath;
        if (
          sidora_is_displayable_image_with_convert($current_uploads[$form_total]->filename) &&
          sidora_is_displayable_within_display_params($filepath)
        ) {
          $to_return .= "<img src='".$GLOBALS['base_url']."/sidora/info/".$form_total."/previewUploadedResources' style='max-width:810px'/>";
        }
        else {
          $to_return .= $current_uploads[$form_total]->filename.' is not displayable at this time.';
        }
        $to_return .= "</div>";
      }
      try
      {
        $page = $tuque->repository->constructObject(islandora_get_namespace('si:root'));
      }catch(Exception $e) {
        return t('The Fedora repository server is currently unavailable. Please contact the site administrator %email',
         array('%email' => (variable_get('site_admin_email_to', '') != ''?' at ' . variable_get('site_admin_email_to'):''))
        );
      }
      $page->owner = $user->name;
      $page->label = '';
      // Label of object if no label gets put into place
      $page->models = 'si:resourceCModel';//parent of the models being sent?
      $form = drupal_get_form('islandora_ingest_form', array(
        'models' => array($model),
        'objects' => array($page),
        'parent' => $parent_pid,
      ));
      if (!empty($current_uploads[$form_total])) {
        $filename = $current_uploads[$form_total]->filename;
        $associations = xml_form_builder_get_associations(array($form_name), array(), array(), FALSE);
        // get the association for the current form to get the title field label
        $association = null;
        foreach ($associations as $curr_association) {
          if ($curr_association['form_name'] == $form_name) {
            $association = $curr_association;
          }
        }
        $form_copy_array = $form;
        if (!empty($association['title_field'])) {
          for ($title_total = 0; $title_total < count($association['title_field']); $title_total++) {
            $form_copy_key = $association['title_field'][$title_total];
            if (!empty($form_copy_key)) {
              if (array_key_exists($form_copy_key,$form_copy_array)) {
                $form_copy_array = $form_copy_array[$form_copy_key];
              }
            }
          }
        }
        // If there is no specified title in the form, then the label for the object will never get set either.
        if (!empty($form_copy_array)) {
          $form_copy_array['#value'] = substr($filename,0,strpos($filename,'.'));
          if ($batch == 'metabulk') {
            $form_copy_array['#value'] = '';
          }
          drupal_array_set_nested_value($form,$form_copy_array['#array_parents'],$form_copy_array);
        }
        $id_to_filename = cache_get("sidora:form_id_to_filename");
        if (empty($id_to_filename)) {
          $id_to_filename = array();
        }
        else {
          $id_to_filename = $id_to_filename->data;
        }
        $id_to_filename[$form['#build_id']] = array('filename' => $filename, 'filepath' => $current_uploads[$form_total]->filepath);
        if ($batch == 'metabulk') $id_to_filename[$form['#build_id']] = array('filename' => $batch_uniqueId, 'filepath' => $current_uploads[$form_total]->filepath);
        cache_set("sidora:form_id_to_filename",$id_to_filename);
      }
      $id_to_creation_info = cache_get("sidora:form_id_to_creation_info");
      if (empty($id_to_creation_info)) {
        $id_to_creation_info = array();
      }
      else {
        $id_to_creation_info = $id_to_creation_info->data;
      }
      $creation_info = array();
      $creation_info['model'] = $model;
      $creation_info['form'] = $form_name;
      $ontology_id = drupal_static('ontology_id');
      $creation_info['ontology_id'] = $ontology_id;
      $creation_info['parent'] = $parent_pid;
      $id_to_creation_info[$form['#build_id']] = $creation_info;
      cache_set("sidora:form_id_to_creation_info",$id_to_creation_info);
      $resource_types = array(
        'si:imageCModel' => 'images',
        'si:generalImageCModel' => 'images',
        'si:fieldbookCModel' => 'pdf',
        'si:datasetCModel' => 'csv',
        'islandora:sp-audioCModel' => 'audio',
        'islandora:sp_videoCModel' => 'video',
        'si:genericCModel' => 'generic',
        'si:massSpectrometryCModel' => 'generic',
        'si:rawGeneSequenceCModel' => 'rawsequence',
        'si:assembledGeneSequenceCModel' => 'assembledsequence'
      );
      $form['resource_model'] = array(
      '#name' => 'resource_model',
      '#type' => 'hidden',
      '#title' => 'Model',
      '#description' => '',
      '#required' => false,
      '#value' => isset($resource_types[$model])?$resource_types[$model]:''
    );
  $to_return .= drupal_render( $form);
      $to_return .= "<div id='bottom-panel' class='bottom-panel' style='position:absolute; bottom:0; left:0; width:100%;'></div></div>";
    }
  }
  $to_return .= "</div>";
  return $to_return;
}

/*
 * Initial screen shown when user chooses to upload tabular data,
 * Is a form to choose from their existing codebooks or to upload a new example data file to use
 */
function sidora_codebook_upload_form($form, &$form_state, $parent_pid) {
  $form['gen-codebook'] = array(
    '#type' => 'fieldset',
    '#title' => t('Generate Codebook From Example File'),
  );
  $form['gen-codebook']['radio']['header_choice'] = array(
    '#type' => 'radios',
    '#title' => t('Select option for column headers'),
    '#description' => t('This determines if the first line of the data files is part of the data, or if header data exists.'),
    '#options' => array(
      'TRUE' => t('All uploaded data files will have header row(s)'),
      'FALSE' => t('Uploaded data files will not have any header rows'),
    ),
    '#required' => TRUE,
  );
  $form['gen-codebook']['radio']['header_amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter the number of header rows'),
    '#description' => t('The data for the files will start after this many rows (lines) of information.'),
    '#required' => FALSE,
    '#default_value' => '1',
  );
  $form['gen-codebook']['file'] = array(
    '#type' => 'file',
    '#title' => t('Example Data File'),
    '#description' => t('The codebook will be generated on this uploaded example data.'),
    '#upload_validators' => array(
      'file_validate_extensions' => array('csv xls xlsx'),
    ),
    '#attributes' => array(
      'accept'=> '.csv, .xls, .xlsx',
    ),
  );
  $form['gen-codebook']['some_text'] = array(
    '#markup' => '<style>
       .form-item-files-file, .form-item-user-supplied-codebook-pid {width:100%;float:left;clear:both;}
       #edit-upload-codebook-submit, #edit-pick-codebook-submit {float:left;vertical-align:top;}
       #edit-user-supplied-codebook-pid, #edit-file { width:100%; padding:2px;
     }
     </style>',
  );
  $form['gen-codebook']['upload_codebook_submit'] = array(
  // ensure this aligns with information in the validator on the #id check
    '#type' => 'submit',
    '#value' => t('Upload and Generate New'),
  );
  module_load_include('inc', 'sidora', 'includes/utils');
  $codebook_options = array();
  module_load_include('inc', 'sidora', 'includes/project_spaces');
  $ps_pids = sidora_get_project_space_pids_for_pid($parent_pid);
  $codebook_options = array();
  if (sizeof($ps_pids) > 0) {
    $cb_holder = sidora_obj($ps_pids[0]);
    if (!empty($cb_holder)) {
      $codebooks = $cb_holder->relationships->get(FEDORA_RELS_EXT_URI, 'managesCodebook');
      foreach ($codebooks as $codebook_info) {
        $codebook_pid = ($codebook_info['object']['value']);
        $codebook = sidora_obj($codebook_pid);
        if (!empty($codebook) && !empty($codebook->label)) {
          $codebook_options[$codebook_pid] = $codebook->label;
        }
      }
      $codebook_options = array_reverse($codebook_options);
    }
  }
  /*
  $user_pid = sidora_get_user_object();
  $user_obj = sidora_obj($user_pid);
  // Load up the Fedora Commons object for the user
  if (!empty($user_obj)) {
    // Check to see what managesCodebook relations it has
    $codebooks = $user_obj->relationships->get(FEDORA_RELS_EXT_URI, 'managesCodebook');
    foreach ($codebooks as $codebook_info) {
      $codebook_pid = ($codebook_info['object']['value']);
      $codebook = sidora_obj($codebook_pid);
      $codebook_options[$codebook_pid] = $codebook->label;
    }
    $codebook_options = array_reverse($codebook_options);
  }
  */
  $form['existing-codebook'] = array(
    '#type' => 'fieldset',
    '#title' => t('Choose From Your Existing Codebooks'),
  );
  $form['existing-codebook']['user_supplied_codebook_pid'] = array(
    '#type' => 'select',
    '#size' => 10,
    '#attributes' => array(
      'class' => array('existing-codebooks-select'),
    ),
    '#options' => $codebook_options,
  );
  $form['existing-codebook']['pick_codebook_submit'] = array(
  // ensure this aligns with information in the validator on the #id check
    '#type' => 'submit',
    '#value' => t('Use Selected Codebook'),
    '#submit' => array('sidora_codebook_upload_form_pick_codebook_submit'),
  );
  return $form;
}

/**
 * Helper function to do deletes without worring where they are from
 * @param $path - a OS path or Drupal file path
 */
function sidora_do_any_file_delete($path) {
  $fid = db_query("SELECT fid FROM {file_managed} WHERE uri = :path", array(':path' => $path))->fetchField();
  if ($fid) {
    $file = file_load($fid);
    file_delete($file);
  }
  else {
    file_unmanaged_delete($path);
  }
}

/*
 * hook_form_validate for the sidora_codebook_upload, also moves file if validation was successful
 */
function sidora_codebook_upload_form_validate($form, &$form_state) {
  if ($form_state['triggering_element']['#id'] == 'edit-upload-codebook-submit') {
    $header_amount = $form_state['values']['header_amount'];
    $header_choice = $form_state['values']['header_choice'];
    // Note this is a string, not a boolean
    if (strtolower($header_choice) != 'true' && strtolower($header_choice) != 'false') {
      return;
    }
    if (strcasecmp($header_choice,'true') !== 0) {
      $header_amount = 0;
    }
    else {
      if (($header_amount !== '') && (intval($header_amount) != $header_amount || $header_amount <= 0)) {
        // Did not use element_validate_integer_positive because want to ensure the order of validation and can leave blank (if no header rows)
        // Want to exit out if this fails and not to bother with the file_move if the number of header rows is bad
        form_set_error('header_amount',t("The number of lines must be a positive integer."));
        return;
      }
    }
    $file = file_save_upload('file',
      array(
        // Validate extensions.
        'file_validate_extensions' => array('csv xls xlsx'),
      ),
      'public://'
    );
    if (empty($file)) {
      form_set_error('file', t("No file or failed to write the uploaded file to the site's file folder."));
      return;
    }
    $parser_os_file_path = drupal_realpath($file->destination);
    $parser_drupal_file_path = NULL;
    $delete_parser_file = FALSE;
    if (strcasecmp($header_choice,'true') === 0) {
      if ($file && $header_amount > 1) {
        $parser_drupal_file_path = 'public://'.'_for_parser_'.uniqid();
        file_copy($file, $parser_drupal_file_path);
        $file_path = drupal_realpath($parser_drupal_file_path);
        // Do the restructuring of the file and resave it
        // resave the file by using first line, skipping N-1, then rest of file
        require_once(libraries_get_path('PHPExcel') . '/Classes/PHPExcel/IOFactory.php');
        // createReaderForFile uses the extension to look for information so use the filename that has an extension
        $objReader = PHPExcel_IOFactory::createReaderForFile($file_path);
        $objPHPExcel = $objReader->load($file_path);
        $worksheet = $objPHPExcel->getActiveSheet();
        // Maximum number of headers is the highest row - 1 since they need at least 1 line of data
        if ($header_amount > ($worksheet->getHighestRow() - 1)) {
          watchdog('SIdora_Tabular_Parse',t("Too many header rows: %num_hr_chosen but has this many rows: %real_rows Problem creating a codebook:<br/>parser_os_file_path: %for_parser <br/>drupal_realpath(file): %drupal_rp <br/>This file has NOT been deleted and is not going to be deleted by Drupal. It must be handled on the OS level.",array(
                             '%for_parser' => $parser_os_file_path,
                             '%drupal_rp' => drupal_realpath($file->destination),
                             '%num_hr_chosen' => $header_amount,
                             '%real_rows' => $worksheet->getHighestRow(),
                           )
          ));
          form_set_error('file',t("The demonstration file does not have data for the number of header rows chosen."));
          // Remove the original
          sidora_do_any_file_delete($parser_os_file_path);
          // Remove the copy created for the parser
          sidora_do_any_file_delete($file_path);
          return;
        }
        $worksheet->removeRow(1 , $header_amount - 1);
        $objWriter = PHPExcel_IOFactory::createWriter($objPHPExcel, "Excel2007");
        $parser_os_file_path = $file_path . '.xlsx';
        $objWriter->save($parser_os_file_path);
        $delete_parser_file = TRUE;
      }
    }
    $expl_rp = explode(drupal_realpath("public://"), $parser_os_file_path);
    if (sizeof($expl_rp) == 2) {
      $parser_url_file_path = file_create_url("public://") . substr($expl_rp[1],1);
    }
    else {
      watchdog('SIdora_Tabular_Parse',t("File System Problem with creating a codebook:<br/>parser_os_file_path: %for_parser <br/>drupal_realpath(file): %drupal_rp <br/>This file has NOT been deleted and is not going to be deleted by Drupal. It must be handled on the OS level.",array('%for_parser' => $parser_os_file_path, '%drupal_rp' => drupal_realpath($file->destination))));
      form_set_error('file',t("Unable to parse the uploaded file. Contact an administrator %email if you believe this file should be able to be parsed.  Please send a screenshot of this page, include the file you uploaded, and the time and date this occurred.  The administrator should check the Drupal log for 'SIdora_Tabular_Parse' for more information.",
         array('%email' => (variable_get('site_admin_email_to', '') != ''?' at ' . variable_get('site_admin_email_to'):'')))
      );
      return;
    }
    // If the file passed validation:
    if ($file) {
      // Save the file for use in the submit handler.
      $form_state['storage']['file'] = $file;
      file_save($file);
      // Set a response to the user.
      // drupal_set_message(t('The form has been submitted and the image has been saved, filename: @filename.', array('@filename' => $file->filename)));
      // The parser can't communicate over https, so swap it to http if that is attempted
      $fcu = $parser_url_file_path;
      $fcu = str_replace('https://','http://',$fcu);
      $url =
      variable_get('sidora_codebook_parser_url', '').'url='.urlencode($fcu).'&headers='.$header_choice;
      $codebook_label = 'Codebook '.date('Ymd_His');
      try{
        $codebook = sidora_create_codebook_from_url($url, $codebook_label, $header_amount);
        $form_state['storage']['codebook'] = $codebook;
      }catch(Exception $e) {
        ob_start();
        var_dump($e);
        $exception_dump = ob_get_clean();
        watchdog('SIdora_Tabular_Parse',t("Problem with creating a codebook:<br/>%message <br/> %exception_dump",
                array('%message' => substr($e->getMessage(),0,1024),
                      '%exception_dump' => substr($exception_dump,0,1024))) .
                t("URL: %url", array('%url' => $url))
                );
        form_set_error('file',t("Unable to parse the uploaded file. Contact an administrator %email if you believe this file should be able to be parsed.  Please send a screenshot of this page, include the file you uploaded, and the time and date this occurred.  The administrator should check the Drupal log for 'SIdora_Tabular_Parse' for more information.",
   array('%email' => (variable_get('site_admin_email_to', '') != ''?' at ' . variable_get('site_admin_email_to'):'')))
  );
        return;
      }
    }
    // Ends else of if ($file)
    if ($delete_parser_file) {
      // Remove the original copy
      sidora_do_any_file_delete($parser_drupal_file_path);
      // Remove the resaved copy
      sidora_do_any_file_delete($parser_os_file_path);
    }
  }
}


/**
 * Submit handler for upload_codebook_submit, the default submit button for the codebook_upload_form
 */
function sidora_codebook_upload_form_submit($form, &$form_state) {
  global $user;
  $file = $form_state['storage']['file'];
  // We are done with the file, remove it from storage.
  unset($form_state['storage']['file']);

  $file_info = new stdClass();
  $file_info->filename = basename(file_create_url($file->uri));
  $file_info->filepath = drupal_realpath($file->uri);
  $_SESSION['file_uploads'][$user->uid][] = $file_info;

  $codebook = $form_state['storage']['codebook'];
  $_SESSION['codebook_choice']['sample_uploaded'] = TRUE;
  $_SESSION['codebook_choice']['edit_complete'] = FALSE;
  $_SESSION['codebook_choice']['codebook_id'] = $codebook->id;
  // Choice for this session
  $_SESSION['codebook_choice']['filepath'] = $file_info->filepath;
}

/*
 * Form that is not visible to user but moves the workflow forward in a predictable way.
 * With this form, the codebook based on upload and a chosen codebook workflows meet.
 */
function sidora_codebook_hidden_step_form($form, &$form_state) {
  global $user;
  $codebook_pid = "unset";
  if (!empty($_SESSION['codebook_choice']['codebook_id'])) {
    $codebook_pid = $_SESSION['codebook_choice']['codebook_id'];
  }
  if (!empty($_POST['user_supplied_codebook_pid'])) $codebook_pid = $_POST['user_supplied_codebook_pid'];
  $form['hidden_step'] = array(
      '#markup' => '<input style="display:none" id="create-new-codebook" value="Using selected codebook" style="width:222px;" class="form-submit"><br/>
  </div>
  <input id="codebook-pid" value="'.$codebook_pid.'" style="display:none"/>
  <script>
    jQuery(document).ready(function() {jQuery("#create-new-codebook").click();});
    jQuery(window.parent.window.document).find("#sb-title-inner").text("Edit Codebook");
  </script>
  <style>
    #edit-continue {display:none;}
  </style>
  ',
    );
    $form['user_supplied_codebook_pid'] = array(
      '#type' => 'hidden',
      '#value' => '',
      '#attributes' => array(
        'id' => 'user_supplied_codebook_pid',
      ),
    );
    $form['continue'] = array(
     '#type' => 'submit',
     '#value' => t('continue'),
    );
  return $form;
}

/*
 * Check if this step of the tabular data workflow is completed
 */
function sidora_is_create_resource_codebook_edit_completed() {
  return !(empty($_SESSION['codebook_choice']['edit_complete']));
}


/*
 *First page is an upload page
 *Second return is a page that is filled with Metas
 *
 * extra info is whether or not the page should be refreshed to the first page, clearing out the existing session (if they stopped mid session last time)
 */
function sidora_create_resource($parent_pid = 'si:root', $model = 'si:collectionCModel', $form_name = '', $ontology_location = '', $extra_info = '', $batch = '') {
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_metadata_screens.css',array('weight' => '1000000', 'group' => CSS_THEME));
  global $user;
  // if the parent pid is locked, can't do it
  if (!sidora_obtain_lock($parent_pid)) {
    $to_return = '';
    $to_return .= t('The parent of this resource is currently locked by another user');
    return $to_return;
  }

  // Clear out the session if they just did a click on new (cancelled out an old one or on a new page)
  // TBD / TODO: make each request have it's own information instead of storing in session
  if ($extra_info == 'fresh') {
    $path = current_path();
    $path = substr($path,0,strpos($path,'/fresh'));
    if (array_key_exists('file_uploads', $_SESSION)) {
      $_SESSION['file_uploads'][$user->uid] = array();
    }
    sidora_reset_codebook_choice();
    drupal_goto($path);
  }
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/ingest.form');
  drupal_add_library('system','ui.progressbar');
  drupal_static('parent_collection_pid', $parent_pid);
  drupal_static('form_of_interest', $form_name);
  drupal_static('ontology_id', $ontology_location);
  $to_return = '';
  // Determine if it should have an uploader
  $check_for_uploads = TRUE;
  $show_form = TRUE;
  $ask_for_codebook = FALSE;
  // Determine if we already bypassed the uploader step
  $current_uploads = sidora_create_resource_get_current_uploads();

  $codebook_is_required = sidora_is_create_resource_codebook_choice_required($model);
  if ($codebook_is_required) {
    $ask_for_codebook = sidora_is_create_resource_codebook_choice_completed($model);
    $codebook_edit_step_completed = sidora_is_create_resource_codebook_edit_completed();
    if ($ask_for_codebook) {
      $to_return .= '<script>
jQuery(document).ready(function() {
  jQuery("body").prepend(\'<div id="cover" style="width:100%;height:100%;position:absolute;left:0;top:0;z-index:100;background:white;"><p style="margin:20px;">Tabular data files require a codebook which describes the contents of the data. You can choose to automatically generate a codebook based on one of your files, or choose an existing codebook that describes your data. Use one of the two options below, clicking one of the buttons to make your choice.<br/><input id="gen-codebook" type="submit" class="form-submit" value="Generate codebook" style="    margin: 20px;"><input id="pick-existing" type="submit" class="form-submit" value="Pick from your existing codebooks"></p></div>\');
  jQuery("#pick-existing").click(function() {
    jQuery(".form-wrapper").show();
    jQuery("#edit-gen-codebook").hide();
    jQuery("#cover").hide();
    addBackButton();
  });
  jQuery("#gen-codebook").click(function() {
    jQuery(".form-wrapper").show();
    jQuery("#edit-existing-codebook").hide();
    jQuery("#cover").hide();
    addBackButton();
    showOrHideBackedOnColumnHeaderChoice();
  });
  addBackButton = function() {
    jQuery("#content").append(\'<input id="back-button" type="submit" class="form-submit" value="Back"/>\');
    jQuery("#back-button").click(function() {
      jQuery("#back-button").remove();
      jQuery("#cover").show();
    });
  }
  showOrHideBackedOnColumnHeaderChoice = function() {
    jQuery("#edit-header-choice-false").click(function() {
      jQuery("#edit-header-amount").closest("div").hide();
    });
    jQuery("#edit-header-choice-true").click(function() {
      jQuery("#edit-header-amount").closest("div").show();
    });
  }
  jQuery("#cover").prepend(jQuery("#console"));
  jQuery("#console").css("margin","20px");
});
</script>';
      // First step for codebook is the upload or choose step (SID-243)
      $to_return .= '<div style="display:none">Tabular data files require a codebook which describes the contents of the data.  You can choose to automatically generate a codebook based on one of your files, or choose an existing codebook that describes your data.  Use one of the two options below, clicking one of the buttons to make your choice.</div>';
      $form = drupal_get_form('sidora_codebook_upload_form', $parent_pid);
      $to_return .= drupal_render($form);
      $show_form = FALSE;
    }
    elseif (!$codebook_edit_step_completed) {
      $form = drupal_get_form('sidora_codebook_hidden_step_form');
      $to_return .= drupal_render($form);
      $_SESSION['codebook_choice']['edit_complete'] = TRUE;
      $show_form = FALSE;
    }
    else {
      // Specialty because we may need to prepopulate the example file here
      $to_return .= '
<script>
jQuery(document).ready(function() {
  jQuery(window.parent.window.document).find("#sb-title-inner").text("Create Resource");
});
</script>
';
      if (empty($_SESSION['codebook_choice']['upload_browser_already_shown'])) {
        $_SESSION['codebook_choice']['upload_browser_already_shown'] = FALSE;
      }
      $create_upload_form = !$_SESSION['codebook_choice']['upload_browser_already_shown'];
      if ($_SESSION['codebook_choice']['sample_uploaded']) {
        $create_upload_form = (count($current_uploads) < 2 && $_SESSION['codebook_choice']['upload_browser_already_shown'] == FALSE);
        // If the user has uploaded a single item that is the sample upload, so 0 uploads or 1, create the upload form
        if (count($current_uploads) == 1 && $create_upload_form) {
          $example_file = $current_uploads[0];
          $mime_detect = new MimeDetect();
          $mimeType = $mime_detect->getMimeType($example_file->filename);
          $filesize = filesize($example_file->filepath);
          // Since we need to have the upload browser show the file to remove, add in a fake file which represents it
          // Adding in the fake file will create an additional entry into Session, so when it's in session, remove that one
          $to_return .= '
            <script>
            sidoraUploaderPostInit = function() {
              window.myFile = new o.File();
              myFile.name = "'.$example_file->filename.'";
              myFile.origSize = '.$filesize.';
              myFile.size = '.$filesize.';
              myFile.type = "'.$mimeType.'";
              myFile.loaded = '.$filesize.';
              myFile.percent = 100;
              myFile.status = 5;
              // Large files that go beyond the chunking limit will check that their chunks are completed in a way
              // that looks for the original uploader.  Since no such uploader exists the "getSource" will return
              // a blank object.  The source will be asked for the slice function to see if it is complete, which
              // would then be calling a function of an object where it does not exist, generating a javascript error.
              myFile.getSource = function() {
                return {
                  slice: function() {}
                }
              };
              uploader.addFile(myFile);
            };
            sidoraCodebookGhostRemoved = false;
            sidoraUploadComplete = function(up,files) {
              if (sidoraCodebookGhostRemoved) return;
              if (files[0].name == "'.$example_file->filename.'") {
                var url = Drupal.settings.basePath+"sidora/ajax_parts/remove_file_from_upload_queue/'.$example_file->filename.'/1";
                jQuery.ajax ({ type: "POST", url: url, dataType: "text" });
                sidoraCodebookGhostRemoved = true;
              }
            }
            </script>
          ';
        }
      }
      if ($check_for_uploads && $create_upload_form) {
        $form_html = sidora_create_resource_get_upload_form_html($model,$form_name, $ontology_location, 'Browse',FALSE);
        if (!empty($form_html)) {
          $to_return .= $form_html;
          $show_form = FALSE;
        }
        $_SESSION['codebook_choice']['upload_browser_already_shown'] = TRUE;
      }
    }
  }
  else {
    if ($check_for_uploads && empty($current_uploads)) {
      $form_html = sidora_create_resource_get_upload_form_html($model, $form_name, $ontology_location);
      if (!empty($form_html)) {
        $to_return .= $form_html;
        $show_form = FALSE;
      }
    }
  }
  if ($show_form) {
    $to_return .= sidora_create_resource_get_metadata_form_html($parent_pid, $model, $form_name, $current_uploads, $batch);
  }
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_create_resource.css',array('weight' => '1000000', 'group' => CSS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_util.js',array('weight' => '1000000', 'group' => JS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_uploader.js',array('weight' => '1000000', 'group' => JS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/drupal_ajax_fix.js',array('weight' => '1000000', 'group' => JS_THEME));
  sidora_clear_tree_cache($parent_pid);
  return $to_return;
}

/*
 * Returns the image name that should be used as a thumbnail for basic mime-type (those PIDs with no TN datastream)
 */
function sidora_get_thumbnail_image_for_mime_type($mime_type) {
  $mimeTypeFileName = str_replace('/','-',$mime_type);
  // Security concern - give list of appropriate mime types...
  if (strpos($mimeTypeFileName,'spreadsheet') !== FALSE) {
    $mimeTypeFileName = 'x-office-spreadsheet';
  }
  if (strpos($mimeTypeFileName,'image') !== FALSE) {
    $mimeTypeFileName = 'image-default';
  }
  return $mimeTypeFileName;
}

/**
 * Implements hook_user_insert when a user is created
 */
function sidora_user_login(&$edit, $account) {
  sidora_user_initialize($account);
}

/*
 * Create a Projects folder for the user and put information about it into the Drupal db
 */
function sidora_user_initialize($account) {
  try{
    if (!$account->data || !array_key_exists("islandora_user_pid",$account->data)) {
      sidora_create_and_set_new_user_object($account);
    }
  }catch(Exception $exc) {
    watchdog(
      'sidora_workbench',
      "Problem during user initialize:".$exc->getMessage()
    );
  }
}


function sidora_create_and_set_new_user_object($account, $create_even_if_existing_valid = FALSE) {
  if (!empty($account->data) && array_key_exists("islandora_user_pid",$account->data)) {
    $existing_obj_check = sidora_obj($account->data['islandora_user_pid']);
    if (!$create_even_if_existing_valid && !empty($existing_obj_check)) {
      return json_encode('Already has valid user project');
    }
  }
  module_load_include('inc', 'sidora', 'includes/utils');
  $object = sidora_create_user_object($account);
  sleep(15);
  // Arbitrary sleep to allow fedora to create the objects.  Even though the ID comes back it's apparently not available immediately
  module_load_include('inc', 'sidora', 'includes/project_spaces');
  $existing_project_spaces = sidora_get_project_spaces_by_member($account->uid);
  if (empty($existing_project_spaces)) {
    sidora_create_personal_project_space($account);
  }
  $data = array();
  $data['data'] = array();
  $data['data']['islandora_user_pid'] = $object->id;
  user_save($account,$data);
  return json_encode('New user project created');
}

/**
 * Set the specified user's root (islandora_user_pid) to the specified pid
 */
function sidora_set_user_object($drupal_user, $pid) {
  $acdata['data']['islandora_user_pid'] = $pid;
  user_save($drupal_user, $acdata);
}

/*
 * returns true if the user is a fedora admin
 */
function sidora_is_admin($drupal_user = '') {
  global $user;
  if (empty($drupal_user)) $drupal_user = $user;
  return (is_array($drupal_user->roles) && in_array('administrator', $drupal_user->roles));
}

/*
 * returns a drupal user from an ambiguous source, or current drupal user
 */
function sidora_get_drupal_user($user_pid_or_drupal_user = '') {
  global $user;
  $drupal_user = $user_pid_or_drupal_user;
  if (empty($user_pid_or_drupal_user)) {
    $drupal_user = $user;
  }
  elseif (is_numeric($user_pid_or_drupal_user)) {
    $drupal_user = user_load($user_pid_or_drupal_user);
  }
  elseif (is_string($user_pid_or_drupal_user)) {
    $drupal_user = user_load_by_name($user_pid_or_drupal_user);
  }
  // drupal_user is now a proper drupal user
  return $drupal_user;
}

/**
 * The main permissions function
 * There are 5 types of operation
 * C R U D and permission
 * translates into
 * create - create a resource on the specified concept (therefore modifiying the RELS-EXT but only a specific way)
 * (read) view - allow reading of ALL data
 * update - allow changing of all of this object's datastreams
 * delete - allow deletion of this object
 * and
 * permission - allow changing of permissions
 *
 * TODO: Delete Resource from the UI will require ONLY that the user has access to update the parent concept as is, true delete not unassociate
 * If the user does not have delete access and it belongs to them, it will be placed in a special "orphan" concept TBD / TODO
 */
function sidora_allow($user_pid_or_drupal_user, $pid_or_fedora_object, $type_of_operation = 'create') {
  $drupal_user = sidora_get_drupal_user($user_pid_or_drupal_user);
  $object = $pid_or_fedora_object;
  if (empty($pid_or_fedora_object)) return FALSE; //can't do operations on blank pid
  if (is_string($pid_or_fedora_object)) {
    $pid = $pid_or_fedora_object;
  }
  else {
    $pid = $object->id;
  }
  module_load_include('inc', 'sidora', 'includes/sidora_nodes');
  if (sidora_is_admin($drupal_user) && $pid == 'si:root') {
    return TRUE;
  }
  if (sidora_is_admin($drupal_user) && $type_of_operation == 'permission') {
    // Speed up some admin processes, do not check for object existence
    // We will see that the object does not exist for normal permission types
    return TRUE;
  }
  $node = sidora_get_update_or_create_concept_node($pid);
  // if the node doesn't exist, check to see if it's a Fedora Object to see if it needs to be created
  if ($node == NULL && is_string($pid_or_fedora_object)) {
    $object = sidora_obj($pid);
    if (empty($object)) {
      // This was unable to be read out of Fedora, most likely not a real pid
      return FALSE;
    }
    // Do not create a node for it, we don't create nodes for resources and this may be a resource
  }
  else if (is_string($pid_or_fedora_object)){
    $object = NULL;
    // sidora_obj($pid_or_fedora_object);
    // Do not load the object unless we really need it
  }
  else {
    $object = $pid_or_fedora_object;
  }

  //Update the node information if it's out of sync with Fedora
  $is_synced = sidora_is_node_synced_with_fedora($node);
//var_dump($is_synced);
  if (!$is_synced) {
//print 'Node not synced with fedora:';
//var_dump($node);
    sidora_update_node_from_fedora($node);
  }


  // At this point, we no longer use $pid_or_fedora_object
  // $pid is the pid
  // $object is the object, only loaded if we already had it or no node was found for it
  // The state of the object is reflected in the status == 1 => 'A' of the node for concepts
  // node will be NULL for resources
  module_load_include('inc', 'sidora', 'includes/sidora_nodes');
  $inactive = empty($node->field_fedora_inactive['und'][0]['value'])?NULL:$node->field_fedora_inactive['und'][0]['value'];
  if (!empty($inactive)) {
    // equivalent to: if ($object->state != 'A') {
    // do not perform actions on deleted or inactive objects, even for admins
    // if you want to do something like this, set it to active in the Fedora Admin Flash app
    //   and re-delete afterward
    return FALSE;
  }

  //hopefully this is a valid fedora object now
  //if the user is an administrator, they always have the rights
  if (sidora_is_admin($drupal_user)){
    return TRUE;
  }
  if (empty($drupal_user->name)) {
    // Anonymous user comes here, which is true for exhibition
    $pids_checked = Array();
    $pid_with_exhibition = sidora_exhibition_exists_in_tree($pid, $pids_checked);
    return (!empty($pid_with_exhibition));
  }
  // the owner has rights to all except manage
  // for resources, we will have to check the Fedora object to see if the user can manage it
  // but for concepts, we will rely on the node
  $is_resource = empty($node);
  if ($is_resource) {
    if (empty($object)){
      $object = sidora_obj($pid_or_fedora_object);
    }
    if (strtolower($object->owner) == strtolower($drupal_user->name) && $type_of_operation != 'manage'){
      return TRUE;
    }
  }
  else {
    if ($drupal_user->uid == $node->uid && $type_of_operation != 'manage') {
      return TRUE;
    }
  }


  $og_handled = array('view', 'update', 'delete', 'create');
  module_load_include('inc', 'sidora', 'includes/sidora_nodes');
  if (!empty($node) && in_array($type_of_operation, $og_handled)) {
    return sidora_node_allow($type_of_operation, $node);
  }
  if ($is_resource) {
    $parent_array = sidora_get_owning_parent_concept_by_administered_pid($pid);
    $parent_pid = '';
    if (!empty($parent_array)) {
      foreach($parent_array as $pid => $parent_obj) {
        $parent_pid = $pid;
      }
    }
    if (sidora_allow($user_pid_or_drupal_user, $parent_pid, $type_of_operation)) {
      return TRUE;
    }
  }

  //Next comment is no longer necessarily true, would need a new check TODO
  // Next line says by default it's visible unless they shared, in which case it's already been returned
  //if ($type_of_operation == 'view') return TRUE;
  return FALSE;
}
function sidora_get_groups_by_user($uid = NULL){
  static $groups = NULL;
  if (empty($groups)) {
    if (empty($uid)) {
      $drupal_user = sidora_get_drupal_user();
    }
    else {
      $drupal_user = user_load($uid);
    }
    $gids = og_get_groups_by_user($drupal_user);
    if (!empty($gids['node'])){
      $groups = node_load_multiple($gids['node']);
    }
    else {
      $groups = array();
    }
  }
  return $groups;
}
function sidora_node_access($node, $op, $account) {
  if (
    !empty($node->type) &&
    $node->type == "sidora_concept" &&
    empty($account->uid)
  ) {
    //Do not allow anonymous access to the node
    return NODE_ACCESS_DENY;
  }
  return NODE_ACCESS_IGNORE;
}

/**
 * Helper function to quickly get the username of a uid without loading the full user
 */
function sidora_get_username_from_uid($uid) {
  static $uid_ia = array();
  if (empty($uid_ia[$uid])){
    // Fast ownership query, not loading entire user
    $result = (db_query("SELECT name FROM users WHERE uid = :s", array(':s' => $uid)));
    foreach($result as $indiv){
      $uid_ia[$uid] = $indiv->name;
      return $indiv->name;
    }
    $uid_ia[$uid] = NULL;
  }
  return $uid_ia[$uid];
}
/**
 * Returns an array of pids belonging to concepts that the username (string case insensitive) owns in Fedora
 * CURRENTLY UNUSED
 */
function sidora_get_owned_concepts_pids($username) {
  $tuque = islandora_get_tuque_connection();
  if (empty($tuque)) {
    return NULL;
  }
  $username = strtolower($username);
  $out = array();
  // This query holds enough information to create a tree of ownership, but we are not using it that way yet
  $query = "SELECT ?parent ?o ?t ?owner
    FROM <#ri>
          WHERE {
              { ?o <info:fedora/fedora-system:def/model#hasModel> <info:fedora/si:conceptCModel> }
              UNION { ?o <info:fedora/fedora-system:def/model#hasModel> <info:fedora/si:collectionCModel> } .
              ?o <info:fedora/fedora-system:def/model#state> <info:fedora/fedora-system:def/model#Active> .
              ?o <info:fedora/fedora-system:def/model#label> ?l .
              ?parent <info:fedora/fedora-system:def/relations-external#hasConcept> ?o .
              ?o <info:fedora/fedora-system:def/model#ownerId> ?owner .
          FILTER (lcase(str(?owner)) = \"" . $username . "\")
            }
          GROUP BY ?o (STR(?l) AS ?t) ?owner ?parent
          ORDER BY ?parent";
  $results = $tuque->repository->ri->query($query, 'sparql');
  foreach ($results as $result) {
    $pid = $result['o']['value'];
    $out[] = $pid;
  }
  return $out;
}

/*
 * Calls the tuque duplication process, returning the new FedoraObject
 */
function sidora_exact_duplicate($copy_from_pid) {
  $copy_from = sidora_obj($copy_from_pid);
  $tuque = islandora_get_tuque_connection();
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/ingest.form');
  if ($copy_from == null) {
    watchdog('sidora',t("Tried to make an exact duplicate of object that was not in Fedora: %pid",array('%pid'=>$copy_from_pid)));
    return null;
  }
  $copied_to = islandora_copy_object($copy_from);
  $apim = $tuque->repository->api->m;
  $nextPid = $apim->getNextPid(islandora_get_namespace('si:root'));
  $copied_to->id = $nextPid;
  return $tuque->repository->ingestObject($copied_to);
}
/**
 * Duplicate the tree structure, will ONLY duplicate items that are owned by the original pid's owner
 * If a project space is specified, create nodes for the objects in that project space
 *   DOES NOT add the item as a child of the project space's pid
 * Return the pid of the duplicate root or FALSE
 */
function sidora_duplicate_tree_and_resources($pid_of_item_to_duplicate, $project_space_pid = NULL) {
  // Things to look out for:
  //  Circular references
  //
  $processed_duplicates = array();
  module_load_include('inc', 'sidora', 'includes/utils');
  if (sidora_is_concept(sidora_obj($pid_of_item_to_duplicate))) {
    // Plan: Pull all of the pids of the tree
    $pids = sidora_get_pids_in_tree_from_nodes_by_root_pid($pid_of_item_to_duplicate);
  }
  else {
    // Something that does not have a node, therefore no tree
    // If it has codebooks, those will be taken care of in the
    // assocation process (this function or sidora_copy) to its new parent
    $new_obj = sidora_exact_duplicate($pid_of_item_to_duplicate);
    if (!empty($new_obj)) {
      return $new_obj->id;
    }
    return null;
  }
  if (!empty($pids)) {
  // For each item in this list
    foreach($pids as $pid => $node_id) {
      // create a duplicate
      $new_obj = sidora_exact_duplicate($pid);
      // if the RELS-EXT is pointing to something that doesn't exist, don't try to use a new object
      if (!empty($new_obj)) {
        if (!empty($project_space_pid)) {
          $node = sidora_update_or_create_node_from_fedora($new_obj);
          module_load_include('inc', 'sidora', 'includes/project_spaces');
          sidora_put_into_project_spaces($node, $project_space_pid);
        }
        //  Store the association between the old and new
        $processed_duplicates[$pid] = $new_obj->id;
        // create duplicates of each resource
        $original_obj = sidora_obj($pid);
        $resource_rels = $original_obj->relationships->get(FEDORA_RELS_EXT_URI, 'hasResource');
        foreach($resource_rels as $resource_rel) {
          $original_resource_pid = $resource_rel['object']['value'];
          if (!array_key_exists($original_resource_pid, $processed_duplicates)) {
            $new_res = sidora_exact_duplicate($original_resource_pid);
            // Store the association between the old and new
            $processed_duplicates[$original_resource_pid] = $new_res->id;
            // Check the resource's codebook, and duplicate that as well
            $codebook_pids = sidora_get_codebook_pids($original_resource_pid);
            foreach($codebook_pids as $codebook_pid){
              // If the codebook's owner is already the project space that it's being moved into
              // then there's no need to duplicate it
              $codebook_manager_pid = sidora_get_codebook_manager_pid($codebook_pid);
              // Below line includes the idea that if they are both empty then no need to duplicate
              if ($project_space_pid != $codebook_manager_pid){
                // If it's already been duplicated, then do not reduplicate
                $duplicated_pids = array_keys($processed_duplicates);
                if (!in_array($codebook_pid, $duplicated_pids)) {
                  // Put the new codebook on the project space, if specified
                  $new_codebook = sidora_exact_duplicate($codebook_pid);
                  // Manager of the new codebook is the project space the tabular data got copied into
                  if (!empty($project_space_pid)) {
                    $ps_obj = sidora_obj($project_space_pid);
                    $ps_obj->relationships->add(FEDORA_RELS_EXT_URI, 'managesCodebook', $new_codebook->id);
                    $new_codebook->relationships->remove(SI_RELS_EXT_URI, 'isAdministeredBy');
                    $new_codebook->relationships->add(SI_RELS_EXT_URI, 'isAdministeredBy', $project_space_pid);
                  }
                  // Add this to the list of duplicated items, which will allow checking
                  // to not reduplicate and also perform the reassociation of relationships
                  $processed_duplicates[$codebook_pid] = $new_codebook->id;
                }
              }
            }
            // Out of codebook_pids loop
          }
        }
        // Out of resources loop
      }
    }
    $original_pids_that_were_processed = array_keys($processed_duplicates);
    // For each of the new items
    foreach($processed_duplicates as $original_pid => $duplicate_pid) {
      $duplicate_obj = sidora_obj($duplicate_pid);
      // go through all of it's relationships
      $relationships = $duplicate_obj->relationships->get();
      foreach($relationships as $relationship) {
        // replace the references to the old pids with the new pids
        $check_relationship_pid = $relationship['object']['value'];
        if (in_array($check_relationship_pid, $original_pids_that_were_processed)) {
          $duplicate_obj->relationships->remove($relationship['predicate']['namespace'], $relationship['predicate']['value'], $check_relationship_pid);
          $duplicate_obj->relationships->add($relationship['predicate']['namespace'], $relationship['predicate']['value'], $processed_duplicates[$check_relationship_pid]);
        }
      }
    }
    return $processed_duplicates[$pid_of_item_to_duplicate];
  }
  else {
    // Too many pids, will not duplicate
    return FALSE;
  }
}

/*
 * hook_user_view shows user info for codebooks and exhibitions
 */
function sidora_user_view($account, $view_mode, $langcode){
  if (!variable_get('sidora_user_page_info', TRUE)){
    return;
  }

  global $user;
  $is_logged_in_as_admin = FALSE;
  //if they came in trying to change the user pid, see if they are an administrator and then do it
  if (sidora_is_admin($user)){
    $is_logged_in_as_admin = TRUE;
    $new_user_pid = filter_input(INPUT_POST, 'user_pid', FILTER_SANITIZE_URL);
    if (!empty($new_user_pid)) sidora_set_user_object($account, $new_user_pid);
  }

  module_load_include('inc', 'sidora', 'includes/utils');
  $account_data = ($account->data);

  $codebook_pid = '';
  $codebook_html = '';
  $user_pid = sidora_get_user_object($account);
    $members = array();
    if ($user_pid) {
      // If there's too many groups then things start to get a little long
      /*
      $collection = new Collection($user_pid);
      $members = $collection->getTreeMembers();
      if (function_exists('exhibition_config_get_exhibition_pids_for_user')){
        if ($_GET['showProjects'] == 'true'){
        $members = exhibition_config_get_exhibition_pids_for_user($account->name);
        if (count($members)) {
          $account->content['sidora_exhibit_projects'] = array(
            '#title' => t('View Projects in Exhibit'),
            '#value' => '<br />' . sidora_user_table($members, $user_pid),
              '#type' => 'user_profile_item'
            );
          }
        }else{
          $account->content['sidora_exhibit_projects'] = array(
            '#title' => t('View Projects in Exhibit'),
            '#value' => '<br/><a href="?showProjects=true">Click here </a>to reload page showing your Exhibition Projects',
            '#type' => 'user_profile_item'
          );
        }
      }else{
          $account->content['sidora_exhibit_projects'] = array(
            '#title' => t('View Projects in Exhibit'),
            '#value' => '<br/>Enable the Exhibition Config module to list user exhibitions.',
            '#type' => 'user_profile_item'
          );
      }
      */

    if (count($members)){
      foreach ($members as $member) {
        if ((string) $member['label']==='Codebook Library') {
          $codebook_pid = $member['pid'] ;
          break 1;
        }
      }
    }
    $user_obj = sidora_obj($user_pid);
    //Load up the Fedora Commons object for the user
    if (!empty($user_obj)){
      //Check to see what managesCodebook relations it has
      $codebooks = $user_obj->relationships->get(FEDORA_RELS_EXT_URI, 'managesCodebook');
      //Load up each codebook for more info
      foreach($codebooks as $codebook_info){
        $codebook_pid = ($codebook_info['object']['value']);
        $codebook = sidora_obj($codebook_pid);
        $codebook_html .= '<tr><td>'.$codebook_pid.'</td><td>'.$codebook->label.'</td>';
        $codebook_html .= '<td><a href="'.base_path().'sidora/workbench/#'.$codebook_pid.'">View In Workbench</a></td>';
        if (sidora_is_admin()) {
          $codebook_html .= '<td><a href="'.base_path().'sidora/ajax_parts/delete/'.$codebook_pid.'" target="_blank">Delete</a></td>';
        }
        $codebook_html .= '</tr>';
      }
    }
  }
  $account->content['workbench'] = array();
  $account->content['workbench']['groups_sizer'] = array(
    '#markup' => '<style>.field-name-og-user-node .field-items {max-height:500px;overflow:scroll;}</style>',
    '#class' => 'islandora_user_pid',
    '#type' => 'user_profile_item',
    '#title' => '',
  );
  $account->content['workbench']['link'] = array(
      '#title' => '',
      '#markup' => '<a href="'.base_path().'sidora/workbench/" class="button">Open Workbench</a><div style="float:right"><a href="'.base_path().'user/logout" class="button">Logout</a><div>',
      '#type' => 'user_profile_item',
  );
  if ($is_logged_in_as_admin){
    $account->content['workbench']['reset_islandora_user_pid'] = array(
      '#title' => t('View / Set this user\'s Islandora Pid (Their root folder / user project)'),
      '#markup' => '<form id="reset_user_pid" method="post"><input type="text" name="user_pid" value="'.$user_pid.'" class="form-text"/><input type="submit" class="form-submit"/></form>',
      '#class' => 'islandora_user_pid',
      '#type' => 'user_profile_item',
    );
  }

  $codebook_header_html = '<table><tr><th>ID</th><th>Label</th><th>Link</th>';
  if (sidora_is_admin()) {
    $codebook_header_html .= '<th>Delete</th>';
  }
  $codebook_html = $codebook_header_html . '</tr>' . $codebook_html . '</table>';
  $account->content[] = array(//['workbench_islandora_user_pid'] = array(
    '#title' => t('Codebooks'),
    '#markup' => $codebook_html,
    '#class' => 'islandora_user_pid',
    '#type' => 'user_profile_item',
  );
}

/*
 * Copied from 0.3, unused currently
 */
function sidora_user_table($members, $user_pid) {
  $header = array(t('Project Name'), t('Link'));

  foreach ($members as $member) {
    $exhibit_link = url(variable_get(VAR_SIDORA_EXHIBITION_URL, VAR_DEFAULT_SIDORA_EXHIBITION_URL) . '/fedora/repository/' . $member['pid'], array('absolute' => TRUE));
    $text_link = array(
      '#type' => 'textfield',
      '#value' => check_plain($exhibit_link),
      '#attributes' => array('readonly' => 'readonly'),
      '#size' => 80,
    );
    $rows[] = array(
      array('data' => l($member['label'], $exhibit_link, array(
            'attributes' => array('target' => '_blank')))),
      array('data' => drupal_render($text_link))
    );
  }
  $table_attributes = array('id' => 'sidora_exhibit_projects_table');
  $output .= theme('table', $header, $rows, $table_attributes);

  return $output;
}
/*
 * If an item's ancestry (parent/grandparent/etc) includes an exhibition, then the item is allowed to be shown by exhibition
 * So this checks up the tree to find if there is an exhibition somewhere in the object's ancestry.
 * This function calls itself and keeps track of already checked items
 * returns the pid of what has the exhibition, or returns FALSE
 */
function sidora_exhibition_exists_in_tree($pid_to_check, $pids_checked_array, $recursing = FALSE) {
  module_load_include('inc', 'sidora', 'includes/utils');
  global $pids_checked_array;
  if (!$recursing) {
    $pids_checked_array = array();
  }
  if (($pid_to_check != 'si:root') && ((!is_array($pids_checked_array)) || (!in_array($pid_to_check,$pids_checked_array)))) {
    $exhibition_data = exhibition_config_get_config_data($pid_to_check);
    if (!(empty($exhibition_data)) && !(is_null($exhibition_data['pid'])) && !(is_null($exhibition_data['last_published'])) && ($exhibition_data['last_published'] != '')){
      return $pid_to_check;
    }
    else {
      $pids_checked_array[] = $pid_to_check;
      $object = sidora_obj($pid_to_check);
      if (empty($object)) {
        return FALSE;
      }
      $parents = sidora_get_parent_concepts($object);
      foreach ($parents as $parent_pid => $parent) {
        $parent_has_exhibition = sidora_exhibition_exists_in_tree($parent_pid, $pids_checked_array, TRUE);
        if ($parent_has_exhibition !== FALSE) {
          return $parent_has_exhibition;
        }
      }
    }
  }
  return FALSE;
}


/**
 * Query for fetching the Parent Concepts pids and labels.
 *
 * @param string $pid
 *   The object to query for.
 *
 * @return string
 *   An itql query string.
 */
function sidora_generate_parent_concept_query($pid) {
  return 'select $o $t from <#ri> where
    $o <fedora-model:state> <fedora-model:Active> and
    $o <fedora-model:label> $t and
    $o <fedora-rels-ext:hasConcept> <info:fedora/' . $pid . '>
    order by $t';
}


/*
 * This function is called by exhibition to get specified exhibition information
 * The current design requires that it must be able to be run by the public (ajax call in the exhibition)
 *
 */
function sidora_open_access($info_type, $pid) {
  $pid = urldecode($pid);
  $pids_checked = Array();
  $pid_with_exhibition =  sidora_exhibition_exists_in_tree($pid, $pids_checked);
  if ($pid_with_exhibition == FALSE) {
    drupal_not_found();
    drupal_exit();
  }
  switch($info_type) {
    case 'file_extension':
      module_load_include('inc', 'sidora', 'includes/utils');
      $object = sidora_obj($pid);
      if (!empty($object) && !empty($object['OBJ'])) {
        $mime_type = $object['OBJ']->mimeType;
        if ($mime_type != '') {
          $file_extension = sidora_get_file_extension_from_mime($mime_type);
          print (json_encode($file_extension));
        }
      }
      else {
        // This is normal activity for exhibition to ask this for concepts, expects a empty return
        print '';
      }
      break;
    case 'xsl':
      module_load_include('inc', 'sidora', 'includes/xsl_handling');
      $file = sidora_get_xsl_file_for_object($pid);
      // empty string means use default xsl, NULL means there is no file
      if ($file === '') {
        header("Content-type: text/xml");
        print sidora_xsl_string($xsl_file);
      }
      else {
        if ($file) {
          header("Content-type: text/xml");
          if (preg_match('/^.*\/[^\.]*/', $file)) {
            $output_info = readfile($file);
          }
          else {
            $xsl_form_definition = db_query("SELECT form_definition FROM {sidora_xsl} WHERE form_name = :form_name", array(':form_name' => $file))->fetchField();
            if ($xsl_form_definition) {
              $definition = new DOMDocument();
              $definition->loadXML($xsl_form_definition);
              $definition->formatOutput = TRUE;
              print $definition->saveXML();
            }
          }
        }
      }
      break;
    case 'xsl_config':
      module_load_include('inc', 'sidora', 'includes/xsl_handling');
      sidora_xsl_information($pid, $info_type == 'xsl');
      break;
    case 'viewer_config':
      $return_when_encoded = sidora_get_viewer_config($pid);
      print json_encode($return_when_encoded);
      break;
    case 'osd':
                                          sidora_osd_proxy_version($pid);
      break;
  }
  drupal_exit();
}
/**
 * Return the users way to describe the models. Returns FALSE if there wasn't a specific way to express that model to the user
 */
function sidora_model_to_user_language($model) {
  $model_to_type_text = array(
    'si:imageCModel' => t('Image'),
    'si:generalImageCModel' => t('Image'),
    'si:fieldbookCModel' => t('Digitized Text'),
    'si:datasetCModel' => t('Tabular Dataset'),
    'islandora:sp-audioCModel' => t('Audio'),
    'islandora:sp_videoCModel' => t('Video'),
    'si:rawGeneSequenceCModel' => t('Gene Sequence'),
    'si:assembledGeneSequenceCModel' => t('Gene Sequence'),
  );
  if (empty($model_to_type_text[$model])) {
    return FALSE;
  }
  return $model_to_type_text[$model];
}
/*
 * A catch all for many of the ajax calls
 * TODO: split the various cases into separate functions
 */
function sidora_info_json($pid, $type='resources', $specific_meta = '', $download = '', $formatted = '', $limit = NULL, $offset = NULL) {
  global $user;
  $to_output = '';
  switch ($type) {
    case 'relationships_basic':
      print sidora_get_parent_table($pid, TRUE, TRUE, TRUE);
      break;
    case 'relationships':
      print sidora_get_parent_table($pid);
      print sidora_get_related_codebook_table($pid);
      break;
    case 'xsl_upload':
      module_load_include('inc', 'sidora', 'includes/xsl_handling');
      $return_when_encoded = array();
      $all_uploads = $_SESSION['file_uploads'][$user->uid];
      $return_when_encoded['files'] = array();
      if (!empty($all_uploads)) {
        foreach ($all_uploads as $curr_upload) {
          $curr_item = array();
          $new_name = $curr_upload->filename;
          if (sidora_endsWith(strtolower($new_name),'.xsl')) {
                  if (rename($curr_upload->filepath, drupal_realpath('public://') . '/' . $new_name)) {
                    $rename_worked = sidora_xsl_file_to_db(drupal_realpath('public://') . '/',$new_name);
              $curr_item['description'] = t('Attempted file write');
              $curr_item['success'] = $rename_worked;
                  }
                  else {
                    $curr_item['success'] = FALSE;
              $curr_item['description'] = t('Unable to move the uploaded file');
                  }
          }
          else {
            $curr_item['success'] = FALSE;
            $curr_item['description'] = t('Wrong file extension for xsl upload');
          }
          $curr_item['name'] = $curr_upload->filename;
          $return_when_encoded['files'][] = $curr_item;
        }
        $_SESSION['file_uploads'][$user->uid] = array();
      }
      else {
        $return_when_encoded['description'] = t('No files to update');
      }
      print json_encode($return_when_encoded);
      drupal_exit();
      break;
    case 'management':
      if (!sidora_allow($user,$pid,'view')) drupal_not_found();
      $object = sidora_obj($pid);
      $for_json_output = array();
      $ds_info = array();
      foreach ($object as $dsid=>$datastream) {
        $dsi = array();
        $dsi['id'] = $dsid;
        $dsi['label'] = $datastream->label;
        $dsi['state'] = $datastream->state;
        $dsi['mimetype'] = $datastream->mimetype;
        $dsi['createdDate'] = $datastream->createdDate;
        $ds_info[] = $dsi;
      }
      $for_json_output['datastreams'] = $ds_info;
      $obj_prop = array();
      $obj_prop['label'] = $object->label;
      $obj_prop['owner'] = $object->owner;
      $obj_prop['state'] = $object->state;
      $obj_prop['createdDate'] = $object->createdDate;
      $obj_prop['lastModifiedDate'] = $object->lastModifiedDate;
      $for_json_output['object_properties'] = $obj_prop;
      print json_encode($for_json_output);
      drupal_exit();
      break;
    case 'permission':
      $permission['create'] = sidora_allow($user,$pid,'create');
      $permission['view'] = sidora_allow($user,$pid,'view');
      $permission['update'] = sidora_allow($user,$pid,'update');
      $permission['delete'] = sidora_allow($user,$pid,'delete');
      $permission['permission'] = sidora_allow($user,$pid,'permission');
      $permission['manage'] = sidora_allow($user,$pid,'manage');
      print json_encode($permission);
      drupal_exit();
      break;
    case 'base':
      $object = sidora_obj($pid);
      if (empty($object)) {
        print t('Object not found');
        drupal_exit();
      }
      var_dump($object);
      break;
    case 'ps_detail':
      print '<span class="metadata-table">';
      module_load_include('inc', 'sidora', 'includes/sidora_nodes');
      module_load_include('inc', 'sidora', 'includes/project_spaces');
      $info = sidora_get_info($pid);
      print '<span>Research Space Information</span>';
      print '<table class="ps-detail"><tr><td>Owner</td><td>' . $info['obj']->owner . '</td></tr></table>';
      $groups = sidora_get_groups_for_project_space($pid, TRUE);
      print '<table class="ps-detail"><tr><td>Editors</td><td>';
      foreach($groups as $group) {
        if (sidora_get_sidora_group_type($group) == 'edit') {
          $members_to_group = sidora_get_member_to_group_association(array($group));
          foreach($members_to_group as $uid => $group) {
            $member = user_load($uid);
            print $member->name;
            print '<br>';
          }
        }
      }
      print '</td></tr></table>';
      print '</span>';
      break;
    case 'meta':
      module_load_include('inc', 'sidora', 'includes/utils');
      $object = sidora_obj($pid);
      if (empty($object) || !sidora_allow($user, $pid, 'view')){
        print t('Object not found');
        drupal_exit();
      }
      if (!empty($specific_meta)) {
        // If this is to be based on the xsl_form_config
        $xsl_file = '';
        $dsid_to_use = '';
        if ($specific_meta == 'sidora_xsl_config_variable') {
          module_load_include('inc', 'sidora', 'includes/xsl_handling');
          $curr_sfc = sidora_get_xsl_file_config_for_object($pid);
          if (!empty($curr_sfc)) {
            $xsl_file = $curr_sfc->file;
            $dsid_to_use = $curr_sfc->dsid;
          }
          if (empty($dsid_to_use)) {
            $specific_meta = 'all';
          }
          else {
            $specific_meta = $dsid_to_use;
          }
        }//ends sidora_xsl_config_variable
        $datastream_content = '';
        // print "Using $specific_meta";
        $datastream = '';
        foreach ($object as $dsid_loop=>$datastream_loop) {
          if ($specific_meta == 'all') {
            // strip off the <?xml directives if it has any and remove binary data
            $content = $datastream_loop->content;
            $doc = new DOMDocument();
            if (substr(trim($content),0,1) == '<') {
              $doc->loadXML($content);
              $datastream_content .= $doc->saveHTML();
            }
          }
          elseif ($dsid_loop == $specific_meta) {
            // SIdora is going to need about 200MB to run
            // and the file needs to be loaded into memory to be downloaded
            $available_for_file = sidora_get_available_memory() - 200000000;
            if ($available_for_file < $datastream_loop->size) {
              return t('This file is too large to be downloaded through the workbench. Contact your workbench contact to retrieve this file %email',
                array('%email' => (variable_get('site_admin_email_to', '') != ''?' at ' . variable_get('site_admin_email_to'):''))
              );

            }
            $datastream_content = TRUE;
            $datastream = $datastream_loop;
            $content_size = $datastream->size;
          }
        }
        if (empty($datastream_content)) {
          print t('Datastream not found by that name');
          drupal_exit();
        }
        // datastream_content is now set.  perform the output
        $mime_type = (empty($datastream))?'text/xml':$datastream->mimeType;
        if ($specific_meta == 'all') {
          $datastream_content = '<xml_root><general_info><owner>'.$object->owner.'</owner><label>'.$object->label.'</label></general_info>'."\n".$datastream_content."\n".'</xml_root>';
          $mime_type = 'text/xml';
        }
        $file_extension = '';
        if ($mime_type != '') {
          $file_extension = sidora_get_file_extension_from_mime($mime_type);
        }
        if ($download=='browser' && (strpos($mime_type,"xml") !== FALSE || strpos($mime_type,"text") !== FALSE)) {

        // html, text, csv
          header("Content-type: html");
        }
        else {
          header("Content-type: $mime_type");
        }
        if ($download=='download') {
          if (is_string($datastream_content)){
            $content_size = strlen($datastream_content);
          }
          else {
            $content_size = $datastream->size;
          }
          // $filename = $pid.'_'.$specific_meta;//get_suggest_filename($label, $mime_type);
          $filename = $pid.'_'.$specific_meta.$file_extension;//get_suggest_filename($label, $mime_type);
          if ((strtoupper($specific_meta) == 'OBJ') && (strtoupper($datastream->label) != 'OBJ')) {
            $filename = $datastream->label;
            if (!empty($filename)) {
              if (pathinfo($filename, PATHINFO_EXTENSION) == '') {
                $filename = $filename . $file_extension;
              }
            }
          }
          if ($content_size > 0) {
            header("Content-length: $content_size");
          }
          header("Content-Disposition: attachment; filename=\"$filename\"");
        }
        if ($formatted == 'html') {
          // HTML should not have enough data to overflow the memory, feel free to load the full content
          $datastream_content = $datastream->content;
          $converted = sidora_html_convert_entities($datastream_content);
          // convert all the html entites to xml
          module_load_include('inc', 'sidora', 'includes/xsl_handling');
          print '<div class="metadata-table">'.sidora_metadata_to_html_table_transform($converted, $xsl_file).'</div>';
        }
        else {
          if (is_string($datastream_content)){
            print $datastream_content;
          }
          else {
            $start = 0;
            $buffer_size = 1024 * 8 * 1000;
            $chunker_size = $buffer_size;
            $end = $start + $chunker_size;
	    module_load_include('inc', 'islandora', 'includes/datastream');
            $file_uri = islandora_view_datastream_retrieve_file_uri($datastream);
            while($start < $content_size ){
              if ($end > $content_size-1){
                $end = $content_size-1;
              }
              $params = array(
                'start' => $start,
                'end' => $end,
              );
              // The meat of this has been taken from:
              // http://mobiforge.com/design-development/content-delivery-mobile-devices.
              $fp = @fopen($file_uri, 'rb');
              fseek($fp, $params['start']);
              // Start buffered download.
              $buffer = $buffer_size; //1024 * 8;
              while (!feof($fp) && ($p = ftell($fp)) <= $params['end']) {
                if ($p + $buffer > $params['end']) {
                  // In case we're only outputting a chunk, make sure we don't read past the
                  // length.
                  $buffer = $params['end'] - $p + 1;
                }
                // Reset time limit for big files.
                set_time_limit(0);
                echo fread($fp, $buffer);
              }
              fclose($fp);
              $start += $chunker_size;
              $end += $chunker_size;
            }
          }
          drupal_exit();
        }
      }
      else {
        $for_json_output = array();
        foreach ($object as $dsid=>$datastream) {
          $for_json_output[] = $dsid;
          // array_keys will not work on the Fedora object - not true array
        }
        print json_encode($for_json_output);
        drupal_exit();
      }
      break;
    case 'resources':
      $permissions = array();
      $permissions['v'] = sidora_allow(NULL, $pid, 'view');
      $permissions['u'] = sidora_allow(NULL, $pid, 'update');
      $permissions['d'] = sidora_allow(NULL, $pid, 'delete');
      if (!$permissions['v']) {
        return '';
      }
      $resource_types = sidora_get_resource_types();
      if ($download == 'browser' && $formatted == 'dataTableServerSideProcessing') {
        $jsdt_title_and_type_search_val = filter_var($_GET['search']['value'], FILTER_SANITIZE_STRING);
        // The search value holds both the type of object and the title search, pull those out
        $vals = explode("\n",$jsdt_title_and_type_search_val);
        $jsdt_search_val = $vals[0];
        $jsdt_title_search_val = empty($vals[1])?'':$vals[1];
        if (!array_key_exists($jsdt_search_val, $resource_types)) {
          $jsdt_search_val = 'all';
        }
        $jsdt_order_on = empty($vals[2])?'created':$vals[2];
        $jsdt_order_by = empty($vals[3])?'DESC':$vals[3];
        $jsdt_draw = filter_input(INPUT_GET,'draw', FILTER_SANITIZE_NUMBER_INT);
        $jsdt_start = filter_input(INPUT_GET,'start', FILTER_SANITIZE_NUMBER_INT);
        $jsdt_length = filter_input(INPUT_GET,'length', FILTER_SANITIZE_NUMBER_INT);
        $limit = $jsdt_length;
        $offset = $jsdt_start;
        $resources_count = sidora_concept_resource_listing_count($pid,$resource_types);
        $filtered_resources_count = sidora_concept_resource_listing_count($pid,$resource_types, $jsdt_search_val, $jsdt_title_search_val);
        if ($filtered_resources_count == NULL) {
          $resources = array();
        }
        else {
          $resources = sidora_concept_resource_listing($pid,$resource_types,$limit,$offset, $jsdt_search_val, $jsdt_title_search_val, $jsdt_order_on, $jsdt_order_by);
        }

        $jsdt_response = array();
        $jsdt_response['draw'] = $jsdt_draw;
        $jsdt_response['recordsTotal'] = $resources_count;
        $jsdt_response['recordsFiltered'] = $filtered_resources_count;
        $jsdt_response['offset'] = $offset;
        $jsdt_response['length'] = $limit;
        $jsdt_response['orderOn'] = $jsdt_order_on;
        $jsdt_response['orderBy'] = $jsdt_order_by;
        $jsdt_data = array();
        $linked_resources = '<div class="link-icon-holder"><img class="link-icon-location" src="' . $GLOBALS['base_url'].'/'.drupal_get_path('module','sidora'). '/images/link.png" title="Linked Resource"></div>';
        foreach ($resources as $element) {
          if (array_key_exists('object',$element)) {
            $element_pid = $element['object']['value'];
            $viewer_config = sidora_get_viewer_config($element_pid);
            $tn = '<img src="'.$GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/images/mime/default.png" height="30" width="30"/>';
            if (array_key_exists('thumbnail_exists',$element) && $element['thumbnail_exists']) {
              $tn = '<img style="max-height:90px;max-width:150px;" src="../info/'.$element['object']['value'].'/meta/TN/browser" />';
            }
            elseif (array_key_exists('MainMimeType',$element) && !empty($element['MainMimeType'])) {
              $mimeTypeFileName = sidora_get_thumbnail_image_for_mime_type($element['MainMimeType']);
              if (!empty($mimeTypeFileName)) {
                // check to see if the file exists that we are interested in
                if (file_exists(drupal_realpath(drupal_get_path('module','sidora').'/images/mime/'.$mimeTypeFileName.'.png'))) {
                  $tn = '<img src="'.$GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/images/mime/'.$mimeTypeFileName.'.png" height="30" width="30"/>';
                }
              }
            }
            $status_text = '<div class="status-details"><div class="original_metadata"></div><div class="status-details-text">Details Incomplete</div></div>';
            if (array_key_exists('original_metadata',$element) && $element['original_metadata']==='FALSE') {
              $status_text = '<div class="status-details"><div class="not_original_metadata"></div><div class="status-details-text">Details Complete</div></div>';
            }
            $checkbox_id = 'checkbox_' . $element['object']['value'];
            $type = sidora_model_to_user_language($element['model']['value']);
            $creation_date = date_parse($element['created']['value']);
            $operations = '<a href="" onclick="sidora.resources.ShowDetails(\'' . $element_pid . '\'); return false;" class="sidora-ui-link">Details</a> ';
            if ($permissions['u']) {
              $operations .= '<a href="" onclick="sidora.resources.EditDetails(\'' . $element_pid . '\'); return false;" class="sidora-ui-link">Edit</a> ';
              $operations .= '<a href="" onclick="sidora.resources.UpdateContent(\'' . $element_pid . '\'); return false;" class="sidora-ui-link">Update Content</a>';
            }
            $operations .= '<br/>';
            $operations .= '<a href="" onclick="sidora.ProjectSpaces.DuplicateOrTransfer(\'link\', \'resources\',\'' . $element_pid . '\',Drupal.t(\'Link Resources\')); return false;" class="sidora-ui-link">Link</a> ';
            $operations .= '<a href="" onclick="sidora.ProjectSpaces.DuplicateOrTransfer(\'duplicate\',\'resources\',\'' . $element_pid . '\',Drupal.t(\'Copy Resources\')); return false;" class="sidora-ui-link">Copy</a> ';
            if ($permissions['d']) {
              $operations .= '<a href="" onclick="sidora.ProjectSpaces.DuplicateOrTransfer(\'transfer\',\'resources\',\'' . $element_pid . '\',Drupal.t(\'Move Resources\')); return false;" class="sidora-ui-link">Move</a>';
            }
            if (sidora_is_admin()) {
              $operations .= '<br/>';
              $operations .= '<a href="" onclick="sidora.manage.Open(\'' . $element_pid . '\', \'\', \'Manage Resource\', \'Update resource information\'); return false;" class="sidora-ui-link">Manage</a> ';
            }
            $resource_actions = '';
            if (!empty($viewer_config)){
              $resource_actions .= '<a href="" onclick="sidora.resources.openInNewWindow(\'' . $element_pid . '\'); return false;" class="sidora-ui-link" title="Open in New Window"><i class="material-icons">filter</i></a> ';
            }
            $resource_actions .= '<a href="" onclick="sidora.resources.download(\'' . $element_pid . '\'); return false;" class="sidora-ui-link" title="Download"><i class="material-icons">file_download</i></a> ';
            if ($permissions['d']) {
              $resource_actions .= '<a href="" onclick="sidora.resources.DeleteResource(\'' . $element_pid . '\'); return false;" class="sidora-ui-link" title="Delete"><i class="material-icons">delete</i></a>';
            }

            $thumbnail_html = '<div ';
            $thumbnail_html .= 'class="sidora-info-holder" ';
            $thumbnail_html .= 'administered-by-pid="'.$element['administeredBy']['value'].'" ';
            $thumbnail_html .= 'has-viewer="'.(empty($viewer_config)?"0":"1").'" ';
            $thumbnail_html .= 'num-links="'.$element['incomingLinks']['value'].'" ';
            module_load_include('inc', 'sidora', 'includes/project_spaces');
            $thumbnail_html .= 'rspids="' . implode(' ', sidora_get_project_space_pids_for_pid($element_pid)) . '" ';
            $thumbnail_html .= '></div>';
            $thumbnail_html .= '<div class="resource-list-tn">';
            if ($pid != $element['administeredBy']['value']) {
              $thumbnail_html .= $linked_resources;
            }
            $thumbnail_html .= $tn.'</div>';
            $uploadedFileName = '';
            if (array_key_exists('DatastreamLabel',$element) && !empty($element['DatastreamLabel'])) {
              $uploadedFileName = '<br />&nbsp;&nbsp;' .  'File: ' . $element['DatastreamLabel'];
            }
            $jsdt_data[] = array(
              "DT_RowId"=>$element['object']['value'],
              0=>'<div class="sidora-bulk-action-check">
<i class="material-icons"><div class="holder"></div></i></div>',
              1=>$thumbnail_html,
              /*$element['m']['value'],*/
              2=>'<div class="resource-list-label">'.$element['title']['value'] . $uploadedFileName . '</div>',
              3=>'<div class="">' . $type . '</div>',
              4=>$status_text,
              5=>'<div class="">' . $creation_date['month'] . '/' . $creation_date['day'] . '/' . substr($creation_date['year'],2) . '</div>',
              6=>'<div class="resource-operations sidora-ui-link">' . $operations . '</div>',
              7=>'<div class="resource-actions sidora-ui-link">' . $resource_actions . '</div>',
            );
          }
        }
        $jsdt_response['data'] = $jsdt_data;
        print json_encode($jsdt_response);
        drupal_exit();
      }
      if ($download == 'browser' && $formatted == 'html_placeholder') {
          $to_output = '<table id="res_table" class="display resources-table">';
          $to_output .= '<thead><tr>';
          $to_output .= '<th class="sidora-bulk-action-check"><i class="material-icons">&nbsp;</i></th>';
          $to_output .= '<th>Preview</th>';
          $to_output .= '<th>Name</th>';
          $to_output .= '<th>Type</th>';
          $to_output .= '<th>Status</th>';
          $to_output .= '<th>Added</th>';
          $to_output .= '<th>Operations</th>';
          $to_output .= '<th>Actions</th>';
          $to_output .= '</tr></thead>';
          $to_output .= '<tbody>';
          $to_output .= '</tbody></table>';
      }
      elseif ($download == 'browser' && $formatted == 'html') {
        $resources = sidora_concept_resource_listing($pid,$resource_types,$limit,$offset);
        if (sizeof($resources) == 0) {
          $to_output = t('<div class="resources-table">No resources available on this folder</div>');
        }
        else {
          $to_output = '<table id="res_table" class="resources-table">';
          $to_output .= '<thead><tr>';
          $to_output .= '<th>aw1</th>';
          $to_output .= '<th>aw2</th>';
          $to_output .= '<th>aw3</th>';
          $to_output .= '<th>aw4</th>';
          $to_output .= '<th>aw5</th>';
          $to_output .= '</tr></thead><tbody>';
          foreach ($resources as $element) {
            if (array_key_exists('object',$element)) {
            $to_output .= '<tr><td>';
            $to_output .= $element['original_metadata'];
            $to_output .= '</td><td>';
            $to_output .= $element['object']['value'];
            $to_output .= '</td><td style="text-align:right;">';
            if (array_key_exists('thumbnail_exists',$element) && $element['thumbnail_exists']) {
              $to_output .= '<img src="info/'.$element['object']['value'].'/meta/TN/browser" width="30" height="30"/>';
            }
            else {
              $to_output .= 'No TN';
            }
            $to_output .= '</td><td>';
            $to_output .= $element['m']['value'];
            $to_output .= '</td><td>';
            $to_output .= $element['t']['value'];
            $to_output .= '</td></tr>';
            }
            else {
              $to_output .= 'bad element here';
              print_r($element);
            }
          }
          $to_output .= '</tbody></table>';
        }
      }
      else {
        $resources = sidora_concept_resource_listing($pid,$resource_types,$limit,$offset);
        print $download.$formatted;
        $to_output = json_encode($resources);
      }
      break;
      case 'resource_menu_json':
        // if the user is able to create under this concept, give them a create menu
        global $user;
        if (!sidora_allow($user, $pid, 'create')){
          print '{}';
          drupal_exit();
        }
        else {
          print variable_get('sidora_resource_ontology_json','');
          drupal_exit();
        }
      break;
      case 'create_resource_menu':
        // if the user is able to create under this concept, give them a create menu
        global $user;
        if (!sidora_allow($user, $pid, 'create')) {
            $to_output = '';
        }
        else {
          $to_output = '<ul>';
          $to_output .= '<li><a href="" model="si:fieldbookCModel" formname="Digitized Text (PDF)" ontology-id="DigitizedTextPdf">Digitized&nbsp;Text&nbsp;PDF&nbsp;(MODS)</a>';
          $to_output .= '</li>';
          $to_output .= '<li><a href="" model="si:datasetCModel" formname="Tabular Data Set Object" ontology-id="Datasets">Tabular&nbsp;Datasets</a></li>';
          $to_output .= '<li><a href="">General&nbsp;Image&nbsp;<input type="image" style="position:absolute; right:0px; padding-right:2px;" src="' . base_path().path_to_theme() . '/images/list-item.png"/></a><ul>';
          $to_output .=   '<li><a href="" model="si:generalImageCModel" formname="General Image Description" ontology-id="GeneralImage_GeneralImage">General&nbsp;Image&nbsp;Description&nbsp;(MODS)</a></li>';
          $to_output .=   '<li><a href="" model="si:generalImageCModel" formname="Camera Trap Image" ontology-id="GeneralImage_CameraTrapImage">Camera&nbsp;Trap&nbsp;Image&nbsp;(MODS)</a></li>';
          $to_output .= '</ul></li>';
          // $to_output .= '<li><a href="" model="si:siBasicObject" formname="Dataset" ontology-id="Datasets">Audio&nbsp;Files</a></li>';
          $to_output .= '<li><a href="" model="islandora:sp-audioCModel" formname="Sidora Audio Mods Form" ontology-id="Audio">Audio&nbsp;Files</a></li>';
          $to_output .= '<li><a href="" model="islandora:sp_videoCModel" formname="Video MODS form" ontology-id="Video">Video&nbsp;Files</a></li>';
          $to_output .= '</ul>';
        }
      break;
   // the ajax call to see if there is an exhibition for the current concept and enable/disable the "Exhibit" menu link accordingly
    case 'exhibition':
      $exhibitions['action'] = 'return false;';
      $exhibitions['ui_state_disable'] = true;
       // can't do operations on blank pid
      if (empty($pid)) {
           $exhibitions['action'] = 'return false;';
           $exhibitions['ui_state_disable'] = true;
      }
      else {
          if (module_exists('exhibition_config')) {
            $exhibition_data = exhibition_config_get_config_data($pid);
            if (!(empty($exhibition_data)) && !(is_null($exhibition_data['last_published'])) && ($exhibition_data['last_published'] != '')){
               $exhibitions['action'] = 'window.open(\'' . variable_get('si_exhibition_website_location', ''). '\'+window.sidora.concept.GetPid()); return false;';
               $exhibitions['ui_state_disable'] = false;
            }
            else {
               $exhibitions['action'] = 'return false;';
               $exhibitions['ui_state_disable'] = true;
            }
          }
          else {
            $exhibitions['action'] = 'return false;';
            $exhibitions['ui_state_disable'] = true;
          }
      }
      print json_encode($exhibitions);
      drupal_exit();
      break;
    case 'previewUploadedResources' :
      // the pid in this case will be the count of current item in the uploaded resources in temp directory
      $fileinfo = $_SESSION['file_uploads'][$user->uid][$pid];
      $filepath = $fileinfo->filepath;
      $display_type = sidora_is_displayable_within_display_params($filepath);
      if ($display_type == 0){
        print t('This file is too large to be downloaded through the workbench. Contact your workbench contact to retrieve this file %email',
          array('%email' => (variable_get('site_admin_email_to', '') != ''?' at ' . variable_get('site_admin_email_to'):''))
        );
      }
      else if ($display_type == 1){
        // Not enough memory for resize, check if this is visible to user
        $mime_detect = new MimeDetect();
        $mimeType = $mime_detect->getMimeType($filepath);
        $vmt = sidora_get_viewable_mime_types();
        if (in_array($mimeType, $vmt)) {
          header("Content-type: " . $mimeType);
          header('Expires: 0');
          header('Cache-Control: must-revalidate');
          header('Pragma: public');
          header('Content-Length: ' . filesize($filepath));
          readfile($filepath);
        }
      }
      else {
        $handle = fopen($filepath, "r");
        $contents = fread($handle, filesize($filepath));
        sidora_direct_jpg_output($contents);
      }
      drupal_exit();
      break;
    case 'upload2':
       $configure = array(
      'file_types' => array('xsl'),
      'post_location_js' => 'Drupal.settings.basePath+"sidora/info/xsl_save/xsl_upload"',
      'success_function_js' => 'if (window.opener != null) {
         window.opener.filesUpdated(jQuery.parseJSON(arguments[0]));
         window.close();
       }
       else {
         console.log("not child");
       }',
     );
     $to_return = sidora_generic_upload($configure);
     return 'Upload XSL files:'.$to_return;
     break;
  }
  print $to_output;
}
function sidora_get_resource_types() {
  return array(
    'all' => array('si:massSpectrometryCModel','si:imageCModel','si:generalImageCModel','si:fieldbookCModel','si:datasetCModel','islandora:sp-audioCModel','islandora:sp_videoCModel','si:genericCModel','si:rawGeneSequenceCModel','si:assembledGeneSequenceCModel'),
    'images' => array('si:imageCModel', 'si:generalImageCModel'),
    'pdf' => array('si:fieldbookCModel'),
    'csv' => array('si:datasetCModel'),
    'audio' => array('islandora:sp-audioCModel'),
    'video' => array('islandora:sp_videoCModel'),
    'rawsequence' => array('si:rawGeneSequenceCModel'),
    'assembledsequence' => array('si:assembledGeneSequenceCModel'),
    'generic' => array('si:genericCModel'),
    'text' => FALSE
  );
}
function sidora_get_content_model_names() {
  $cache_name = "sidora:content_model_names";
  if (cache_get($cache_name) === FALSE) {
    module_load_include('inc', 'islandora', 'includes/content_model.autocomplete');
    $names = islandora_get_content_model_names();
    cache_set($cache_name,$names);
  }
  else {
    $names = cache_get($cache_name)->data;
  }
  return $names;
}

/**
 * This will return a php object with fedora object information or a blank array
 * All objects obtained by SIdora code should use this
 * Checks that proper models are used.  If no model listed SIdora WILL NOT use the
 *   object in any way
 */
function sidora_obj($pid) {
//var_dump("sidora_obj: $pid");
  module_load_include('inc', 'sidora', 'includes/utils');
  $object = array();
  $tuque = islandora_get_tuque_connection();
  if ($tuque) {
    $object = islandora_object_load($pid);
  }
  if (empty($object)) return NULL;
  module_load_include('inc', 'sidora', 'includes/sidora_nodes');
  $node = sidora_get_concept_node($pid);
  $inactive = empty($node->field_fedore_inactive['und'][0]['value'])?NULL:$node->field_fedore_inactive['und'][0]['value'];
  if (!empty($inactive)) {
    return NULL;
  }
  $is_concept = sidora_is_concept($object);
  $is_codebook = sidora_is_codebook($object);
  $is_resource = sidora_is_resource($object);
  if (!($is_concept || $is_codebook || $is_resource)) {
    sidora_add_fedora_assumption_problem_object(
      $pid,
      t('This object does not contain an object model consistent with a folder, codebook, or resource')
    );
    return NULL;
  }
  return $object;
}

/*
 * Returns the number of resources on this object or -1 if no communication with Fedora
 */
function sidora_concept_resource_listing_count($pid, $resource_types_list, $resource_type = 'all', $title_search = '') {
  $to_return = array();
  $tuque = islandora_get_tuque_connection();
  $concept_pid = $pid;
  if ($tuque) {
    $query = sidora_generate_child_resource_sparql_query($concept_pid, $resource_types_list[$resource_type], $title_search);
    $ri = $tuque->repository->ri;
    $results = $ri->sparqlQuery($query);
    if (empty($results[0]['object']['value'])) {
      return 0;
    }
    $to_return = sizeof($results);
    return $to_return;
  }
  return -1;
}
/*
 * Returns an array of resource pids that are children of the concept
 * $pid - the concept's pid
 * $resource_types
 * $limit - how many items should be returned
 * $offset - where the list should start out of a full listing
 * $specific_resource_type -
 * $title_search - if only specific labels are being looked for, uses a %contains% type search
 */
function sidora_concept_resource_listing_pids_only($pid, $resource_types, $limit, $offset, $specific_resource_type = 'all', $title_search = '', $sort_on = 'created', $sort_order = 'DESC') {
  $to_return = array();
  $tuque = islandora_get_tuque_connection();
  $concept_pid = $pid;
  if ($tuque) {
    $query = sidora_generate_child_resource_sparql_query($concept_pid, $resource_types[$specific_resource_type], $title_search, $sort_order, $sort_on, $limit, $offset);
    $ri = $tuque->repository->ri;
    $results = $ri->sparqlQuery($query);
    foreach ($results as $resindex=>$result) {
      $tpid = ($result['object']['value']);
      $to_return[] = $tpid;
    }
  }
  return $to_return;
}
/*
 * Returns an array of resources that are children of the concept
 * $pid - the concept's pid
 * $resource_types
 * $limit - how many items should be returned
 * $offset - where the list should start out of a full listing
 * $specific_resource_type -
 * $title_search - if only specific labels are being looked for, uses a %contains% type search
 */
function sidora_concept_resource_listing($pid, $resource_types, $limit, $offset, $specific_resource_type = 'all', $title_search = '', $sort_on = 'created', $sort_order = 'DESC') {
  $to_return = array();
  $tuque = islandora_get_tuque_connection();
  $concept_pid = $pid;
  if ($tuque) {
    $query = sidora_generate_child_resource_sparql_query($concept_pid, $resource_types[$specific_resource_type], $title_search, $sort_order, $sort_on, $limit, $offset);
    $ri = $tuque->repository->ri;
    $results = $ri->sparqlQuery($query);
    foreach ($results as $resindex=>$result) {
      $tobj = sidora_obj($result['object']['value']);
      if (!empty($tobj)) {
        $original_metadata = 'FALSE';
        foreach ($tobj as $dsid=>$datastream) {
          if ($dsid == 'TN') {
            $results[$resindex]['thumbnail_exists'] = TRUE;
          }
          if ($dsid == 'OBJ') {
            $results[$resindex]['MainMimeType'] = $datastream->mimetype;
            $results[$resindex]['DatastreamLabel'] = $datastream->label;
          }
          if ($dsid == 'RELS-EXT') {
            // Why is this stored in RELS-EXT? Who knows! It's not a relationship, but thats where it sits
            $doc = new DOMDocument();
            $doc->loadXML($datastream->content);
            $original_metadata_elements = $doc->getElementsByTagName('orginal_metadata');
            // YES IT IS SPELLED ORGINAL - NOT original
            foreach ($original_metadata_elements as $ome) {
              $original_metadata = $ome->nodeValue;
            }
          }
        }
        // Override the orginal_metadata from RELS-EXT with the new check for metadata entry in the SIDORA dataset
        if (!empty($tobj['SIDORA'])) {
            $doc = new DOMDocument();
            $doc->loadXML($tobj['SIDORA']->content);
            $original_metadata_elements = $doc->getElementsByTagName('meta_requirements_fulfilled');
            foreach ($original_metadata_elements as $ome) {
              $original_metadata = ($ome->nodeValue !== 'TRUE')?'TRUE':'FALSE';
            }
        }
        $results[$resindex]['original_metadata'] = $original_metadata;
      }
    }
    return $results;
  }
  return $to_return;
}

/*
 * Loads the jQuery UI for the main page
 */
function sidora_main_non_block_content() {
  drupal_add_library('system','ui.tabs');
  drupal_add_library('system','ui.menu');
  drupal_add_library('system','ui.tooltip');
  drupal_add_library('system','ui.button');
  drupal_add_library('system','ui.dialog');
  drupal_add_library('system','ui.resizable');
  return '';
}

/**
 * Implements hook_xml_form_builder_get_self_transforms of the XML Form Builder module
 * This allows admins to pick these transforms when using the XML Form Builder
 */
function sidora_xml_form_builder_get_self_transforms() {
  // calls an include file to do the actual commands
  // The choice to not use hook_hook_info is to future-protect and not have a mechanic that can go wrong in unexpected ways
  module_load_include('inc', 'sidora', 'includes/sidora_admin_only');
  return sidora_hook_xml_form_builder_get_self_transforms();
}

/**
 * Implements hook_xml_form_builder_get_transforms of the XML Form Builder module
 * This allows admins to pick these transforms when using the XML Form Builder
 */
function sidora_xml_form_builder_get_transforms() {
  // calls an include file to do the actual commands
  // The choice to not use hook_hook_info is to future-protect and not have a mechanic that can go wrong in unexpected ways
  module_load_include('inc', 'sidora', 'includes/sidora_admin_only');
  return sidora_hook_xml_form_builder_get_transforms();
}


/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function sidora_block_view($delta = '') {
  global $user;
  try{
  drupal_add_js('jQuery.extend(Drupal.settings, { "pathToTheme": "' . base_path() . path_to_theme() . '" });', 'inline');
  if (!empty($user->name)) {
    drupal_add_js('jQuery.extend(Drupal.settings, { "username": "' . $user->name . '" });', 'inline');
    drupal_add_js('jQuery.extend(Drupal.settings, { "is_admin": "' . sidora_is_admin() . '" });', 'inline');
  }
  if (strpos(current_path(), 'sidora/workbench') === FALSE) {
    return;
  }
  if (strpos(current_path(), 'sidora/test') !== FALSE) {
    return;
  }
  if (!user_is_logged_in()) {
    return;
  }
   $block = array();
   switch ($delta) {
    case 'sidora_navigation':
      $block['content'] = sidora_block_content_navigation();
      break;
    case 'sidora_individual_resource_info':
      $block['content'] = '<div id="sidora_content_resource_info"></div>';//Comes fully from javascript
      break;
    case 'sidora_concept_info':
      $block['content'] = '<div id="workbench-menu" style="display:none;">' .
                          '</div><div id="sidora_content_concept_info">';
      $block['content'] .= '  <div id="sidora-concept-commands-and-name" style="
    height: 60px;
    border-bottom: 2px solid gray;
    margin-bottom: 10px;
"><div class="branding-project-spaces" style=""> <a id="add-concept-button" href="#" onclick="sidora.AddConcept();return false;" class="sidora-thin-button" style="
    margin: 12px;
    padding-left: 21px;
    border: none;
    background-color: forestgreen;
"><span style="
    top: 3px;
    position: absolute;
    left: 16px;
"><span class="" style="
    font-size: 20px;
    font-weight: bold;
    ">+</span></span>Add New Folder</a></div>
    <div id="concept-name-holder"></div>


          <ul id="concept-menu">
           <li id="concept-menu-edit-space" class="sidora-not-available"><a href="#" onclick="return false;"><i class="material-icons">edit</i> Edit&nbsp;Research&nbsp;Space <i class="material-icons">arrow_drop_down</i></a>
             <ul>
                <li id="edit-RS"><a href="#" onclick="sidora.menuChoice(\'editResearchSpace\',sidora.ProjectSpaces.currentPid());return false;"><i class="material-icons">edit</i>Edit&nbsp;Metadata</a></li>
                <li id="perm-RS"><a href="#" onclick="sidora.menuChoice(\'changePermissions\',sidora.ProjectSpaces.currentPid());return false;"><i class="material-icons">lock</i>Change&nbsp;Permissions</a></li>
                <li id="move-RS"><a href="#" onclick="sidora.menuChoice(\'changeOwner\',      sidora.ProjectSpaces.currentPid());return false;"><i class="material-icons">call_made</i>Change&nbsp;Owner</a></li>';
      if (sidora_is_admin()) $block['content'] .= '
                <li id="manageConcept"><a href="#" onclick="sidora.concept.Manage(); return false;">Manage&nbsp;Folder</a></li>';
      $block['content'] .= '
             </ul>
           </li>
           <li id="concept-menu-edit-concept"><a href="#" onclick="return false;"><i class="material-icons">edit</i> Edit&nbsp;Folder <i class="material-icons">arrow_drop_down</i></a>
             <ul>
                <li id="editMetadataConcept">
                  <a href="#" onclick="sidora.menuChoice(\'editConcept\', sidora.concept.GetPid(), null); return false;" id="edit-concept-metadata-menu">
                    <i class="material-icons">edit</i>Edit&nbsp;Metadata
                  </a>
                </li>
                <li id="add-resources"><a href="#" onclick="sidora.AddResource(); return false;" id="add-resources-concept-metadata-menu"><i class="material-icons">add_box</i>Add&nbsp;Resource(s)</a></li>
                <li id="copy-to-another-space">
                  <a href="#" onclick="sidora.ProjectSpaces.DuplicateOrTransfer(\'duplicate\',\'concept\',0,Drupal.t(\'Copy Folder\')); return false;" id="copy-to-another-space-menu">
                    <i class="material-icons">content_copy</i>Copy&nbsp;Folder&nbsp;...
                  </a>
                </li>
                <li id="move-to-another-space">
                  <a href="#" onclick="sidora.ProjectSpaces.DuplicateOrTransfer(\'transfer\',\'concept\',0,Drupal.t(\'Move Folder\')); return false;" id="move-to-another-space-menu">
                    <i class="material-icons">call_made</i>Move&nbsp;Folder&nbsp;...
                  </a>
                </li>
                <li id="link-to-another-concept">
                  <a href="#" onclick="sidora.ProjectSpaces.DuplicateOrTransfer(\'link\', \'concept\',0,Drupal.t(\'Link Folder\')); return false;" id="link-to-another-concept-menu">
                    <i class="material-icons">swap_horiz</i>Link&nbsp;Folder&nbsp;...
                  </a>
                </li>
                <li id="deleteConcept"><a href="#" onclick="sidora.concept.DeleteConcept(); return false;"><i class="material-icons">delete</i>Delete</a></li>
';
      if (sidora_is_admin()) $block['content'] .= '
                <li id="manageConcept"><a href="#" onclick="sidora.concept.Manage(); return false;">Manage&nbsp;Folder</a></li>';
      $block['content'] .='
              </ul>
           </li>
           <li id="configureExhibition">
             <a href="#" onclick="window.open(Drupal.settings.basePath+\'exhibition_config/config/\'+window.sidora.concept.GetPid()); return false;"><i class="material-icons">desktop_windows</i> Create&nbsp;Exhibition</a>
          </li>
        </ul>
</div>';
      // Firefox has a bug where float:right will be on a new line if placed after text, even if you tell it display:inline, make is a span, or any normal css fix
      // So we are putting the floated stuff before the icon even though the HTML looks weird, it comes out looking how we want
      $block['content'] .= '
  <div id="concept_tabs">
    <ul>
      <li><a href="#concept-meta" id="concept-meta-link"><div class="sidora-ui-text sidora-ui-link" style="float:right;margin: 3px 0 0 4px;">Details</div><i class="material-icons">info</i></a></li>
      <li><a href="#concept-resource-list"><div class="sidora-ui-text sidora-ui-link" style="float:right;margin: 3px 0 0 4px;">Resources</div><i class="material-icons">panorama</i></a></li>
      <li><a href="#concept-relationships"><div class="sidora-ui-text sidora-ui-link" style="float:right;margin: 3px 0 0 4px;">Links</div><i class="material-icons">compare_arrows</i></a></li>
    </ul>
    <div id="concept-meta">
      <div id="concept-meta-menu" class="sidora-menu">
        <div class="workbench-nav">
        </div>
      </div>
    </div>
    <div id="concept-resource-list" class="sidora-menu">
      <div id="concept-resource-list-internal"/>
        <div class="workbench-nav resource-menu-holder" style="display:none">
          <ul id="resource-menu">
            <li><a href="#" onclick="return false;">Resources</a>
              <ul id="resource-files-menu">
                <li id="delete-resource"><a href="#" onclick="return false;">Remove Selected</a>
              </ul>
            </li>
            <li><a href="#" onclick="return false;">Edit</a>
              <ul>
                <li><a href="#" onclick="return false;" id="edit-resource-metadata-menu" class="ui-state-disabled">Edit&nbsp;Metadata</a></li>
                <li><a href="#" onclick="return false;" id="edit-resource-datastream-menu" class="ui-state-disabled">Update&nbsp;Content</a></li>';
      if (sidora_is_admin()) $block['content'] .= '
                <li><a href="#" onclick="return false;" id="manage-resource" class="ui-state-disabled">Manage&nbsp;Resource</a></li>';
      $block['content'] .= '
              </ul>
            </li>
            <li><a href="#" onclick="return false;">View</a>
              <ul>
                <li><a href="#" onclick="return false;" id="view-resource-metadata" class="ui-state-disabled" style="display:none">View&nbsp;Metadata</a></li>
                <li><a href="#" onclick="return false;" id="resource-open-window" class="ui-state-disabled">Open&nbsp;in&nbsp;New&nbsp;Window</a></li>
                <li><a href="#" onclick="return false;" id="resource-download" class="ui-state-disabled">Download</a></li>
              </ul>
            </li>
          </ul>
        </div>
      </div>
    </div>
    <div id="concept-relationships">
      Folder Relationships
    </div>
  </div>';
      $block['content'] .= '</div>';//Comes fully from javascript
      break;
  }
  return $block;
  }catch(Exception $e) {
    // TODO BBB
    $block['content'] = 'Tuque down for block:'.$delta;
    watchdog("sidora",t('Tuque down:'. json_encode($e)));
    return $block;
  }
}


function sidora_block_content_concept_info() {
  return 'sidora_concept_info';
}

function sidora_block_content_individual_resource_info() {
  return 'sidora_individual_resource_info';
}

/*
 * Prints the sidora_ontology_json set in the SIdora configuration or the default.  Used by ajax calls to make the menu
 */
function sidora_ontology_object() {
  print variable_get('sidora_ontology_json',sidora_ontology_json_default());
  drupal_exit();
}

/*
 * Returns a hard-coded default for the resource ontology
 */
function sidora_ontology_json_default() {
    return '
   {
    "Project":{"description":"This folder is used to represent a project as a whole or some major subdivision of a project. In both cases it is where you can give a project a title, talk about who is involved, describe the work of the project in a general way, etc.","children":{},"model":"si:projectCModel","form":"Research Project"},
    "Actor":{
        "description":"",
        "children":{
        "Person":{"description":"The Person object is used to describe a person. It includes information about exist dates, full name, address, occupations and biographical information","children":{},"model":"si:projectCModel","form":"Person"},
        "Organization":{"description":"The Organization, Institution or Expedition content model is used to organize the folders relating to an Organization or Expedition.","children":{},"model":"si:projectCModel","form":"Organization"},
        "Expedition":{"description":"The Organization, Institution or Expedition content model is used to organize the folders relating to an Organization or Expedition.","children":{},"model":"si:projectCModel","form":"Expedition"}
        }
      },
    "Place":{
        "description":"",
        "children":{
        "General Place":{"description":"This folder is a general folder used to describe a place and includes very basic information such as place name, description, etc.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true},
        "Archaeological Site":{"description":"This folder describes a characteristics of an archaeological site or excavation including stratigraphy, location etc.","children":{},"model":"si:ctPlotCModel","form":"Archaeology Site"},
        "Research Site":{"description":"This folder describes a data set pertaining to a geographic area.","children":{},"model":"si:projectCModel","form":"Research Site or Area - Full Description", "disabled":true}

        }
      },
    "Built Environment":{"description":"This folder describes a man-made construction or landscape, such as a building, garden or facility of some kind.","children":{},"model":"si:projectCModel","form":"Research Project"},
    "Object or Entity":{
        "description":"",
        "children":{
        "Cultural Heritage Entity or Object":{"description":"The Cultural Heritage Entity or Object Folder can be used to describe Artifacts, works of Art, and human-built entities such as a fountain standing in a square etc. ","children":{},"model":"si:lidoCollectionCModel","form":"Cultural Heritage Entity or Object"},
        "Archaeological Feature":{"description":"This folder is used to describe an archaeological feature that is discovered as part of an excavation such as a tomb, a midden or a housing structure.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true}
        }
      },
    "Animal":{
        "description":"",
        "children":{
        "Species":{"description":"This folder is used to describe general characteristics of an animal species.","children":{},"model":"si:dwcCModel","form":"Animal Species or Specimen - Brief Description", "disabled":true},
        "Specimen":{"description":"This folder is used to describe general characteristics of an animal specimen used as part of a research project and includes the catalog number, scientific name and common name of a specific specimen.","children":{},"model":"si:dwcCModel","form":"Animal Species or Specimen - Brief Description"},
        "Component":{"description":"This folder is used to describe a specific body part or component of a specimen used as part of a researc project.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true}
        }
      },
    "Plant":{
        "description":"",
        "children":{
        "Species":{"description":"This folder is used to describe general characteristics of a plant species.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true},
        "Specimen":{"description":"This folder is used to describe general characteristics of an animal specimen used as part of a research project and includes the catalog number, scientific name and common name of a specific specimen.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true},
        "Component":{"description":"This folder is used to describe a specific body part or component of a specimen used as part of a research project.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true}

        }
      },
    "Deployment":{
        "description":"",
        "children":{
        "Instrument Deployment":{"description":"This folder describes an arbitrary instrument deployed to capture data.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true},
         "Camera Deployment":{"description":"The Camera Deployment folder describes the deployment of an camera that collect images automatically at a specific location for a specific period of time.","children":{},"model":"si:cameraTrapCModel","form":"Camera Trap Deployment"}
        }
      },
    "Collection":{
        "description":"",
        "children":{
        "General Collection":{"description":"This folder is used to describe a general grouping of items as part of a research project.  It includes at the very least a title and description.","children":{},"model":"si:projectCModel","form":"Research Project"},
        "Natural History Collection":{"description":"NCD (Natural Collections Description) folder capture information about collections of Natural History materials. The Natural Collections Description covers all types of collections of natural history material including specimens, original artwork, photographs, archives, published material or a mixture. Each record describes one entire collection, including information on the extent and purpose of the collection, conditions of access and use and who to contact for more information. ","children":{},"model":"si:projectCModel","form":"Research Project"},
        "Dataset":{"description":"This folder is used to describe the characteristics of set resources including the collector of the data and the reason the data was collected.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true}

        }
      },
    "Experiment":{"description":"This folder is used to describe the characteristics of a research experiment including the hypothesis, process steps, observations and conclusion of the experiment.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true},
    "Event":{"description":"This folder is used to describe a general event including a date, time and description of the significance of the event.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true},
    "Idea":{"description":"This folder is used to describe an idea or an organizing folder or theme pertaining to a research project.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true}
  }
  ';

}

/**
 * duplciates the object to the destination, returning an array like the following:
 * array( "error" => TRUE / FALSE, "description" => human readable description )
 * If the object to be duplicated has a hasResource or a hasConcept pointing to it from the destination,
 * Rename the Object to "Copy of <original name> from YYYY/MM/DD HH:Mi" or
 * $destination - pid to put the duplicates on
 * $to_duplicate - pid of the root of the tree (or resource pid) to duplicate
 *
 * Keep in mind that what sidora_copy does is what we currently call "link" to the user (was called copy prior to 0.6)
 *
 */

function sidora_duplicate($destination, $to_duplicate, $show_output = TRUE) {
  // Duplicate the later pids, link them onto the first pid
  $to_return = array("error" => TRUE, "description" => t('One or more pids were not set: destination, duplication root'));

  if (!empty($destination) && !empty($to_duplicate)) {
    // Check that we have permission to write to the destination and have no locks against it
    $pid = $destination;

    // Get the project spaces that we want to put the duplicates into
    $node = sidora_get_concept_node($pid);
    module_load_include('inc', 'sidora', 'includes/project_spaces');
    $group_nids = sidora_get_group_nids_membership($node->nid);
    $group_nodes = node_load_multiple($group_nids);
    $ps_groups = sidora_get_project_spaces_from_og_groups($group_nodes, NULL, FALSE);
    $project_space_pid = NULL;
    foreach($ps_groups as $i => $ps_group) {
      if (!empty($ps_group) && !empty($ps_group->field_fedora_pid)) {
        $project_space_pid = $ps_group->field_fedora_pid['und'][0]["safe_value"];
      }
    }
    // Just take the last pid, assume it's only one project space
    global $user;

    if (sidora_allow($user,$pid,'create')) {
      if (sidora_obtain_lock($pid)) {
        $duplicated_root = sidora_duplicate_tree_and_resources($to_duplicate, $project_space_pid);
        if ($duplicated_root === FALSE) {
           $to_return = array("error" => TRUE, "description" => t('Unable to duplicate these objects'));
        }
        else {
          $copy_return = sidora_copy($destination, $duplicated_root, FALSE);
          sidora_ajax_lock($pid, 'release', FALSE);
          if ($copy_return === TRUE) {

            // Rename the copy if needed:
            $parent_obj = sidora_obj($pid);
            $also_points_to_original = FALSE;
            $dup_obj = sidora_obj($duplicated_root);
            if (sidora_is_concept($dup_obj)) {
              $children_concepts = $parent_obj->relationships->get(FEDORA_RELS_EXT_URI, 'hasConcept');
              foreach($children_concepts as $child_rel) {
                $to_check_pid = $child_rel['object']['value'];
                if ($to_check_pid == $to_duplicate){
                  $also_points_to_original = TRUE;
                }
              }
            }
            else {
              $children_resources = $parent_obj->relationships->get(FEDORA_RELS_EXT_URI, 'hasResource');
              foreach($children_resources as $child_rel) {
                $to_check_pid = $child_rel['object']['value'];
                if ($to_check_pid == $to_duplicate){
                  $also_points_to_original = TRUE;
                }
              }
            }
            if ($also_points_to_original) {
              $original_label = $dup_obj->label;
              $new_label = 'Copy of ' . $original_label . ' from ' .  date('Y/m/d H:i');
              $dup_obj->label = $new_label;
              $sidora_data = sidora_get_form_and_dsid($duplicated_root);
              // rename within the metadata xml
              $dsid = $sidora_data['dsid'];
              $orig_xml = $dup_obj[$dsid]->content;
              $new_xml = str_replace('>' . $original_label . '<','>' . $new_label . '<', $orig_xml);
              $dup_obj[$dsid]->setContentFromString($new_xml);

            }
            else {
              $dup_obj->relationships->remove(SI_RELS_EXT_URI, 'isAdministeredBy');
              $dup_obj->relationships->add(SI_RELS_EXT_URI, 'isAdministeredBy', $pid);
            }
            $to_return = array("error" => FALSE, "description" => t('Objects duplicated to destination'));
          }
          else {
            $to_return = array("error" => TRUE, "description" => t('Problem linking to destination.'), 'internal_error' => $to_return['description']);
            watchdog("sidora",t('Created duplicates but they got orphaned, root: %root', array('%root' => $duplicated_root)));
          }
        }
      }
      else {
        $to_return = array("error" => TRUE, "description" => t('Pid locked'));
      }
    }
    else {
      $to_return = array("error" => TRUE, "description" => t('User does not have permission to create objects at destination'));
    }
    sidora_release_lock($pid);
  }
  if ($show_output) {
    print json_encode($to_return);
    drupal_exit();
  }
  else {
    return $to_return;
  }
}

/*
 * Catch all for ajax
 */
function sidora_ajax_parts($call_type, $param1 = '', $param2 = '', $param3 = '') {
  global $user;
  if ($call_type == 'administeredByTree'){
    $pid = $param1;
    if (sidora_allow(NULL, $pid, 'view')){
      print sidora_short_admin_by_tree($pid);
      drupal_exit();
    }
  }
  if ($call_type == 'create_ps' && sidora_is_admin()){
    module_load_include('inc', 'sidora', 'includes/project_spaces');
    module_load_include('inc', 'islandora', 'includes/utilities');
    if (empty($_GET['label']) || empty($_GET['desc'])){
      print 'Requires label and desc as GET params';
      drupal_exit();
    }
    if (!empty($_GET['user'])) {
      $user = user_load_by_name($_GET['user']);
      if ($user == null) {
        print 'User not found';
        drupal_exit();
      }
    }
    $label = $_GET['label'];
    $desc = $_GET['desc'];
    try{
      $created_node = sidora_create_personal_project_space($user, array('label' => $label, 'description' => $desc));
      if (!empty($created_node)) {
        // Load the information into the node from Fedora
        sidora_update_node_from_fedora($created_node);
        sidora_put_into_proper_project_space($created_node);
        $info = sidora_get_info($created_node, FALSE);
        echo $info['pid'];
      }
      else {
        print 'Could not create research space node';
        drupal_exit();
      }
      drupal_exit();
    }catch(Exception $e){
       echo $e->getTraceAsString();
       echo $e;
       exit();
    }
  }
  if ($call_type == 'transfer_ps'){
    module_load_include('inc', 'sidora', 'includes/project_spaces');
    $worked = sidora_transfer_project_space($param1, $param2);
    print '{"error":' . ($worked?"false":"true") . '}';
    drupal_exit();
  }
  if ($call_type == 'duplicate'){
    return sidora_duplicate($param1, $param2);
  }
  if ($call_type == 'research_spaces_tree') {
    module_load_include('inc', 'sidora', 'includes/project_spaces');
    if (!empty($param1)) {
      if (empty($_GET['create'])) {
        print sidora_project_spaces_tree("",TRUE, array("view"), TRUE, $param1);
      }
      else {
        print sidora_project_spaces_tree("",TRUE, array("create"), TRUE, $param1);
      }
    }
    else {
      if (empty($_GET['create'])) {
        print sidora_project_spaces_tree('Research Space Destinations:',FALSE, array("create"), TRUE);
      }
      else {
        print sidora_project_spaces_tree();
      }
    }
    drupal_exit();
  }
  if ($call_type == 'reprocess_incomplete_object_creation_forms') {
    sidora_reprocess_incomplete_object_creation_forms($param1);
    drupal_exit();
  }
  if ($call_type == 'create_and_set_new_user_object') {
    print sidora_create_and_set_new_user_object($user);
    drupal_exit();
  }
  if ($call_type == 'ontology') {
    return sidora_ontology_object();
  }
  if ($call_type == 'tree'){
    ini_set('max_execution_time',60);
    ini_set('memory_limit','512M');
    try{
      if (!empty($_GET['doFast'])) {
        $shtc = sidora_html_tree_cache($param1, $permission = 'view' , $param2);
        if (!empty($shtc)){
          print $shtc;
          drupal_exit();
        }
      }
      print sidora_html_tree_cache($param1, $permission = 'view' , $param2, sidora_html_tree_for_ajax($param1, $param2));
    }catch(PDOException $e) {
      // Sending two tree requests at the same time with a change in the tree that needs to be processed can
      // cause deadlocks, so wait a bit and retry
      sleep(3);
      print sidora_html_tree_cache($param1, $permission = 'view' , $param2, sidora_html_tree_for_ajax($param1, $param2));
    }
    drupal_exit();
  }
  if ($call_type == 'unassociate_delete_orphan') {
    return sidora_unassociate_delete_if_orphaned($param1,$param2);
  }
  if ($call_type == 'delete') {
    return sidora_json_for_delete($param1);
  }
  if ($call_type == 'copy') {
    return sidora_copy($param1,$param2);
  }
  if ($call_type == 'move') {
    return sidora_move($param1,$param2, $param3);
  }
  if ($call_type == 'unassociate') {
    return sidora_unassociate($param1, $param2);
  }
  if ($call_type == 'unassociate_with_note') {
    if (sidora_is_admin()){
      module_load_include('inc', 'sidora', 'includes/ps_migration');
      $note_added = sidora_migration_unassociate_add_note($param1, $param2, $param3);
      $to_return = sidora_unassociate($param1, $param2, FALSE);
      $to_return['note'] = $note_added;
      print json_encode($to_return);
      exit();
    }
    else {
      return '';  // No need to give back anything, shouldn't be called by non-admin
    }
  }
  if ($call_type == 'lock') {
    return sidora_ajax_lock($param1, $param2);
  }
  if ($call_type == 'delete_xsl_file') {
    module_load_include('inc', 'sidora', 'includes/xsl_handling');
    return sidora_remove_xsl($param1);
  }
  if ($call_type == 'generate_resource_list') {
     return sidora_generate_resource_list($param1);
  }
  if ($call_type == 'remove_file_from_upload_queue') {
    $current_instances_found = 0;
    $which_instance_to_remove = (empty($param2)) ? 0 : intval($param2);
    // There can be multiple files with the same name, if so, which instance is stored in the second param
    // (0 represents first instance)
    if ((array_key_exists('file_uploads', $_SESSION)) && (!empty($_SESSION['file_uploads']))) {
      foreach ($_SESSION['file_uploads'][$user->uid] as $index => $file_obj) {
        if (urldecode($file_obj->filename) == urldecode($param1)) {
          if ($which_instance_to_remove == $current_instances_found) {
            unset($_SESSION['file_uploads'][$user->uid][$index]);
            $_SESSION['file_uploads'][$user->uid] = array_values($_SESSION['file_uploads'][$user->uid]);
            print (json_encode($_SESSION));
            drupal_exit();
          }
          $current_instances_found++;
        }
      }
    }
  }
  if ($call_type == 'get_num_resource_children') {
    $pid = $param1;
    $tuque = islandora_get_tuque_connection();
    if ($tuque) {
      $query = sidora_generate_child_resource_pid_only_sparql_query($pid, array());
      $ri = $tuque->repository->ri;
      $results = $ri->sparqlQuery($query);
      print sizeof($results);
      drupal_exit();
    }
  }
  if ($call_type == 'check_concept_tree') {
    module_load_include('inc', 'sidora', 'includes/utils');
    $ajax_to_return = '';
    $object = sidora_obj($param1);
    if (empty($object)) {
      print 'refreshNode';
      drupal_exit();
    }
    if (!sidora_is_concept($object)) {
      print $ajax_to_return;
      drupal_exit();
    }
    $parents = sidora_get_parent_concepts($object);
    if ((sizeof($parents) < 1) || (!in_array($param2, $parents))) {
        $ajax_to_return = 'refreshNode';
    }
    print $ajax_to_return;
    drupal_exit();
  }
  if ($call_type == 'recent_changes') {
    $pids = sidora_recently_updated_since($param1);
    print implode($pids,', ');
    drupal_exit();
  }
  if ($call_type == 'server_minute') {
    print intval(time() / 60);
    drupal_exit();
  }
  if ($call_type == 'check_valid_pids') {
    global $user;
    // param1 is the parent pid which will need its cache cleared if any of the listed pids turn out bad
    // param2 is a comma separated pid list that the browser has listed as the children.
    // Any of these that the person does not have view access to should be considered invalid
    // If they have view access to it that means it exists and is valid
    // When permissions changes happen: only update the cache if it exists but they dont have view access
    $pids = array();
    if (isset($_POST['csv_pids'])) {
      $pids = explode(",",$_POST['csv_pids']);
    }
    else {
      $pids = explode(",",$param2);
    }
    $view_permissions = sidora_allow_batch($user, $pids,'view');
    $clear_parent = count($view_permissions['invalid']) > 0;
    if ($clear_parent) {
      sidora_clear_tree_cache($param1);
    }
    return drupal_json_output($view_permissions);
  }
  if ($call_type == 'check_user_setup') {
    module_load_include('inc', 'sidora', 'includes/utils');
    $root_pid = sidora_get_user_root_object();
    $root = sidora_obj($root_pid);
    if (empty($root)) {
      print '{ "root_is_valid":false }';
    }
    else {
      print '{ "root_is_valid":true }';
    }
    drupal_exit();
  }
  if ($call_type == 'details') {
    $pid = $param1;
    $obj = sidora_obj($pid);
    if (empty($obj)) return 'not found';
    // Sidora specific
    drupal_add_css(drupal_get_path('module','sidora') . '/css/workbench.css', array('weight' => 10000, 'group' => CSS_THEME));
    drupal_add_css(drupal_get_path('module','sidora') . '/css/iconfont/material-icons.css', array('weight' => 10000, 'group' => CSS_THEME));
    drupal_add_library('system','ui.tabs');
    $to_return = "<script>jQuery(document).ready(function(){
      jQuery('#branding, #toolbar').hide();
      jQuery('body').css('padding-top','0px');
      jQuery('#concept_tabs .choosable-tab').height(jQuery(window).height()-140);
      jQuery('#concept_tabs .choosable-tab').css('border-top','2px solid gray');
      jQuery('#concept_tabs').tabs();
      jQuery('#page').show();
    });</script>";
    $to_return .= '
  <div id="concept_tabs">
    <ul>
      <li><a href="#details-tab"><i class="material-icons">info</i><div class="sidora-ui-text sidora-ui-link" style="float:right;margin: 3px 0 0 4px;">Details</div></a></li>
      <li><a href="#links-tab"><i class="material-icons">panorama</i><div class="sidora-ui-text sidora-ui-link" style="float:right;margin: 3px 0 0 4px;">Links</div></a></li>
    </ul>';
    if (!empty($obj['TN'])){
      $to_return .= '
    <div id="details-tab" class="choosable-tab">
      <img src="'.$GLOBALS['base_url'].'/sidora/info/'.$obj->id.'/meta/TN/browser" style="max-width:190px"/>
      <iframe style="width:calc(100% - 236px);height:calc(100% - 67px);left:220px;position:absolute;" src="'.base_path().'sidora/info/'.$pid.'/meta/sidora_xsl_config_variable/browser/html"></iframe>
    </div>';
    }
    else {
      $to_return .= '
    <div id="details-tab" class="choosable-tab">
      <iframe style="width:calc(100% - 20px);height:calc(100% - 20px);" src="'.base_path().'sidora/info/'.$pid.'/meta/sidora_xsl_config_variable/browser/html"></iframe>
    </div>';
    }
    $to_return .= '<div id="links-tab" class="choosable-tab">';
    $to_return .= sidora_get_parent_table($pid);
    $to_return .= sidora_get_related_codebook_table($pid);
    $to_return .= '
    </div>
  </div>
    ';
    if (!empty($_GET['resq'])) {
      $prev = '';
      $next = '';
      $ppid = '';
      $resq = explode("\n", $_GET['resq']);
      if (sizeof($resq) == 4) {
        $ppid = empty($_GET['ppid'])?'':$_GET['ppid'];
        if (sidora_allow(NULL,$ppid)) {
          $pids = sidora_concept_resource_listing_pids_only($ppid, sidora_get_resource_types(), NULL, 0, $resq[0], $resq[1], $resq[2], $resq[3]);
          $location_in_array = array_search($pid, $pids);
          if ($location_in_array !== 0) {
            $prev = $pids[$location_in_array - 1];
          }
          if ($location_in_array !== sizeof($pids) - 1) {
            $next = $pids[$location_in_array + 1];
          }
        }
      }
      $to_return .= '<div style="width:100%;height:30px;text-align: right;padding-top: 10px;">';
      if (!empty($prev)) {
        $to_return .= '<a href="' . $GLOBALS['base_url'] . '/sidora/ajax_parts/details/' . $prev . '?resq=' . urlencode($_GET['resq']) . '&ppid=' . $ppid . '">';
      }
      $to_return .= '<input value="Prev" class="details-button form-submit sidora-form-button sidora-form-prev ' . (empty($prev)?'form-button-disabled':'') . '">';
      if (!empty($prev)) {
        $to_return .= '</a>';
      }
      if (!empty($next)) {
        $to_return .= '<a href="' . $GLOBALS['base_url'] . '/sidora/ajax_parts/details/' . $next . '?resq=' . urlencode($_GET['resq']) . '&ppid=' . $ppid . '">';
      }
      $to_return .= '<input value="Next" class="details-button form-submit sidora-form-button sidora-form-next ' . (empty($next)?'form-button-disabled':'') . '">';
      if (!empty($next)) {
        $to_return .= '</a>';
      }
      $to_return .= '</div>';
    }
    return $to_return;
  }
  if ($call_type == 'create_concept' || $call_type == 'create_resource') {
    $cr_type = 'concept';
    $cr_ui_output = 'folder';
    $cr_json = variable_get('sidora_ontology_json','');
    if ($call_type == 'create_resource') {
      $cr_ui_output = $cr_type = 'resource';
      $cr_json = variable_get('sidora_resource_ontology_json','');
    }
    drupal_add_library('system','ui.tooltip');
    drupal_add_css(drupal_get_path('module','sidora').'/css/sidora_create.css', array('weight' => 9000, 'group' => CSS_THEME));
    $pid = $param1;
    if (empty($pid)) {
      return t("New objects must have a parent, no parent found");
    }
    $to_return = 'Select type of ' . $cr_ui_output . ':';
    $to_return .= sidora_create_html_list_from_json($cr_json, $pid, $cr_type);
    $to_return .= '
<script>
jQuery(document).ready(function(){
  jQuery("body").css("padding-top", "0");
  var accordionsMenu = jQuery(\'.cd-accordion-menu\');
  if( accordionsMenu.length > 0 ) {
    accordionsMenu.each(function(){
      var accordion = jQuery(this);
      //detect change in the input[type="checkbox"] value
      accordion.on(\'change\', \'input[type="checkbox"]\', function(){
        var checkbox = jQuery(this);
        ( checkbox.prop(\'checked\') ) ? checkbox.siblings(\'ul\').attr(\'style\', \'display:none;\').slideDown(300) : checkbox.siblings(\'ul\').attr(\'style\', \'display:block;\').slideUp(300);
      });
    });
  }
  jQuery(document).tooltip();
});
</script>
';
    return $to_return;
  }
  if ($call_type == 'check_batch_status') {
    $request_id = $param1;
    $batch_id = $param2;
    $batch_done = 'false';
    $session_key = 'sidora_batch_request_'.$batch_id;
    $parent_pid = $_SESSION[$session_key]['Parent'];
    $batch_url = variable_get('sidora_batch_status_url', '') . '/' . $parent_pid . '/' . $request_id;
    $message = '';
    $db_message = array();
    $ingest_status = sidora_call_batch_API("GET",$batch_url);
    if (strpos($ingest_status,'<BatchDone>') !== false) {
      $xml_from_curl = new DOMDocument();
      $xml_from_curl->loadXML($ingest_status);
      $parent_pid_from_response = $xml_from_curl->getElementsByTagName('ParentPID');
      if (($parent_pid_from_response->item(0)->nodeValue == $parent_pid) && ($xml_from_curl->getElementsByTagName('CorrelationID')->item(0)->nodeValue == $request_id)) {
        $batch_count = $xml_from_curl->getElementsByTagName('ResourceCount')->item(0)->nodeValue;
        $batch_processed = $xml_from_curl->getElementsByTagName('ResourcesProcessed')->item(0)->nodeValue;
        $batch_done = $xml_from_curl->getElementsByTagName('BatchDone')->item(0)->nodeValue;
        if (($batch_done == 'true') || ($batch_count == $batch_processed)) {
          $resources_xml = $xml_from_curl->getElementsByTagName('resources')->item(0);
          $failed_filenames = array();
          $created_pids = 0;
          foreach ($resources_xml->childNodes as $resource_xml) {
            if ($resource_xml->nodeName == 'resource') {
              if ($resource_xml->getElementsByTagName('complete')->item(0)->nodeValue == 'false') {
                $failed_filenames[] = $resource_xml->getElementsByTagName('file')->item(0)->nodeValue;
                $db_message[] = array("Pid" => 'failed',"file" => $resource_xml->getElementsByTagName('file')->item(0)->nodeValue);
              }
              else {
                $created_pids++;
                $db_message[] = array("Pid" => $resource_xml->getElementsByTagName('pid')->item(0)->nodeValue,"file" => $resource_xml->getElementsByTagName('file')->item(0)->nodeValue);
             }
           }
         }
         if (!empty($failed_filenames)) {
           $message .= "Resource creation failed for the following files :" . "<br>" ;
           $ingest_filenames = db_query("select filenames from sidora_batch_ingest where batch_id = :batchid", array(':batchid' => $batch_id))->fetchField();
           $file_array = unserialize($ingest_filenames);
           foreach ($failed_filenames as $filename) {
             foreach ($file_array as $key => $value) {
               if ($value['ingest'] == $filename) {
                 $message .= $value['original'] . "<br>";
                 break;
               }
             }
           }
         }
         if ($created_pids > 0) {
           $res_type = db_query("select resource_type from sidora_batch_ingest where batch_id = :batchid", array(':batchid' => $batch_id))->fetchField();
           $message .= $created_pids . " new " . $res_type . " resources were created";
         }
        $update_query = db_update('sidora_batch_ingest')
         ->fields(array(
           'status' => serialize($db_message),
         ))
         ->condition('batch_id', $batch_id, '=');
        $num_updated = $update_query->execute();
        unset($_SESSION['sidora_batch_request_'.$batch_id]);
        print json_encode(array('status' => 'Batch complete', 'message' => $message, 'parent' => $parent_pid));
        drupal_exit();
     }
     else {
       if ($batch_processed < $batch_count) {
         $update_query = db_update('sidora_batch_ingest')
           ->fields(array(
            'status' => $batch_done . ' out of ' . $batch_count . ' resources processed',
           ))
           ->condition('batch_id', $batch_id, '=');
         $num_updated = $update_query->execute();
         if ($batch_processed > 0) {
           print json_encode(array('status' => 'processing', 'message' => $batch_processed . ' out of ' . $batch_count . ' resources processed'));
        }
        else {
           print json_encode(array('status' => 'processing', 'message' => 'This request is currently in queue for processing'));
        }
        drupal_exit();
      }
    }
  }
 }
 $res_count = db_query("select count from sidora_batch_ingest where batch_id = :batchid", array(':batchid' => $batch_id))->fetchField();
 print json_encode(array('status' => 'error', 'message' => 'Batch Status return ' . $ingest_status, 'parent' => $parent_pid, 'count' => $res_count));
 drupal_exit();
}

drupal_not_found();
}

function sidora_create_html_list_from_json($json, $parent_pid, $resource_or_concept) {
  $obj = json_decode($json, TRUE);
  $to_return = '<ul class="cd-accordion-menu animated">';
  foreach($obj as $name => $val) {
    $to_return .= sidora_create_html_li_from_obj($name, $val, $parent_pid, $resource_or_concept);
  }
  $to_return .= '</ul>';
  return $to_return;
}
function sidora_create_html_li_from_obj($name, $obj, $parent_pid, $resource_or_concept) {
  $li_classes = '';
  $inner_content = '';
  if (array_key_exists('children',$obj) && !empty($obj['children'])) {
    $li_classes = 'has-children';
    $inner_content = '<input type="checkbox" name="' . $name . '" id="' . $name . '">';
    $inner_content .= '<label for="' . $name . '">' . $name . '</label>';
    $inner_content .= '<ul>';
    foreach($obj['children'] as $child_name => $child_val) {
      $inner_content .= sidora_create_html_li_from_obj($child_name, $child_val, $parent_pid, $resource_or_concept);
    }
    $inner_content .= '</ul>';

  }
  else {
    if (!empty($obj['disabled']) && $obj['disabled']) {
      $li_classes = 'future-item';
      $inner_content = "<a>" . $name . "</a>";
    }
    else {
      $li_classes = 'current-item';
      $ontology =  array_key_exists('ontology-id',$obj)?$obj['ontology-id']:'no-ontology-id-set';
      $inner_content = "<a href='" . $GLOBALS['base_url'] . "/sidora/create_$resource_or_concept/$parent_pid/" . $obj['model'] . '/' . $obj['form'] . '/' . $ontology . "/fresh'>" . $name . "</a>";
    }
  }
  $to_return = '<li class="' . $li_classes . '" title="' . $obj['description'] . '">';
  $to_return .= $inner_content;
  $to_return .= '</li>';
  return $to_return;
}
/*
 * Determine if this batch of pids is valid or invalid for a specified permission for the specified user
 * Returns an array of the following information:
 * array (
 *  'valid' => array of pids that the user can perform that operation
 *  'invalid' => array of pids that the user cannot perform that operation
 * )
 */
function sidora_allow_batch($user, $pids = array(), $type_of_operation = 'view') {
  $to_return = array(
    'valid' => array(),
    'invalid' => array(),
  );
  if (!is_array($pids)) {
    return $to_return;
  }
  foreach ($pids as $pid) {
    if (sidora_allow($user, $pid, $type_of_operation)) {
      $to_return['valid'][] = $pid;
    }
    else
    {
      $to_return['invalid'][] = $pid;
    }
  }
  return $to_return;
}

/**
 * obtain/release/renew a lock on a pid
 * always for the currently logged in user
 *
 */
function sidora_ajax_lock($pid, $operation = 'obtain', $print_and_exit = TRUE) {
  if (variable_get('sidora_disable_locking_by_pid', '') == 1) {
    $to_print['error'] = false;
    $to_print['description'] = t('Pid locking is administratively disabled, no attempt at lock');
  }
  else {
    global $user;
    $to_print = array();
    $to_print['error'] = true;
    $to_print['description'] = t('The locking operation was never attempted');
    switch ($operation) {
      case "obtain":
        $clear_lock = false;
        $obtain_lock = true;
        break;
      case "release":
        $clear_lock = true;
        $obtain_lock = false;
        break;
      case "renew":
        $clear_lock = true;
        $obtain_lock = true;
        break;
      default:
        $clear_lock = false;
        $obtain_lock = false;
        $to_print['error'] = true;
        $to_print['description'] = t('Invalid lock action.  Lock actions are: obtain, release, or renew.');
    }
    if ($clear_lock || $obtain_lock) {
      $who_has_lock = sidora_pid_is_locked($pid);
      if (empty($who_has_lock)) $who_has_lock = '';
      $username = $user->name;
      // If a lock exists and the current user doesn't have the lock, they can't do any of these operations
      if (!empty($who_has_lock) && strtolower($who_has_lock) != strtolower($username)) {
        $to_print['error'] = true;
        $to_print['description'] = t('Another user has a lock on this object');
        if (sidora_is_admin($user)) {
          $to_print['admin_only'] = array();
          $to_print['admin_only']['lock_owner'] = $who_has_lock;
        }
      }
      else {
        $spsl = sidora_pid_set_locked($pid, '', $obtain_lock, $clear_lock);
        if (!empty($spsl)) {
          if (is_string($spsl) && strtolower($spsl) == strtolower($username)) {
            $to_print['error'] = false;
            $to_print['description'] = t('Current user has lock on desired pid');
          }
          else {
            $to_print['error'] = true;
            $to_print['description'] = t('Another user was granted a lock on this pid');
          }
        }
        else {
          // if user wanted to clear the lock this is the desired return
          if ($operation == 'release') {
            $to_print['error'] = false;
            $to_print['description'] = t('Pid was released by current user');
          }
          else {
            $to_print['error'] = true;
            $to_print['description'] = t('Could not set lock for pid, pid is not locked');
          }
        }
      }
    }
  }
  if ($print_and_exit) {
    print json_encode($to_print);
    drupal_exit();
  }
  else {
    return !$to_print['error'];
  }
}

/**
 * Does a copy then unassociate (equivalent to a move)
 * Copy requires read permission of the to be copied object pid
 * Copy requires update of the copy_to_id
 * Unassociate requires update of the move_from_id
 */
function sidora_move($move_from_id, $copy_to_id, $pid, $show_output = TRUE) {
  global $user;
  if (
       !sidora_allow($user, $pid, 'view') ||
       !sidora_allow($user, $copy_to_id, 'update') ||
       !sidora_allow($user, $move_from_id, 'update')
      ) {
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Logged in user does not have permissions for one or more of the following: update this folder's children, update the target folder's children, read access to the object to be moved.");
    $to_output['code'] = "sm1";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  // if the parent pids are locked, can't do it
  if (
       !sidora_obtain_lock($copy_to_id) ||
       !sidora_obtain_lock($move_from_id)
     ) {
    $to_output['error'] = TRUE;
    $to_output['description'] = t("One of the folders involved in this move have been locked by another user.");
    $to_output['code'] = "sm2";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  module_load_include('inc', 'sidora', 'includes/utils');
  $owning_pid = sidora_get_owning_parent_concept_pid_by_administered_pid($pid);

  $copied = sidora_copy($copy_to_id, $pid, FALSE);
  sidora_release_lock($copy_to_id);
  sidora_release_lock($move_from_id);
  if (($copied['error']) && ($copied['code'] != 'copy4')) {
    if ($show_output) {
      print json_encode($copied);
      drupal_exit();
    }
    else {
      return $copied;
    }
  }
  sidora_obtain_lock($copy_to_id);
  sidora_obtain_lock($move_from_id);

  // When perfoming a move of something from it's owning isAdministeredBy parent:
  //   Remove the relationship
  //   Do the copy & unassociate
  //   Attach the relationship to the pid where it was copied
  $object = sidora_obj($pid);
  // Repair broken isAdministeredBy by removing all isAdministeredBy
  $object->relationships->remove(SI_RELS_EXT_URI, 'isAdministeredBy');
  $object->relationships->add(SI_RELS_EXT_URI, 'isAdministeredBy', $copy_to_id);

  $unassociated = sidora_unassociate($move_from_id, $pid, FALSE);
  sidora_release_lock($copy_to_id);
  sidora_release_lock($move_from_id);
  module_load_include('inc', 'sidora', 'includes/project_spaces');
  sidora_put_into_proper_project_space($pid);
  if ($show_output) {
    print json_encode($unassociated);
    drupal_exit();
  }
  else {
    return $unassociated;
  }
}

/**
 * Return the codebook pids that have been associated with this item (hasCodebook)
 * DOES NOT CHECK IF THE OBJECTS EXIST FOR THE PIDS
 * Should only exist on tabular data objects
 */
function sidora_get_codebook_pids($pid) {
  $object = sidora_obj($pid);
  $to_return = array();
  if (!empty($object)) {
    $codebooks = $object->relationships->get(FEDORA_RELS_EXT_URI, 'hasCodebook');
    foreach ($codebooks as $codebook_info) {
      $to_return[] = ($codebook_info['object']['value']);
    }
  }
  return $to_return;
}

/**
 * Return the codebook objects that have been associated with this item (hasCodebook)
 * Should only exist on tabular data objects
 */
function sidora_get_codebooks($pid) {
  $object = sidora_obj($pid);
  $to_return = array();
  if (!empty($object)) {
    $codebooks = $object->relationships->get(FEDORA_RELS_EXT_URI, 'hasCodebook');
    foreach ($codebooks as $codebook_info) {
      $cb = sidora_obj($codebook_info['object']['value']);
      if (!empty($cb)) {
        $to_return[] = sidora_obj($codebook_info['object']['value']);
      }
      else {
        watchdog('sidora',t("%pid has invalid codebook %cbpid", array("%pid"=>$pid,"%cbpid"=>$codebook_info['object']['value'])));
      }
    }
  }
  return $to_return;
}

/**
 * Unassociates one object from another
 * returns TRUE or an array of this type: $to_output['description'] = t("Object not found in the repository");
 * Unassociate requires update of the move_from_id
 */
function sidora_unassociate($remove_from_pid, $pid_to_remove, $show_output = TRUE, $allow_orphan = FALSE) {
  // Setup:
  // A isAdministeredBy B
  // B hasConcept A
  // C hasConcept B
  // unassociate A from B:
  //   if A has no other parents: No because orphan
  //   if A has other parents: Need to ask if we can move the isAdministeredBy or simply not allow
  // Unknown what to do, in confluence for discussion, TBD TODO BBB

  global $user;
  if (
       !sidora_allow($user, $remove_from_pid, 'update')
      ) {
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Logged in user does not have permissions for: update this folder's children");
    $to_output['code'] = "su1";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  // if the parent pids are locked, can't do it
  if (
       !sidora_obtain_lock($remove_from_pid)
     ) {
    $to_output['error'] = TRUE;
    $to_output['description'] = t("The parent folder for the unassociate have been locked by another user.");
    $to_output['code'] = "su2";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  module_load_include('inc', 'sidora', 'includes/utils');
  $to_remove = sidora_obj($pid_to_remove);
  $parents = sidora_get_parent_concepts($to_remove);
  if (!$allow_orphan && sizeof($parents) < 2) {

  // Can't orphan it
    $to_output['error'] = TRUE;
    $to_output['description'] = t("There is only one parent folder for this object. Protecting the object from being an orphan.");
    $to_output['code'] = "su3";
    if ($show_output) {
      print json_encode($to_output); drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  module_load_include('inc', 'sidora', 'includes/utils');
  // determine if this is a resource or a concept
  $parent = sidora_obj($remove_from_pid);
  if (empty($parent) || empty($to_remove)) {
    sidora_release_lock($remove_from_pid);
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Object not found in the repository");
    $to_output['code'] = "una";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  $is_concept = sidora_is_concept($to_remove);
  $is_codebook = sidora_is_codebook($to_remove);
  if ($is_concept) {
    $parent->relationships->remove(FEDORA_RELS_EXT_URI, 'hasConcept', $pid_to_remove);
    $node_to_remove = sidora_get_update_or_create_concept_node($pid_to_remove);
    $parent_node = sidora_get_update_or_create_concept_node($remove_from_pid);
    if (!empty($node_to_remove) && !empty($parent_node)) {
      sidora_update_concept_node_remove_child($parent_node, $node_to_remove->nid);
    }
  }
  elseif ($is_codebook) {
    $parent->relationships->remove(FEDORA_RELS_EXT_URI, 'hasCodebook', $pid_to_remove);
  }
  else {
    $parent->relationships->remove(FEDORA_RELS_EXT_URI, 'hasResource', $pid_to_remove);
    // Update Drupal node of parent
    $parent_pid = $remove_from_pid;
    $parent_node = sidora_get_concept_node($parent_pid);
    sidora_update_concept_node_remove_child($parent_node);
    module_load_include('inc', 'sidora', 'includes/project_spaces');
    sidora_remove_old_codebook_associations_after_unassociating_resource_from_project_space($pid_to_remove);
  }
  sidora_clear_tree_cache($remove_from_pid);
  sidora_release_lock($remove_from_pid);
  $to_output['error'] = FALSE;
  $to_output['description'] = t("Object unassociated");
  $to_output['code'] = "una2";
  module_load_include('inc', 'sidora', 'includes/project_spaces');
  sidora_remove_from_incorrect_project_spaces($pid_to_remove);
  if ($show_output) {
    print json_encode($to_output);
    drupal_exit();
  }
  else {
    return $to_output;
  }
}

/**
 * Performs an unassociate from the input object and then checks to see if the unassociated object has any
 * remaining parents.  If there are no remaining parents, performs a delete on the object.
 * returns TRUE or an array of this type: $to_output['description'] = t("Object not found in the repository");
 */
function sidora_unassociate_delete_if_orphaned($remove_from_pid, $pid_to_remove, $show_output = TRUE) {
  //what to do about isAdministeredBy
  // Unknown what to do, in confluence for discussion, TBD TODO BBB
  global $user;
  if (
       !sidora_allow($user, $remove_from_pid, 'update') ||
       !sidora_allow($user, $pid_to_remove, 'delete')
      ) {
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Logged in user does not have permissions for one or more of the following: update this folder's children, delete the object when orphaned");
    $to_output['code'] = "udio1";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  // if the parent pids are locked, can't do it
  if (
       !sidora_obtain_lock($pid_to_remove)
     ) {
    $to_output['error'] = TRUE;
    $to_output['description'] = t("The pid to remove is locked by another user.");
    $to_output['code'] = "udio2";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  module_load_include('inc', 'sidora', 'includes/utils');
  $unassociated = sidora_unassociate($remove_from_pid, $pid_to_remove, FALSE, TRUE);
  if ($unassociated['error']) {
    if ($show_output) {
      print json_encode($unassociated);
      drupal_exit();
    }
    else {
      return $unassociated;
    }
  }
  try{
    $object = sidora_obj($pid_to_remove);
  }catch(Exception $exc) {
    sidora_release_lock($pid_to_remove);
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Object not found in the repository");
    $to_output['code'] = "udio";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  $parents = sidora_get_parent_concepts($object);
  if (sizeof($parents) == 0) {
    $delete_confirmation = sidora_json_for_delete($pid_to_remove, FALSE);
    sidora_release_lock($pid_to_remove);
    if ($show_output) {
      if ($delete_confirmation['error']) {
        $delete_confirmation['description'] .= ' - Unassocated from original, problem with delete';
        $delete_confirmation['code'] = 'udio1';
      }
      else {
        $delete_confirmation['description'] .= ' - Unassocated from original';
      }
      if (sidora_is_admin()) $delete_confirmation['pid'] = $pid_to_remove;
      // Don't give pid back to non-admins (XSS issue)
      print json_encode($delete_confirmation);
      drupal_exit();
    }
    else {
      return $delete_confirmation;
    }
    // delete will have it's own exit() if called with show_output = TRUE
  }

  sidora_release_lock($pid_to_remove);
  $to_output['error'] = FALSE;
  $to_output['description'] = t("Object not orphaned, unassociated from requested parent");
  if ($show_output) {
    print json_encode($to_output);
    drupal_exit();
  }
  else {
    return $to_output;
  }
}

/**
 * Performs a "copy", which is actually adding the relationship to the existing object to a new parent.
 * No new item gets created in Fedora Commons.
 * returns TRUE or an array of this type: $to_output['description'] = t("Object not found in the repository");
 */
function sidora_copy($copy_to_id, $pid, $show_output = TRUE) {
  global $user;
  if (
       !sidora_allow($user, $pid, 'view') ||
       !sidora_allow($user, $copy_to_id, 'update')
      ) {
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Logged in user does not have permissions for updating the target folder");
    $to_output['perm1'] = t("read: %up", array('%up' => sidora_allow($user, $pid, 'view')?"T":"F"));
    $to_output['perm2'] = t("update: %up", array('%up' => sidora_allow($user, $copy_to_id, 'update')?"T":"F"));
    $to_output['code'] = "sc1";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  // Can't put a link to itself
  if ($copy_to_id == $pid) {
    $to_output['error'] = TRUE;
    $to_output['description'] = t("An object is not allowed to link to itself");
    $to_output['code'] = "selfcopy";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  // if the parent pids are locked, can't do it
  if (
       !sidora_obtain_lock($copy_to_id)
     ) {
    $to_output['error'] = TRUE;
    $to_output['description'] = t("The target folder is locked by another user.");
    $to_output['code'] = "sc2";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  module_load_include('inc', 'sidora', 'includes/utils');
  // determine if this is a resource or a concept
  $to_output = array();
  $object = NULL;
  try{
    $copy_to = sidora_obj($copy_to_id);
    $object = sidora_obj($pid);
  }catch(Exception $exc) {
    sidora_release_lock($copy_to_id);
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Object not found in the repository");
    $to_output['code'] = "copy1";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  if (empty($object)) {
    sidora_release_lock($copy_to_id);
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Object not found in the repository");
    $to_output['code'] = "copy2";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  $is_concept = sidora_is_concept($object);
  $is_codebook = sidora_is_codebook($object);
  if ($is_concept) {
    $existing_rels = $copy_to->relationships->get(FEDORA_RELS_EXT_URI,'hasConcept',$pid);
    if (sizeof($existing_rels) > 0) {
      $to_output['error'] = TRUE;
      $to_output['description'] = t("Object already exists on target");
      $to_output['target'] = $copy_to->id;
      $to_output['payload'] = $pid;
      $to_output['code'] = 'copy3';
    }
    else {
      $copy_to->relationships->add(FEDORA_RELS_EXT_URI, 'hasConcept', $pid);
    }
  }
  elseif ($is_codebook) {
    // A resource cannot have multiple codebooks, this codebook overwrites the old one
    $copy_to->relationships->remove(FEDORA_RELS_EXT_URI, 'hasCodebook');
    $copy_to->relationships->add(FEDORA_RELS_EXT_URI, 'hasCodebook', $pid);
  }
  else {
    $existing_rels = $copy_to->relationships->get(FEDORA_RELS_EXT_URI,'hasResource',$pid);
    if (sizeof($existing_rels) > 0) {
      $to_output['error'] = TRUE;
      $to_output['description'] = t("Object already exists on target");
      $to_output['target'] = $copy_to->id;
      $to_output['payload'] = $pid;
      $to_output['code'] = 'copy4';
    }
    else {
      $copy_to->relationships->add(FEDORA_RELS_EXT_URI, 'hasResource', $pid);
    }
  }
  sidora_release_lock($copy_to_id);
  if (!empty($to_output)) {
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  // Update Drupal node of parent
  $child_node = sidora_get_concept_node($pid);
  if (!empty($child_node)) {
    $parent_pid = $copy_to_id;
    $parent_node = sidora_get_concept_node($parent_pid);
    sidora_update_concept_node_add_child($parent_node, $child_node->nid);
  }
  // If it's a tabular data, copy the codebook to the new project space
  // tabular data is a resource, don't bother unless we know its a resource
  if (!$is_concept && !$is_codebook) {
    module_load_include('inc', 'sidora', 'includes/project_spaces');
    sidora_maintain_codebooks_when_linking_resource_to_new_project_space($pid, $copy_to_id);
  }
  sidora_clear_tree_cache($copy_to_id);
  if ($show_output) {
    $to_output['error'] = FALSE;
    $to_output['description'] = t("Object linked");
    $to_output['code'] = 'copy5';
    print json_encode($to_output);
    drupal_exit();
  }
  else {
    return TRUE;
  }
}

/**
 * Attempts to mark a pid for deletion
 * $pid - the pid to mark
 * $show_output - whether to print (TRUE) the object as JSON or to return the object from this call
 * returns either an array of this type:   $to_output = array('error'=>TRUE,'description'=>t('Unknown Error'));
 *   or drupal_exit if $show_output == TRUE
 **/
function sidora_json_for_delete($pid, $show_output = TRUE) {
  global $user;
  if ($show_output) header('Content-Type: application/json');
  $object = sidora_obj($pid);
  if (!sidora_allow($user,$pid,'delete')){
    $to_output['error'] = TRUE;
    $to_output['description'] = t("The logged in user does not have delete permissions for this object.");
    $to_output['code'] = "sjfd0";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  module_load_include('inc', 'sidora', 'includes/utils');
  $to_output = array('error'=>TRUE,'description'=>t('Unknown Error'));

  // determine if this is a resource or a concept
  if (empty($object)) {
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Object not found in the repository");
    $to_output['code'] = "sjfd2";
    if ($show_output) {
      print json_encode($to_output);
      drupal_exit();
    }
    else {
      return $to_output;
    }
  }
  $is_concept = sidora_is_concept($object);
  $is_codebook = sidora_is_codebook($object);
  if ($is_concept) {
    // Here we would also theoretically check isAdministeredBy to see if something is pointing to the object to be deleted
    // However, this should be unnecessary since there should be a hasConcept or hasResource pointing to its children
    $children_concepts = $object->relationships->get(FEDORA_RELS_EXT_URI, 'hasConcept');
    $children_resources = $object->relationships->get(FEDORA_RELS_EXT_URI, 'hasResource');
    $children_codebooks = $object->relationships->get(FEDORA_RELS_EXT_URI, 'hasCodebook');
    $child_count = count($children_concepts) + count($children_resources) + count($children_codebooks);
    if ($child_count > 0) {
      $to_output['error'] = TRUE;
      $to_output['description'] = t("Cannot delete object with children.  It has @children_count folder(s) and @resource_count resource(s).",
         array('@children_count'=> count($children_concepts), '@resource_count' => count($children_resources)));
      if ($show_output) {
        print json_encode($to_output);
        drupal_exit();
      }
      else {
        return $to_output;
      }
    }
  }

  // Set it to deleted and remove the links to it from its parents
  $parents = sidora_get_parent_concepts($object);
  $node = sidora_get_update_or_create_concept_node($pid);
  foreach($parents as $parent_pid => $parent){
    $parent_obj = sidora_obj($parent_pid);
    if ($is_concept) {
      $removal_return = $parent_obj->relationships->remove(FEDORA_RELS_EXT_URI,'hasConcept',$object);
      $parent_node = sidora_get_update_or_create_concept_node($parent_pid);
      if (!empty($parent_node)) {
        sidora_update_concept_node_remove_child($parent_node, $node->nid);
      }
    }
    elseif ($is_codebook) {
      $removal_return = $parent_obj->relationships->remove(FEDORA_RELS_EXT_URI,'hasCodebook',$object);
      $removal_return = $parent_obj->relationships->remove(FEDORA_RELS_EXT_URI,'managesCodebook',$object);
    }
    else {
      $removal_return = $parent_obj->relationships->remove(FEDORA_RELS_EXT_URI,'hasResource',$object);
    }
  }
  $delete_status = $object->delete(); //Sets object's state to 'D', but it still exists in Fedora (not purged)

  // If it has a node, delete the node and remove it from the parent
  if (!empty($node)) {
    node_delete($node->nid);
  }

  $to_output['description'] = t("Object deleted");
  $to_output['error'] = FALSE;
  if ($show_output) {
    print json_encode($to_output);
    drupal_exit();
  }
  else {
    return $to_output;
  }
}


/*
 * Prints a html tree for replacing the existing tree
 * Currently assumes everyone has full read access
 */
function sidora_html_tree_for_ajax($root_pid = '', $num_levels = 2, $url_params = ''){
  module_load_include('inc', 'sidora', 'includes/utils');
  if (empty($root_pid)) $root_pid = sidora_get_user_root_object();
  if ($root_pid == 'rs_tree') {
    module_load_include('inc', 'sidora', 'includes/project_spaces');
    return sidora_project_spaces_tree("", TRUE,  array("create","view","update","delete"), FALSE, 2);
  }
  else {
    return sidora_html_tree_from_given_pid($root_pid, NULL, $num_levels, $url_params);
  }
}

/*
 * Returns a html_string for the concept tree
 */
function sidora_html_tree_from_given_pid($root_pid = '', $root = NULL, $num_levels = 2, $url_params = ''){
  global $user;
  module_load_include('inc', 'sidora', 'includes/utils');
  //$expected_num_child_concepts = empty($_GET['expected_child_concepts'])?0:filter_var($_GET['expected_child_concepts'], FILTER_SANITIZE_NUMBER_INT);
  if (empty($root_pid)) $root_pid = sidora_get_user_root_object();
  // In some circumstances, a user could get here without their root set up.  Create it now.
  if (empty($root_pid)) {
    sidora_user_initialize($user);
    $root_pid = sidora_get_user_root_object();
  }
  else {
    if (empty($root)) {
      $root = sidora_obj($root_pid);
    }
    $root_label = '';
    $root_suffix = '';
    if (empty($root)) {
       $root_label = t('Invalid object set as root');
       $description = t('Invalid object set as root: %root_pid for user: %user_name %uid',
         array('%root_pid' => $root_pid, '%user_name' => $user->name, '%uid' => $user->uid));
       sidora_add_fedora_assumption_problem_other($description);
    }
    else{
      $root_label = $root->label;
      $children_resources = $root->relationships->get(FEDORA_RELS_EXT_URI, 'hasResource');
    }
    if (!empty($children_resources)) {
      $root_suffix = " (" . sizeof($children_resources) . ")";
    }
    $filled = sidora_build_tree_from_nodes_by_pid($root_pid, $num_levels);

    if (empty($filled[0])) {
      return 'Invalid';
    }
    $filled = $filled[0]['children'];
  }
  /* */
  $html_tree_from_query_result = sidora_html_tree_from_query_results_tree($filled, $root_pid, $num_levels, $url_params, 'a', TRUE, array("create","view","update","delete"), $root_pid);
  $html_escaped_name = htmlspecialchars($root_label);
  $to_return = '';
  $to_return .= '<ul>';
  $to_return .= '<li>';
  $to_return .= '<a ';
  $to_return .= 'href="'.base_path().'sidora/workbench/' . $url_params . '#'.$root_pid.'" pid="'.$root_pid.'" fullname="'.$html_escaped_name.'"';
  // Count concept children
  $cr = _sidora_get_child_results_cache($root_pid);
  $to_return .= ' conceptchildren="'.sizeof($cr).'"';
  $to_return .= ' rspids="' . implode(' ', sidora_get_project_space_pids_for_pid($root_pid)) . '"';
  $info = sidora_get_info($root_pid);
  $node_wrapper = entity_metadata_wrapper('node', $info['node']);
  $to_return .= ' resourcechildren="'.$node_wrapper->field_sidora_resource_child_coun->value().'"';
  $to_return .= " owner='" . $info['obj']->owner . "'";
  if (!empty($info['node']->field_thumbnail)) {
    $to_return .= ' thumbnail_info="' . file_create_url($info['node']->field_thumbnail['und'][0]['uri']) . '"';
    $root_label = '<div class="concept-thumbnail"><img src="' .  file_create_url($info['node']->field_thumbnail['und'][0]['uri']) . '"/></div>' . $root_label;
  }
  $to_return .= '>';
  $to_return .= $root_label . $root_suffix;
  $to_return .= '</a>';
  // $to_return .= '<' . $dom_type . $href . ' pid="' . $pid . '" fullname="' . $html_escaped_name . '"
  // conceptchildren="' . count($t_element['children']) . '
  // " resourcechildren="' . $resource_children_num . '"
  // class="' . $all_classes . '"
  // permissions="' . $permissions . '"' .
  // $nid_info .
  // $owner_info .
  // $thumbnail_info . '>';
  $to_return .= '<ul>';
  $to_return .= $html_tree_from_query_result;
  $to_return .= '</ul></li></ul>';
  return $to_return;
}

/*
 * The content for the navigation block
 */
function sidora_block_content_navigation() {
  module_load_include('inc', 'sidora', 'includes/utils');
  $root_pid = sidora_get_user_root_object();
  $send_params = '';
  if (!empty($_GET['nr'])){
    $root_pid = $_GET['nr'];
    $send_params = "?nr=" . $root_pid;
  }
  /*
  $results = _sidora_get_child_results_cache($root_pid);
  $root_children_pids = array();
  $filled = sidora_fill_concepts_children($results, array(), $root_children_pids);
  */
  module_load_include('inc', 'sidora', 'includes/sidora_nodes');
  $filled = sidora_build_tree_from_nodes_by_pid($root_pid);
  if (!empty($filled[0])) {
    $filled = $filled[0]['children'];
  }
  /* */
  $html_tree_from_query_result = sidora_html_tree_from_query_results_tree($filled);
  $to_return = '<div style="float:left;width:200px;">';
  $to_return .= '<div id="concept-create-menu">';
  $to_return .= '</div>';
  $to_return .= '<div id="forjstree" root_pid="'.$root_pid.'">';
  module_load_include('inc', 'sidora', 'includes/project_spaces');
  if (sidora_is_admin()) {
    $extra_admin_part = sidora_html_tree_from_given_pid($root_pid, NULL, 2, $send_params);
    $to_return .= sidora_project_spaces_tree($extra_admin_part, TRUE, array(), FALSE);
  }
  else {
    $nodes = sidora_get_project_spaces_by_member();
    // if a user ever logs in with all accesses revoked, create a personal space for them
    if (empty($nodes)) {
      sidora_create_personal_project_space();
    }
    $to_return .= sidora_project_spaces_tree("", TRUE,  array("create","view","update","delete"), FALSE);
  }
  $to_return .= '</div></div>';
  // jQuery UI L&F
  drupal_add_css(drupal_get_path('module','sidora').'/css/themes/smoothness/jquery-ui.min.css');
  // jsTree lib
  $jstree_loc = variable_get('sidora_js_lib_location_jstree', '');
  drupal_add_css(drupal_get_path('module','sidora') . '/css/jstree_custom/style.min.css', array('weight' => 9000, 'group' => CSS_THEME));
  drupal_add_js($jstree_loc . 'jstree.js');
  // right-click menu lib
  drupal_add_js(drupal_get_path('module','sidora') . '/js/dist/jquery.ui.position.min.js');
  drupal_add_js(drupal_get_path('module','sidora') . '/js/dist/jquery.contextMenu.js');
  drupal_add_css(drupal_get_path('module','sidora') . '/js/dist/jquery.contextMenu.css');
  // dataTables lib
  $datatables_loc =  variable_get('sidora_dataTables_location','');
  drupal_add_js($datatables_loc . 'js/jquery.dataTables.min.js');
  drupal_add_css($datatables_loc . 'css/jquery.dataTables.css', array('type' => 'external'));
  drupal_add_js(drupal_get_path('module','sidora') . '/js/pipeline.js');
  // Pipeline is non-standard

  // Sidora specific
  drupal_add_css(drupal_get_path('module','sidora') . '/css/workbench.css', array('weight' => 10000, 'group' => CSS_THEME));
  drupal_add_css(drupal_get_path('module','sidora') . '/css/iconfont/material-icons.css', array('weight' => 10000, 'group' => CSS_THEME));
  // Some of the icons we use are from islandora xml forms, inform Javascript where to get those
  drupal_add_js(array('islandora_xml_forms' => array('basepath' => '/' . drupal_get_path('module','xml_forms') . '/')), 'setting');
  drupal_add_js(array('site_admin_email' => variable_get('site_admin_email_to', '')), 'setting');
  drupal_add_js(drupal_get_path('module','sidora') . '/js/workbench_sidora_queue.js');
  drupal_add_js(drupal_get_path('module','sidora') . '/js/workbench_util.js');
  drupal_add_js(drupal_get_path('module','sidora') . '/js/workbench.js');
  drupal_add_js(drupal_get_path('module','sidora') . '/js/workbench_menus.js');
  drupal_add_js(drupal_get_path('module','sidora') . '/js/workbench_sidora_request.js');
  drupal_add_js(drupal_get_path('module','sidora') . '/js/paging.js');
  // adds paging capability to resources
  return $to_return;
}

/*
 * Attempts to find associations for the object being created to store in the step list for islandora
 * This is the function that allows us to skip the "Choose Form" step that existed in the workbench 0.3
 * This is needed when a model has multiple forms associated with it.  Islandora on its own will have
 * the user choose one of the associated forms.
 * In SIdora that is already chosen for them:
 *   When they select the resource in the "Add new resource" the form is already in the menu
 *   When they Edit Metadata, the original form name is stored in the SIDORA datastream
 */
function sidora_find_association(array &$form_state, $form_build_id = '') {
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);

  // If we got here without the proper creation data, don't bother trying to find an association
  if (empty($shared_storage)) return NULL;
  if (!array_key_exists('models',$shared_storage)) return NULL;
  if (empty($shared_storage['models'])) return NULL;

  $associations = xml_form_builder_get_associations(array(), $shared_storage['models'], array());
  // ... Find the association you want to use, iterate over the values and
  // choose the one you want.
  $form_name = drupal_static('form_of_interest');
  if (empty($form_name)) {
    $cache =  cache_get("sidora:form_id_to_creation_info");
    $my_data = $cache->data;
    if (empty($my_data[$form_build_id])) return null;
    // If we don't have this form in the cache
    $my_info = $my_data[$form_build_id];
    $form_name = $my_info['form'];
  }
  $association = NULL;
  foreach ($associations as $curr_association) {
    if ($curr_association['form_name'] == $form_name) {
      $association = $curr_association;
    }
  }
  return $association;
}

/*
 * This is the hook_islandora_ingest_steps_alter that performs the bypass mentioned in the comment of
 * sidora_find_association
 */
function sidora_islandora_ingest_steps_alter(array &$steps, array &$form_state) {
  $association = sidora_find_association($form_state);
  if (!empty($association)) {
    $association_step_storage = &islandora_ingest_form_get_step_storage($form_state, 'xml_form_builder_metadata_step');
    // Make $association_step_storage have only the association you want to use.
    $association_step_storage['association'] = $association;
    // Remove the selection step as we've already forced it's value above.
    unset($steps['xml_form_builder_association_step']);
    if (!empty($steps['xml_form_builder_metadata_step'])) {
      $steps['xml_form_builder_metadata_step']['args'][0] = $association;
    }
  }
}

/*
 * Print the html & js for plupload
 */
function sidora_get_plupload_html($elements, $button_text = 'Browse'){
  global $user;
  $plupload_loc = variable_get('sidora_js_lib_location_plupload', '');
  drupal_add_js($plupload_loc . 'plupload.full.min.js');
  drupal_add_js($plupload_loc . 'jquery.ui.plupload/jquery.ui.plupload.js');
  drupal_add_css($plupload_loc . 'jquery.ui.plupload/css/jquery.ui.plupload.css', array('type' => 'external'));
  drupal_add_css(drupal_get_path('module', 'sidora') . '/css/themes/smoothness/jquery-ui.min.css',array('weight' => '1000000', 'group' => CSS_THEME));
  $path_for_remove_icon = base_path() . drupal_get_path('module', 'xml_forms') . '/elements/images/';
  $multi_selection = 'true';
  $drag_and_drop = 'true';
  //if ((strpos(strtoupper($button_text),"OBJ") !== FALSE) || ($elements['#extensions'][0] == '*')) {
  if (strpos(strtoupper($button_text),"OBJ") !== FALSE) {
    $multi_selection = 'false';
    $drag_and_drop = 'false';
    $button_text = 'Browse';
  }
  ob_start();
  if ($multi_selection == 'true') {
    print '
  <div class="plupload_wrapper"><div class="ui-widget-content plupload_container" id="create-resource-upload_container">
  <table class="plupload_filelist plupload_filelist_header ui-widget-header"><tr>
  <td class="plupload_cell plupload_file_name">Filename</td>
  <td class="plupload_cell plupload_file_size">Size</td>
  <td class="plupload_cell plupload_file_status">Status</td>
  <td class="plupload_cell plupload_file_action">&nbsp;</td>
  </tr></table>';
   print '<div class="plupload_content plupload_drop plupload_dropbox" id="create-resource-upload_dropbox" style="top:28px;bottom:3px;"><div class="plupload_droptext" id="plupload_droptext">Drag Files here</div>';
  }
  print '
  <ul class="plupload_filelist_content" id="create-resource-upload_filelist" unselectable="on" style="margin:0px;">';
  print '</ul>';
  if ($multi_selection == 'true') {
    print '</div></div></div>';
  }
  print '
  <div id="container" class="-uploader">
  <button class="islandora-repo-button" id="pickfiles" href="javascript:;">'.$button_text.'</button>
  <a id="uploadfiles" style="display:none;" href="javascript:;">[Browse]</a>
  </div>
  <br />
  <pre id="console"></pre>';
  print '
 <script type="text/javascript">
  function loadjscssfile(filename, filetype){
   if (filetype=="js"){ //if filename is a external JavaScript file
    var fileref=document.createElement("script")
    fileref.setAttribute("type","text/javascript")
    fileref.setAttribute("src", filename)
   }
   else if (filetype=="css"){ //if filename is an external CSS file
    var fileref=document.createElement("link")
    fileref.setAttribute("rel", "stylesheet")
    fileref.setAttribute("type", "text/css")
    fileref.setAttribute("href", filename)
   }
   if (typeof fileref!="undefined")
    document.getElementsByTagName("head")[0].appendChild(fileref)
  }
  runtimesBrowserSpecific = "html5,flash,html4";
  //runtimesBrowserSpecific = "flash,html5,html4";
  if (navigator.userAgent.match(/(Firefox)/i) != null){
    //Firefox gets weird with the flash version between http and https, sometimes http doesnt work
    runtimesBrowserSpecific = "html5,html4";
  }';
              if ($elements['#extensions'][0] == '*') {
// Need to change the error message from max_file_size, so add our own instead of using theirs
                print "
plupload.addFileFilter('sidora_max_file_size', function(maxSize, file, cb) {
  var undef;

  // Invalid file size
  if (file.size !== undef && maxSize && file.size > maxSize) {
    this.trigger('Error', {
      code : plupload.FILE_SIZE_ERROR,
      message : plupload.translate('File is too large.'),
      file : file
    });
    cb(false);
  } else {
    cb(true);
  }
});
";
                print '
  plupload.addFileFilter("information_extensions", function(filter, file, cb){
    var self = this;
    var mimeTypes = this.settings.filters.information_extensions[0];
    Object.keys(mimeTypes).forEach(function(key){
      var exts = mimeTypes[key].split(",");
      if(exts.length === 1 && exts[0] === "-")
         permitted = true;
      else
      {
        for(var i = 0; i < exts.length; i++) {
          var fileArray = file.name.split(".");
          var extension = fileArray[fileArray.length - 1];
          if(exts[i].toUpperCase() === extension.toUpperCase()) {
            jQuery("#console").append("\\nConsider uploading \'" + file.name + "\' using the type \'" + key + "\' instead of uploading as \'Generic\' type. Close this window to upload as a new type.");
          }
        }
      }
    });
    cb(true);
  });';
        }
              print '
  window.uploader = new plupload.Uploader({
    runtimes : runtimesBrowserSpecific, //No silverlight - gets bad if user does not allow it and it tries to use.
    browse_button : "pickfiles", // you can pass in id...
    container : document.getElementById("container"),'; // ... or DOM Element itself
    //if (($drag_and_drop == 'false') || ($elements['#extensions'][0] == '*')) {
    if ($drag_and_drop == 'false') {
      print '
              max_files : "1",';
    }
    print '
     dragdrop : ';
     print $drag_and_drop;
     print ',';
    if ($drag_and_drop == 'true') {
     print '
    drop_element : "create-resource-upload_dropbox",';
    }
    print '
    button_browse_hover : true,
    chunk_size: "900kb",
    multi_selection: ';
    print $multi_selection;
    print ',
     url : "';
  print base_path();
  print 'sidora/upload/';
  print $user->uid;
  print '"';

  //print '+jQuery("#content-model-viewer-ingest-resource-metadata-form").find("input[name=form_build_id]").val()';
  print ',
    flash_swf_url : "';
  print $plupload_loc;
  print 'Moxie.swf",
    silverlight_xap_url : "';
  print $plupload_loc;
  print 'Moxie.xap",

    filters : {
      information_extensions : [{
        "Basic Image" : "jpg,png,gif,tiff,tif,jp2,raw,nef,dng",
        "Tabular Dataset" : "csv,xlsx,xls",
        "PDF Text" : "pdf",
        "Basic Audio" : "mp3,aiff,wav",
        "Basic Video" : "ogg,mp4,mov,qt,m4a,m4v,avi,mkv",
        "Raw Sequence" : "xml",
        "Assembled Sequence" : "fastq,fq,fasta,fa,fas,fsn,fna,faa"
      }],
      sidora_max_file_size : 1073741824, //= 1GB, 5368709120 = 5GB
      mime_types: [
        {title : "';
  print implode(",",$elements['#extensions']) . ' files';
  print '", extensions : "';
  print implode(",",$elements['#extensions']);
  print '"}
      ]
    },
    preinit : {
        Init: function(up, info) {
          if(!!FileReader && !((info["runtime"] == "flash") || (info["runtime"] == "silverlight"))){
            jQuery(".plupload_droptext").css( "display", "inline !important");
          }else{
            jQuery(".plupload_droptext").css( "display", "none !important");
          }
          },
    },
    init: {
      PostInit: function() {
        if (typeof(sidoraUploaderPostInit) == "function"){ sidoraUploaderPostInit(); }
        document.getElementById("uploadfiles").onclick = function() {
          uploader.start();
          return false;
        };
        if (uploader.files.length == "0"){
         jQuery("#Next").attr("disabled", true).addClass("form-button-disabled");
         jQuery("#applyBatch").attr("disabled", true).addClass("form-button-disabled");
               jQuery(".form-submit").attr("disabled",true).addClass("form-button-disabled");
        }
      },
      Browse: function(up) {
         // Called when file picker is clicked
        if (jQuery("#Next").length > 0)
          document.getElementById("Next").disabled=true;
        jQuery("#Next").addClass("form-button-disabled");
        if (jQuery("#applyBatch").length > 0)
          document.getElementById("applyBatch").disabled=true;
        jQuery("#applyBatch").addClass("form-button-disabled");

      },
      FilesAdded: function(up, files) {
        if (typeof(sidoraUploaderFilesAdded) == "function"){ sidoraUploaderFilesAdded(up,files); }
        if ((typeof up.settings.max_files !== "undefined") && (up.settings.max_files !== null) && (up.files.length >= up.settings.max_files)) {
          up.splice(up.settings.max_files);
                if (files.length > (up.settings.max_files - up.total.uploaded)) files.splice((up.settings.max_files - up.total.uploaded),(files.length - (up.settings.max_files - up.total.uploaded)));
                jQuery(up.settings.browse_button).attr("disabled", true).addClass("form-button-disabled");
        }
        if (jQuery("#Next").length > 0)
          document.getElementById("Next").disabled=true;
        jQuery("#Next").addClass("form-button-disabled");
        if (jQuery("#applyBatch").length > 0)
          document.getElementById("applyBatch").disabled=true;
          jQuery("#applyBatch").addClass("form-button-disabled");
          plupload.each(files, function(file) {
                var item = jQuery("<li class=\"plupload_view_list plupload_file ui-state-default plupload_file_loading plupload_delete\"></li>");
          item.attr("id",file.id);
          item.html("<div class=\"plupload_file_name\">"+file.name + "</div><div class=\"plupload_file_size\" style=\"width:100px;\">" + plupload.formatSize(file.size) + "   <b></b></div>" + "<div class=\"plupload_file_action\"><a class=\'remove-file-btn\' href=\'\'><img src=\'' . $path_for_remove_icon . 'minus_small.png\'/></a></div>");
          jQuery("#create-resource-upload_filelist").append(item);
          jQuery("#" + file.id + " .remove-file-btn").first().click(function(event) {
            event.preventDefault();
            up.removeFile(file);
            jQuery("#" + file.id).remove();
            var toDelete = file.name;
            if (up.files.length == "0") jQuery("#Next").attr("disabled", true).addClass("form-button-disabled");
            if (up.files.length == "0") jQuery("#applyBatch").attr("disabled", true).addClass("form-button-disabled");
              jQuery(up.settings.browse_button).attr("disabled", false).removeClass("form-button-disabled");
            console.log(toDelete);';
            //TBD TODO Put in a check here to remove the correct file when multiple files have same filename

print  '
            var url = Drupal.settings.basePath+"sidora/ajax_parts/remove_file_from_upload_queue/"+toDelete;
            jQuery.ajax ({
              type: "POST",
              url: url,
              done: function(msg){
                console.log("Return from ajax delete"+msg);
              },
              dataType: "text"
            });
          });
        });
        if ((typeof up.settings.max_files == "undefined") || (up.settings.max_files == null) || (up.files.length <= up.settings.max_files)) uploader.start();
      },
      UploadProgress: function(up, file) {
        document.getElementById(file.id).getElementsByTagName("b")[0].innerHTML = "<span>" + file.percent + "%</span>";
      },
      Error: function(up, err) {
        document.getElementById("console").innerHTML += "\n" + err.file.name + ": " + err.message;
        if (err.code == -601) document.getElementById("console").innerHTML += "  Usable extensions are:';
  print implode(",",$elements['#extensions']);
  print '";
                                          },
      UploadComplete: function(up,files){
        if (typeof(sidoraUploadComplete) == "function"){ sidoraUploadComplete(up,files); }
        if (jQuery("#Next").length > 0)
          document.getElementById("Next").disabled=false;
        jQuery("#Next").removeClass("form-button-disabled");
        if (jQuery("#applyBatch").length > 0)
          document.getElementById("applyBatch").disabled=false;
        jQuery("#applyBatch").removeClass("form-button-disabled");
        jQuery(".form-submit").attr("disabled",false).removeClass("form-button-disabled");
      }
    }
  });
  uploader.bind("Init", function(up, info){
    if(!!FileReader && !((info["runtime"] == "flash") || (info["runtime"] == "silverlight"))){
      jQuery("#plupload_droptext").show();
    }else{
      jQuery("#plupload_droptext").hide();
    }
  });
  uploader.init();
 </script>
  ';
  $result = ob_get_clean();
  return $result;

}

/*
 * To be used by the pluploader itself, not to be called directly from a user
 */
function sidora_upload($form_id) {
  global $user;

//upload for plupload
// Make sure file is not cached (as it happens for example on iOS devices)
header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
header("Cache-Control: no-store, no-cache, must-revalidate");
header("Cache-Control: post-check=0, pre-check=0", false);
header("Pragma: no-cache");

/*
// Support CORS
header("Access-Control-Allow-Origin: *");
// other CORS headers if any...
if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {
  exit;
  // finish preflight CORS requests here
}

*/

// 5 minutes execution time
@set_time_limit(5 * 60);

// Uncomment this one to fake upload time
// usleep(5000);

// Settings
$targetDir = file_directory_temp();
//$targetDir = 'uploads';
$cleanupTargetDir = false; // Remove old files
$outputDebugCleanup = false;
$maxFileAge = 5 * 3600; // Temp file age in seconds


// Create target dir
if (!file_exists($targetDir)) {
  @mkdir($targetDir);
}


// Get a file name

if (isset($_REQUEST["name"])) {
  $fileName = $_REQUEST["name"];
} elseif (!empty($_FILES)) {
  $fileName = $_FILES["file"]["name"];
} else {
  drupal_exit();
}



//$fileName = uniqid("file_").$file_info->filename;
//Add in user name to the mix so they can't overwrite each other
$filePath = $targetDir . DIRECTORY_SEPARATOR . $user->name.'_'.$fileName;
// Chunking might be enabled
$chunk = isset($_REQUEST["chunk"]) ? intval($_REQUEST["chunk"]) : 0;
$chunks = isset($_REQUEST["chunks"]) ? intval($_REQUEST["chunks"]) : 0;

// Remove old temp files
if ($cleanupTargetDir) {
  if ($outputDebugCleanup) print 'cleaning up'."\n";
  if (!is_dir($targetDir) || !$dir = opendir($targetDir)) {
    die('{"jsonrpc" : "2.0", "error" : {"code": 100, "message": "Failed to open temp directory."}, "id" : "id"}');
  }
  while (($file = readdir($dir)) !== false) {
    if ($outputDebugCleanup) print "\n".'checking on file:'.$file;
    $tmpfilePath = $targetDir . DIRECTORY_SEPARATOR . $file;

    // If temp file is current file proceed to the next
    if ($tmpfilePath == "{$filePath}.part") {
      continue;
    }

    // Remove temp file if it is older than the max age and is not the current file
    if (preg_match('/\.part$/', $file) && (filemtime($tmpfilePath) < time() - $maxFileAge)) {
      @unlink($tmpfilePath);
    }
    else {
      if ($outputDebugCleanup) print "\nfilemtime:".filemtime($tmpfilePath).'ok';
      if ($outputDebugCleanup) print "\n     time:".time().'ok';
      if ($outputDebugCleanup) print "\ndel  time:".(time()-$maxFileAge);
    }
  }
  closedir($dir);
}


// Open temp file
if (!$out = @fopen("{$filePath}.part", $chunks ? "ab" : "wb")) {
  die('{"jsonrpc" : "2.0", "error" : {"code": 102, "message": "Failed to open output stream."}, "id" : "id"}');
}


if (!empty($_FILES)) {
  if ($_FILES["file"]["error"] || !is_uploaded_file($_FILES["file"]["tmp_name"])) {
    die('{"jsonrpc" : "2.0", "error" : {"code": 103, "message": "Failed to move uploaded file."}, "id" : "id"}');
  }

  // Read binary input stream and append it to temp file
  if (!$in = @fopen($_FILES["file"]["tmp_name"], "rb")) {
    die('{"jsonrpc" : "2.0", "error" : {"code": 101, "message": "Failed to open input stream."}, "id" : "id"}');
  }
} else {
  if (!$in = @fopen("php://input", "rb")) {
    die('{"jsonrpc" : "2.0", "error" : {"code": 101, "message": "Failed to open input stream."}, "id" : "id"}');
  }
}


while ($buff = fread($in, 4096)) {
  fwrite($out, $buff);
}


@fclose($out);
@fclose($in);

// Check if file has been uploaded
if (!$chunks || $chunk == $chunks - 1) {
  // Strip the temp .part suffix off
  rename("{$filePath}.part", $filePath);
  $file_info = new stdClass();
  $file_info->filename = $fileName;
  $file_info->filepath = $filePath;//$base_path . 'sites/all' .$filePath;
  $_SESSION['file_uploads'][$form_id][] = $file_info;
}

// Return Success JSON-RPC response
//print_r ($_SESSION['file_uploads']);
//die('{"jsonrpc" : "2.0", "result" : null, "id" : "id"}');
if ($outputDebugCleanup) {
  print 'upload complete:'.$filePath;
  print "\n";
  print 'full list of files here:';
  print "\n";
  $files1 = scandir($targetDir);
  print_r($files1);
}

else {
  print 'upload complete';
}

drupal_exit();
}

/*
 * Implements hook_cron
 * Removes anything in the temp directory that is over an hour old.  These are the old uploads but are not managed
 * by Drupal.
 */
function sidora_cron() {
  $temp_dir = file_directory_temp();
  $dir_content = scandir($temp_dir);
  // Get just the files and not the hidden ones
  $files_only = array_filter($dir_content, function($k) {
    $temp_dir = file_directory_temp();
    if (is_dir($temp_dir . '/' . $k)) return FALSE;
    if (sidora_startsWith($k, '.')) return FALSE;
    return TRUE;
  });
  $to_be_removed = array_filter($files_only, function($k) {
    $curr_time = time();
    $temp_dir = file_directory_temp();
    $file_time = filectime($temp_dir . '/' . $k);
    $time_alive = $curr_time - $file_time;
    // if > 20000 sec (333 min) then delete
    if ($time_alive > 20000) return TRUE;
    return FALSE;
  });
  $deleted_files = array();
  foreach ($to_be_removed as $to_remove) {
    if (is_writable($temp_dir . '/' . $to_remove)) {
      $deleted = unlink($temp_dir . '/' . $to_remove);
      if ($deleted) $deleted_files[] = $to_remove;
    }
  }
  watchdog(
    'sidora_workbench',
    t('Cleared directory %d: %f files, %t flagged for removal, could not remove %n files.',array(
      '%d' => $temp_dir,
      '%f' => (sizeof($files_only)),
      '%n' => (sizeof($to_be_removed) - sizeof($deleted_files)),
      '%t' => (sizeof($to_be_removed)),
    ))
  );
  $checker = sidora_check_nodes_in_fedora();
  watchdog(
    'sidora_workbench',
    json_encode($checker)
  );
}

/*
 * Creates the html_tree.
 * $num_levels is the number of tree levels to go down the tree
 * $url_params is the additional parameters to put on the url: 'sidora/workbench/' . $url_params . '#' . $pid . '?path=' . $input_path
 * $dom_type is the string name of the dom element to use for the objects in the <li>, for jstree you want these to be <a> so use 'a'
 * $include_href is a boolean on whether to include an href on the dom object in the <li>
 * $include_permission_types is an array of permission types to include
 *   create, read, update, delete as expected, but an empty array or an array with an empty element means to output a tree even if the current user
 *   does not have any access
 */
function sidora_html_tree_from_query_results_tree($query_result_tree, $input_path = '', $num_levels = 3, $url_params = '', $dom_type = 'a', $include_href = TRUE, $include_permission_types = array("create","view","update","delete"), $last_parent_pid = NULL){
  if (empty($query_result_tree)) return '';
  global $user;
  // Every entry needs a label or we will not show it in the tree
  // Go through the current children and throw out any that don't have a label
  $to_remove = array();
  foreach($query_result_tree as $t_index=>$t_element){
    $html_escaped_name = htmlspecialchars($t_element['t']['value']);
    if (empty($html_escaped_name)) {
      $to_remove[] = $t_index;
    }
  }
  $to_remove = array_reverse($to_remove);
  foreach($to_remove as $t_index) {
    unset($query_result_tree[$t_index]);
  }

  //Result set should no longer have any blank children label names
  if (is_string($num_levels)) {
    $num_levels = intval($num_levels);
  }
  if ($num_levels == 0) {
    return '';
  }
  $to_return = '';
  $default_ps = (empty($user->data['default_ps']))?"":$user->data['default_ps'];
  foreach($query_result_tree as $t_index=>$t_element){
    $html_escaped_name = htmlspecialchars($t_element['t']['value']);
    // An entry needs a label or we will not show it in the tree
    if (!empty($html_escaped_name)) {
      $pid = $t_element['o']['value'];
      $current_path = $input_path;
      if (!empty($input_path)) $current_path .= ',';
      $current_path .= $pid;
      $resource_children_num = -1;
      if (array_key_exists('resourcecount',$t_element)) $resource_children_num = $t_element['resourcecount']['value'];
      $classes_for_permissions = "";

      $permissions = '';
      $included_in_output = FALSE;
      if (empty($include_permission_types) || in_array("",$include_permission_types)) {
        // Indicates no permissions on object, but still want to output it
        $permissions .= " ";
        $included_in_output = TRUE;
      }
      if (array_key_exists('crud',$t_element)) {
        if ($t_element['crud']['c']) {
          if (in_array("create",$include_permission_types)) {
            $included_in_output = TRUE;
          }
          $permissions .= 'c';
          $classes_for_permissions .= ' p_create';
        }
        if ($t_element['crud']['r']) {
          if (in_array("view",$include_permission_types)) {
            $included_in_output = TRUE;
          }
          $permissions .= 'r';
          $classes_for_permissions .= ' p_read';
        }
        if ($t_element['crud']['u']) {
          if (in_array("update",$include_permission_types)) {
            $included_in_output = TRUE;
          }
          $permissions .= 'u';
          $classes_for_permissions .= ' p_update';
        }
        if ($t_element['crud']['d']) {
          if (in_array("delete",$include_permission_types)) {
            $included_in_output = TRUE;
          }
          $permissions .= 'd';
          $classes_for_permissions .= ' p_delete';
        }
      }
      $nid_info = '';
      if (array_key_exists('nid',$t_element)) {
        $nid_info = " nid='" . $t_element['nid'] . "'";
      }
      $owner_info = '';
      $classes_for_ownership = "";
      if (array_key_exists('owner',$t_element)) {
        $owner_info = " owner='" . $t_element['owner']['value'] . "'";
        if (strtolower( $t_element['owner']['value'] ) != strtolower($user->name)) {
          $classes_for_ownership = " not-owned";
        }
      }
      $administeredBy = ' administered-by="' . $t_element['isAdministeredBy'] . '" last-parent="' . $last_parent_pid . '"';
      $isLink = '';
      if (!empty($t_element['isAdministeredBy']) && $last_parent_pid != $t_element['isAdministeredBy'] && !empty($last_parent_pid)) {
        $isLink = '<img style="width:13px;height:13px;" src="' . $GLOBALS['base_url'] . '/' . drupal_get_path('module','sidora') . '/images/link.png"/>'; //TODO
        $administeredBy .= ' is-link="TRUE"';
      }
      else {
        $administeredBy .= ' is-link="FALSE"';
      }
      $class_for_default_project_space = '';
      if ($pid == $default_ps) {
        $class_for_default_project_space = ' default-project-space';
      }
      $the_return = module_load_include('inc', 'sidora', 'includes/project_spaces');
      if (sidora_is_project_space($pid)) {
        $class_for_default_project_space .= ' is-project-space';
      }
      if (!empty($permissions) && $included_in_output) {
        $to_return .= '<li>';
        $href = ($include_href)? ' href="' . base_path() . 'sidora/workbench/' . $url_params . '#' . $pid . '?path=' . $input_path . '"':'';
        /*
        $class_for_thumbnail = '';
        $thumbnail_info = '';
        if (!empty($t_element['t']['thumbnail'])){
          $thumb_src = file_create_url($t_element['t']['thumbnail']);
          $thumbnail_info = ' thumbnail="' . $thumb_src . '"';
          $class_for_thumbnail = ' has-thumbnail';
        }
        */
        $all_classes =  $classes_for_permissions . $classes_for_ownership . $class_for_default_project_space;// . $class_for_thumbnail;
        $to_return .= '<';
        $to_return .= $dom_type . $href;
        $to_return .= ' pid="' . $pid . '" fullname="' . $html_escaped_name . '"';
        $to_return .= ' conceptchildren="' . count($t_element['children']) . '"';
        $to_return .= ' rspids="' . implode(' ', sidora_get_project_space_pids_for_pid($pid)) . '"';
        $to_return .= ' resourcechildren="' . $resource_children_num . '"';
        $to_return .= ' class="' . $all_classes . '" permissions="' . $permissions . '"';
        $to_return .= $nid_info . $owner_info . $administeredBy;
        $to_return .= '>';
        if (!empty($t_element['t']['thumbnail'])){
           $to_return .= '<div class="concept-thumbnail"><img src="'.file_create_url($t_element['t']['thumbnail']).'"/></div>';
        }

        $to_return .= $t_element['t']['value'];
        if ($resource_children_num > 0) $to_return .= ' ('.$resource_children_num.')';
        $to_return .= "</$dom_type>";
//BBB
        if ($pid == 'si:117442'){
          $to_return .= '<ul><li><' . $dom_type . ' href="#" fullname="Linky no view" ownedbyrs="MyOwningRSLabel" ownerforrs="Bob Ownings" conceptchildren="0">Linky no view</' . $dom_type . '></li></ul>';
        }

//BBB
        if (array_key_exists('children',$t_element)){
          $to_return .= '<ul>';
          $to_return .= sidora_html_tree_from_query_results_tree($t_element['children'], $current_path, $num_levels - 1, $url_params, $dom_type, $include_href, $include_permission_types, $pid);
          $to_return .= '</ul>';
        }
        if (array_key_exists('already_in_tree',$t_element) && $t_element['already_in_tree']){
          $to_return .= '<b>Already in tree!</b>';
        }
        $to_return .= '</li>'."\n";
      }
    }
  }
  return $to_return;
}

/*
 * Clears specific pids out of the tree cache
 */
function sidora_clear_entire_tree_cache() {
  cache_clear_all('sidora:children_results:', 'cache', TRUE);
}

/*
 * Clears specific pids out of the tree cache
 */
function sidora_clear_tree_cache($pid = '') {
  if (variable_get('sidora_debug_clear_cache',FALSE)){
    watchdog('sidora_debug_clear_cache',
      t("Clear Tree Cache: %pid",
        array('%pid' => $pid)
      )
    );
  }
  if (!empty($pid)) {
    cache_clear_all('sidora:children_results:'.$pid, 'cache', TRUE);
    sidora_recently_updated($pid);
  }
}

/*
 * For any object that has been updated, keep an indicator of changed
 */
function sidora_recently_updated($pid) {
  if (variable_get('sidora_debug_clear_cache',FALSE)){
    watchdog('sidora_debug_clear_cache',
      t("Recently Updated: %pid",
        array('%pid' => $pid)
      )
    );
  }
  sidora_fedora_queue_sync($pid);
  sidora_recently_updated_clear_old();
  $cache_name = "sidora:recent_updates";
  $recent_updates_cache = cache_get($cache_name);
  $recent_updates = $recent_updates_cache->data;
  $current_minute_as_seconds = time();
  $current_minute_as_min = intval($current_minute_as_seconds / 60);
  if (empty($recent_updates[$current_minute_as_min])) {
    $recent_updates[$current_minute_as_min] = array();
  }
  if (!in_array($pid, $recent_updates[$current_minute_as_min])) {
    $recent_updates[$current_minute_as_min][] = $pid;
  }
  cache_set($cache_name,$recent_updates,'cache',CACHE_TEMPORARY);
}

/*
 * Returns all of the pids that have been updated since the specified minute
 * (server minutes since epoch)
 */
function sidora_recently_updated_since($server_minute) {
  sidora_recently_updated_clear_old();
  $cache_name = "sidora:recent_updates";
  $recent_updates_cache = cache_get($cache_name);
  $recent_updates = $recent_updates_cache->data;
  $pids = array();
  foreach ($recent_updates as $minute => $updated_pids) {
    if ($server_minute <= $minute) {
      foreach ($updated_pids as $pid) {
        if (!in_array($pid,$pids)) $pids[] = $pid;
      }
    }
  }
  return $pids;
}

/*
 * Keeps the recently updated list to 100 minutes
 */
function sidora_recently_updated_clear_old() {
  $cache_name = "sidora:recent_updates";
  $recent_updates_cache = cache_get($cache_name);
  $recent_updates = array();
  if (!empty($recent_updates_cache)) {
    $recent_updates = $recent_updates_cache->data;
  }
  // recent_updates is an array with the past 100 minutes
  // with the pids that have been updated in that minute listed
  // First, let's clear out whatever is too old
  $first_minute_as_seconds = time() - 100 * 60;
  $first_minute_as_min = intval($first_minute_as_seconds / 60);
  foreach ($recent_updates as $minute => $updated_pids) {
    if ($minute < $first_minute_as_min) {
      unset($recent_updates[$minute]);
    }
  }
  cache_set($cache_name,$recent_updates,'cache',CACHE_TEMPORARY);
}

/*
 * Very simply attempts to obtain a lock on the pid
 * returns true to say that the lock was obtained, false otherwise
 * to be used to check if someone can perform an action
 * ALWAYS Returns true if the locking mechanism is turned off
 */
function sidora_obtain_lock($pid) {
  if (variable_get('sidora_disable_locking_by_pid', '') == 1) return TRUE;
  global $user;
  $spsl = sidora_pid_set_locked($pid, '', true);
  if (!is_string($spsl)) {
    return FALSE;
  }
  return strtolower($user->name) == strtolower($spsl);
}

/*
 * Convenience method to release a lock on the pid for the logged in user
 * ALWAYS returns FALSE if the locking mechanic is turned off
 */
function sidora_release_lock($pid) {
  sidora_pid_set_locked($pid, '', false, true);
}

/**
 * returns the user name that the pid is locked to
 * returns FALSE if item is not locked
 * ALWAYS returns FALSE if the locking mechanic is turned off
 *
 * convenience method for readability, simply calls sidora_pid_set_locked, returns "" if locking is turned off
 */
function sidora_pid_is_locked($pid) {
  if (variable_get('sidora_disable_locking_by_pid', '') == 1) return FALSE;
  return sidora_pid_set_locked($pid);
}

/**
 * Set the pid to be locked.  If no user is sent, locks to currently logged in user
 * If $clear_lock is set to true, the lock MUST be for the user specified or the user sent
 * otherwise will not clear the lock.
 * Setting clear_lock and obtain_lock to true will refresh the time remaining on the lock
 *
 * returns the user that the pid is locked to or FALSE if not locked, returns "" if locking is turned off
 */
function sidora_pid_set_locked($pid, $set_locked_to_user = '', $obtain_lock = false, $clear_lock = false) {
  if (variable_get('sidora_disable_locking_by_pid', '') == 1) return "";
  // Locking is administratively turned off
  $cache_name = "sidora:locking:".$pid;
  $pid_lock = cache_get($cache_name);
  if (!$obtain_lock && empty($pid_lock) && !$clear_lock) return FALSE;
  // Was a call to see who had the lock, and nobody has it

  $drupal_user = sidora_get_drupal_user($set_locked_to_user);
  if (!empty($drupal_user)) {
    $drupal_user_name = $drupal_user->name;
  }
  else {
    $drupal_user_name = '';
    drupal_set_message(t('Attempted to lock a pid with an invalid drupal user name'), 'warning');
  }
  $currently_locked_to_name = '';
  if (!empty($pid_lock)) {
    // See if it's expired:
    if (time() < $pid_lock->expire) {
      // Not expired yet, so get the data
      $currently_locked_to_name = $pid_lock->data;
    }
  }
  if (empty($clear_lock) && empty($obtain_lock)) {
    // just trying to see who has it
    return $currently_locked_to_name;
  }
  if ($clear_lock && strtolower($drupal_user_name) == strtolower($currently_locked_to_name)) {
    cache_clear_all($cache_name, 'cache', TRUE);
    $currently_locked_to_name = '';
  }
  // In order to be able to set a lock on the pid, check that permissions exist that would allow the user
  // to be able to modify the object
  $can_obtain_lock =
    sidora_allow($drupal_user,$pid,'create') ||
    sidora_allow($drupal_user,$pid,'update') ||
    sidora_allow($drupal_user,$pid,'delete') ||
    sidora_allow($drupal_user,$pid,'permission');

  if ($obtain_lock && !empty($drupal_user_name) && $can_obtain_lock) {
    if (!empty($currently_locked_to_name) && strtolower($currently_locked_to_name) != strtolower($drupal_user_name)) {
      // it's currently locked to someone and it's not the user you're interested in...
      return $currently_locked_to_name;
    }
    $lock_seconds = variable_get('sidora_record_lock_seconds',23);
    cache_set($cache_name,$drupal_user_name,'cache',time() + $lock_seconds);
  }
  $at_end = cache_get($cache_name);
  if (!empty($at_end)) {
    return $at_end->data;
  }
  else {
    return FALSE;
  }
}
/*
 * Returns an array of the form:
Array(
  [0] => Array(
    [o] => Array([value] => si:user-projects  ,[uri] => info:fedora/si:user-projects ,[type] => pid )
    [t] => Array([type] => literal[value] => Researcher Projects )
    [resourcecount] => Array([type] => literal[value] => 11 )
    [children] => Array(
      [0] => Array(
        [o] => Array([value] => si-user:99  ,[uri] => info:fedora/si-user:99 ,[type] => pid )
        [t] => Array([type] => literal[value] => DingDJ Projects )
        [resourcecount] => Array([type] => literal[value] => 1 )
        [children] => Array(
          [0] => Array(
            [o] => Array([value] => si:256795  ,[uri] => info:fedora/si:256795 ,[type] => pid )
            [t] => Array([type] => literal[value] => TestProject )
            [resourcecount] => Array([type] => literal[value] => 0 )
            [children] => Array( ) ) ) )
          [1] => Array(
            [o] => Array([value] => si-user:57  ,[uri] => info:fedora/si-user:57 ,[type] => pid )
            [t] => Array([type] => literal[value] => HuaD Projects )
            [resourcecount] => Array([type] => literal[value] => 2 )
            [children] => Array(
              [0] => Array(
                [o] => Array([value] => si:257131  ,[uri] => info:fedora/si:257131 ,[type] => pid )
                [t] => Array([type] => literal[value] => Form Wizard )
                [resourcecount] => Array([type] => literal[value] => 0 )
                [children] => Array( ) )
              [1] => Array(
                [o] => Array([value] => si:118010  ,[uri] => info:fedora/si:118010 ,[type] => pid )
                [t] => Array([type] => literal[value] => Tabular Dataset Project )
                [resourcecount] => Array([type] => literal[value] => 0 )
                [children] => Array( ) ) ) )
          [2] => Array(

 *  ...and so on.  resourcecount is the number of resource children
 */
function sidora_fill_concepts_children($query_result, $current_path = array(), $max_depth = 3) {
  if ($current_path == NULL) $current_path = array();
  if (sizeof($current_path) > $max_depth) return $query_result;
  if (is_array($query_result)) {
    foreach ($query_result as $c_index=>$child) {
      $child_pid = $child['o']['value'];
      if (!in_array($child_pid,$current_path)) {
        $path_to_send = $current_path;
        $path_to_send[] = $child_pid;
        $results = _sidora_get_child_results_cache($child_pid);
        $query_result[$c_index]['children'] = sidora_fill_concepts_children($results, $path_to_send, $max_depth);
      }
      else {
        $query_result[$c_index]['already_in_tree'] = true;
      }
    }
  }
  return $query_result;
}

/*
 * Pulls information from the cache or if missing from cache populates it and returns that data
 */
function _sidora_get_child_results_cache($child_pid) {
  if (cache_get("sidora:children_results:".$child_pid) === FALSE) {
    $tuque = islandora_get_tuque_connection();
    $grandchildren_query = sidora_generate_child_concept_query($child_pid);
    $ri = $tuque->repository->ri;
    $results = $ri->sparqlQuery($grandchildren_query);
    if (sizeof($results) == 1 && $results[0]['o']['value'] == '') $results = array();
    cache_set("sidora:children_results:".$child_pid,$results);
  }
  else {
    $results = cache_get("sidora:children_results:".$child_pid)->data;
  }
  return $results;
}

/**
 * Store or return the html for a tree, per user since this
 *
 */
function sidora_html_tree_cache($root_pid, $permission = 'view' , $length = 2, $result = NULL){
  global $user;
  $cache_name = "sidora:tree:" . $root_pid . ":" . $permission . ":" . $length . ":" . $user->name;
  if (!empty($result)) {
    cache_set($cache_name, $result);
    return $result;
  } else {
    $cgd = cache_get($cache_name);
    if (!empty($cgd)){
      $result = cache_get($cache_name)->data;
    }
  }
  return $result;
}

/**
 * WARNING: THIS WILL RETURN A SINGLE ROW of null, null, null, null, 0
 *  IF NOTHING IS FOUND, BE SURE TO CHECK
 *
 * Query for fetching the Child Resources given what type of data they disseminate.
 *
 * @param string $pid
 *   The object to query for.
 * @param string array $resource_types
 *   The types of resource to look for, defined as a list of content models, if empty all resources will be returned.
 * @param string $search
 *   A string to search for the title
 * @param string $sort
 *   The sort to apply to the resources label either ('' for ascending or 'DESC' for descending).
 * @param string $sort_by
 *   The sort by option choose from ('created' - the default, 'title', 'model', or 'object')
 * @param int $limit
 *   The number of results to limit this query to.
 * @param int $offset
 *   The offset into the number of results to truncate from the results.
 *
 * @return string
 *   A sparql query string
 */
function sidora_generate_child_resource_sparql_query($pid, array $resource_types, $search = '', $sort = 'DESC', $sort_by = 'created', $limit = NULL, $offset = NULL) {
  if (empty($sort_by)) {
    $sort_by = 'created';
  }
  $limit_types = '';
  if (!empty($resource_types)) {
    $limit_type_expression = function($o) {
      return "sameTerm(?model, <info:fedora/$o>)";
    };
    $limit_types = array_map($limit_type_expression, $resource_types);
    $limit_types = implode(' || ', $limit_types);
    $limit_types = "(" . $limit_types . ") && ";
  }
  $limit = isset($limit) ? " $limit" : '1000000';
  $offset = isset($offset) ? " $offset" : '0';
  $search_filter = '';
  if (isset($search) && $search != '') {
    $search_filter =  "                FILTER(regex(?title, '{$search}', 'i'))";
  }

      $query = "select ?object ?title ?model ?created ?administeredBy (count(distinct ?incomingLink) as ?incomingLinks) from <#ri> where {
          <info:fedora/{$pid}> <info:fedora/fedora-system:def/relations-external#hasResource> ?object .
          ?object <info:fedora/fedora-system:def/model#state> <info:fedora/fedora-system:def/model#Active> .
  ?object <info:fedora/fedora-system:def/model#label> ?title .
  ?object <info:fedora/fedora-system:def/model#hasModel> ?model .
  ?object <info:fedora/fedora-system:def/model#createdDate> ?created .
  ?incomingLink <info:fedora/fedora-system:def/relations-external#hasResource> ?object .
  OPTIONAL { ?object <" . SI_RELS_EXT_URI . "isAdministeredBy> ?administeredBy }
          ".$search_filter."
          FILTER(
          ".$limit_types."
              !sameTerm(?model, <info:fedora/fedora-system:FedoraObject-3.0>) &&
              !sameTerm(?model, <info:fedora/si:resourceCModel>))
        }
        GROUP BY ?object ?title ?model ?created ?administeredBy
                ORDER BY {$sort}(?{$sort_by})
        OFFSET {$offset}
        LIMIT {$limit}";
  return $query;
}

/**
 * Query for fetching the Child Resources given what type of data they disseminate.
 *
 * @param string $pid
 *   The object to query for.
 * @param string $resource_types
 *   The types of resource to look for, defined as a list of content models, if empty all resources will be returned.
 * @param string $sort
 *   The sort to apply to the resources label either ('asc', 'desc').
 * @param int $limit
 *   The number of results to limit this query to.
 * @param int $offset
 *   The offset into the number of results to truncate from the results.
 *
 * @return string
 *   An itql query string
 */
function sidora_generate_child_concept_query($pid) {
  return 'SELECT ?o ?t (COUNT(DISTINCT ?r) AS ?resourcecount) (COUNT(DISTINCT ?c) AS ?conceptcount) ?owner
            FROM <#ri>
            WHERE {
              <info:fedora/' . $pid . '> <info:fedora/fedora-system:def/relations-external#hasConcept> ?o .
              { ?o <info:fedora/fedora-system:def/model#hasModel> <info:fedora/si:conceptCModel> }
              UNION { ?o <info:fedora/fedora-system:def/model#hasModel> <info:fedora/si:collectionCModel> } .
              ?o <info:fedora/fedora-system:def/model#state> <info:fedora/fedora-system:def/model#Active> .
              ?o <info:fedora/fedora-system:def/model#label> ?l .
              ?o <info:fedora/fedora-system:def/model#ownerId> ?owner .
              OPTIONAL {
                ?o <info:fedora/fedora-system:def/relations-external#hasConcept> ?c .
                ?c <info:fedora/fedora-system:def/model#state> <info:fedora/fedora-system:def/model#Active> .
              }
              OPTIONAL {
                ?o <info:fedora/fedora-system:def/relations-external#hasResource> ?r .
                ?r <info:fedora/fedora-system:def/model#state> <info:fedora/fedora-system:def/model#Active> .
              }
            }
            GROUP BY ?o (STR(?l) AS ?t) ?owner
            ORDER BY ?t';
}

/*
 * Returns true if any of the haystacks contain any of the needles
 * otherwise returns false
 */
function sidora_contains($haystacks, $needles, $ignoreCase = false) {
    if (!is_array($haystacks)) $haystacks = array($haystacks);
    if (!is_array($needles)) $needles = array($needles);
    foreach ($haystacks as $haystack) {
      foreach ($needles as $needle) {
      if ($ignoreCase) {
        $haystack = strtolower($haystack);
        $needle   = strtolower($needle);
      }
      $needlePos = strpos($haystack, $needle);
      if ($needlePos !== false) {
        return true;
      }
    }
  }
  return false;
}

/*
 * Helper function to do basic string startsWith (makes code easier to write and understand)
 */
function sidora_startsWith($haystack, $needle) {
  // search backwards starting from haystack length characters from the end
  return $needle === "" || strrpos($haystack, $needle, -strlen($haystack)) !== FALSE;
}

/*
 * Helper function to do basic string endsWith (makes code easier to write and understand)
 */
function sidora_endsWith($haystack, $needle) {
  // search forward starting from end minus needle length characters
  if (empty($haystack)) return FALSE;
  return $needle === "" || strpos($haystack, $needle, strlen($haystack) - strlen($needle)) !== FALSE;
}

/*
 * Helper function to pretty print json if PHP < 5.3 (like on our local dev servers)
 * Originally from http://snipplr.com/view/60559/prettyjson/
 */
function sidora_pretty_json($json) {

    $result      = '';
    $pos         = 0;
    $strLen      = strlen($json);
    $indentStr   = '  ';
    $newLine     = "\n";
    $prevChar    = '';
    $outOfQuotes = true;

    for ($i=0; $i<=$strLen; $i++) {

        // Grab the next character in the string.
        $char = substr($json, $i, 1);

        // Are we inside a quoted string?
        if ($char == '"' && $prevChar != '\\') {
            $outOfQuotes = !$outOfQuotes;

        // If this character is the end of an element,
        // output a new line and indent the next line.
        } elseif(($char == '}' || $char == ']') && $outOfQuotes) {
            $result .= $newLine;
            $pos --;
            for ($j=0; $j<$pos; $j++) {
                $result .= $indentStr;
            }
        }

        // Add the character to the result string.
        $result .= $char;

        // If the last character was the beginning of an element,
        // output a new line and indent the next line.
        if (($char == ',' || $char == '{' || $char == '[') && $outOfQuotes) {
            $result .= $newLine;
            if ($char == '{' || $char == '[') {
                $pos ++;
            }

            for ($j = 0; $j < $pos; $j++) {
                $result .= $indentStr;
            }
        }

        $prevChar = $char;
    }

    return $result;
}

function sidora_generate_resource_list($pid) {
  $to_return = array();
  $tuque = islandora_get_tuque_connection();
  $concept_pid = $pid;
  if ($tuque) {
    $query = sidora_generate_child_resource_pid_only_sparql_query($concept_pid, array());
    $ri = $tuque->repository->ri;
    $results = $ri->sparqlQuery($query);
    $resources_array = array();
    foreach ($results as $resindex=>$result) {
      $resources_array[] = $result['object']['value'];
    }
    print json_encode($resources_array);
  }
  else {
    print json_encode("Error connecting to the repository");
  }
  drupal_exit();
}

function sidora_generate_child_resource_pid_only_sparql_query($pid) {
 $query = "select ?object ?title from <#ri>
         where {
          <info:fedora/{$pid}> <info:fedora/fedora-system:def/relations-external#hasResource> ?object .
          ?object <info:fedora/fedora-system:def/model#state> <info:fedora/fedora-system:def/model#Active> .
          ?object <info:fedora/fedora-system:def/model#label> ?title
         }";
  return $query;
}

/**
 * Return the codebook manager's pid or NULL. Does not guarantee the manager object exists
 */
function sidora_get_codebook_manager_pid($pid) {
  $to_return = array();
  $tuque = islandora_get_tuque_connection();
  $concept_pid = $pid;
  if ($tuque) {
    $query = sidora_generate_codebook_manager_sparql_query($concept_pid, array());
    $ri = $tuque->repository->ri;
    $results = $ri->sparqlQuery($query);
    $resources_array = array();
    foreach ($results as $resindex=>$result) {
      return $result['object']['value'];
    }
  }
  return NULL;
}

function sidora_generate_codebook_manager_sparql_query($pid) {
 $query = "select ?object ?title from <#ri>
         where {
          ?object <info:fedora/fedora-system:def/relations-external#hasResource> <info:fedora/{$pid}> .
          ?object <info:fedora/fedora-system:def/model#state> <info:fedora/fedora-system:def/model#Active> .
          ?object <info:fedora/fedora-system:def/model#label> ?title
         }";
  return $query;
}

/*
 * Login dev by Gor
 */
function sidora_preprocess_user_login(&$vars) {
  $vars['content_attributes_array']['class'][] = 'content';
  $vars['title_attributes_array']['class'][] = 'content';
  $vars['attributes_array']['class'][] = 'content';
  $vars['classes_array'] = array('content');
  $vars['forgot_link'] = l(t('Forgot password?'),'user/password');
}
function sidora_preprocess_user_pass(&$vars) {
  $vars['content_attributes_array']['class'][] = 'content';
  $vars['title_attributes_array']['class'][] = 'content';
  $vars['attributes_array']['class'][] = 'content';
  $vars['classes_array'] = array('content');
  $vars['forgot_link'] = l(t('Forgot password?'),'user/password');
}
/**
 * Implements hook_theme().
 *
 * Defines the theming capabilities provided by this module.
 */
function sidora_theme() {
  $themes = array (
    'user_login_form' => array(
      'render element' => 'form',
      'template' => 'user-login',
      // template file user-login.tpl.php
      'path' => drupal_get_path('module', 'sidora') . '/templates',
      'preprocess functions' => array(
        'sidora_preprocess_user_login'
      )
    ),
    'user_login' => array(
      'render element' => 'form',
      'template' => 'user-login',
      // template file user-login.tpl.php
      'path' => drupal_get_path('module', 'sidora') . '/templates',
      'preprocess functions' => array(
        'sidora_preprocess_user_login'
      )
    ),
    'sidora_account_request_form' => array(
      'render element' => 'form',
      'template' => 'user-register-form',
      // template file user-register-form.tpl.php
      'path' => drupal_get_path('module', 'sidora') . '/templates'
    ),
    'sidora_contact_us_form' => array(
      'render element' => 'form',
      'template' => 'user-help-form',
      // template file user-help-form.tpl.php
      'path' => drupal_get_path('module', 'sidora') . '/templates'
    ),
   /*
    'user_register_form' => array(
       'render element' => 'form',
       'template' => 'user-register-form',
       // template file user-register-form.tpl.php
       'path' => drupal_get_path('module', 'sidora') . '/templates',
       'preprocess functions' => array(
         'sidora_preprocess_user_register_form'
       )
     ),
     'user_pass' => array(
       'render element' => 'form',
       'template' => 'user-pass',
       // template file user-pass.tpl.php
       'path' => drupal_get_path('module', 'sidora') . '/templates',
       'preprocess functions' => array(
         'sidora_preprocess_user_pass'
       )
     )*/
    'user_pass' => array(
       'render element' => 'form',
       'template' => 'user-pass',
       // template file user-pass.tpl.php
       'path' => drupal_get_path('module', 'sidora') . '/templates',
       'preprocess functions' => array(
         'sidora_preprocess_user_pass'
       )
    ),
    'sidora_sharing_permissions' => array(
      'render element' => 'form',
      'file' => 'includes/project_spaces.inc',
    ),
  );
  return $themes;
}

function sidora_status_messages(){
  global $variables;
  $messages = (drupal_get_messages());
  foreach ($messages as $message_type=>$message_group) {
    foreach ($message_group as $message) {
      if (sidora_startsWith($message, 'Sorry, unrecognized username or password.')) {
        drupal_set_message('Sorry, unrecognized username or password.', $message_type);
        // Remove the link and the user name (security issue)
      }
      elseif (strpos($message, 'is not recognized as a user name or an e-mail address.') !== FALSE) {
        drupal_set_message('Sorry, your entry was not recognized as a user name or an e-mail address.', $message_type);
      }
      elseif (strpos($message, 'Undefined index: callback in <em class="placeholder">securepages_match_form()</em> (line <em class="placeholder">369</em> of') !== FALSE) {
                // Eat this message until a better version of securepages comes out.
      }
      else {
        drupal_set_message($message, $message_type);
      }
    }
  }
  $output = theme_status_messages($variables);
  return $output;
}

/*
 *  Remove labels and add HTML5 placeholder attribute to login form
 */
function sidora_login_form_alter(&$form, &$form_state, $form_id) {
  if ( TRUE === in_array( $form_id, array( 'user_login', 'user_login_block', 'user_pass') ) ) {
    $form['name']['#attributes']['placeholder'] = t( 'Username' );
    $form['pass']['#attributes']['placeholder'] = t( 'Password' );
   // $form['name']['#title_display'] = "invisible";
  //  $form['pass']['#title_display'] = "invisible";
  }
}


/*
 *  Remove login form descriptions
 */
function sidora_form_user_login_alter(&$form, &$form_state) {
  $form['pass']['#attributes']['autocomplete'] = 'off';
  // Autocomplete off for password
  $form['name']['#description'] = t('');
  $form['pass']['#description'] = t('');
}

/*
 *  Remove login form autocomplete (security)
 */
function sidora_form_user_login_block_alter(&$form, &$form_state) {
  $form['pass']['#attributes']['autocomplete'] = 'off';
  // Autocomplete off for password
}

/*
 * Account request form
 */
function sidora_account_request_form() {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#maxlength' => USERNAME_MAX_LENGTH,
    '#description' => t('Spaces are allowed; punctuation is not allowed except for periods, hyphens, apostrophes, and underscores.'),
    '#required' => TRUE,
    '#attributes' => array('class' => array('username')),
    '#weight' => -10,
  );
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail address'),
    '#maxlength' => EMAIL_MAX_LENGTH,
    '#description' => t('A valid e-mail address. All e-mails from the system will be sent to this address. The e-mail address is not made public and will only be used if you wish to receive a new password or wish to receive certain news or notifications by e-mail.'),
    '#required' => TRUE
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Request a new account'),
  );
  return $form;
}

/*
 * Validate for account request form, only checks email address for email address syntax
 */
function sidora_account_request_form_validate($form, &$form_state) {
    $email_address = $form_state['values']['mail'];
    if (!valid_email_address($email_address)) {
        form_set_error('mail', 'Enter a valid email address.');
    }
}

/*
 * Send out the mail that an account is requested
 */
function sidora_account_request_form_submit($form, &$form_state) {
  module_load_include('inc', 'sidora', 'includes/utils');
  $default_to = variable_get('system_mail', '');
  $default_from = variable_get('account_request_email_from', 'default_from');
  if (sidora_mail($default_from, variable_get('account_request_email_to', $default_to), 'Request SIdora Account', 'Request for new account received from UserName : '.$form_state['values']['name'] . ' & Email : '.$form_state['values']['mail'])) {
    drupal_set_message(t('Form submitted successfully'));
  }
}

/*
 * Remove the Islandora step to upload the audio file because SIdora already has performed that action
 */
function sidora_islandora_sp_audioCModel_islandora_ingest_steps_alter(array &$steps, array &$form_state) {
   unset($steps['islandora_audio_upload']);
}

/*
 * Audio viewer piggy-back on the islandora viewer
 */
function sidora_audio_view_object($pid) {
  $object = sidora_obj($pid);
  $variables = array('islandora_object' => $object);
  $output = theme('islandora_audio', $variables);
  $output = drupal_get_css() . drupal_get_js() . $output;
  return $output;
}

/*
 * Contact form
 */
function sidora_contact_us_form() {
  global $user;
  $form['mail'] = array(
    '#type' => 'textfield',
    '#title' => t('From:').'<span class="form-required"> *</span>',
    '#maxlength' => EMAIL_MAX_LENGTH,
    '#description' => t('An email address we can use to contact you.'),
    '#default_value' => (user_is_logged_in())?$user->mail:''
  );
  $form['helptext'] = array(
    '#type' => 'textarea',
    '#title' => t('Request Details:').'<span class="form-required"> *</span>',
    '#description' => t('')
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Contact Us'),
  );
  return $form;
}

/*
 * Check the contact form has info
 */
function sidora_contact_us_form_validate($form, &$form_state) {
  $error_check = 'false';
  $email_address = $form_state['values']['mail'];
  if (!valid_email_address($email_address)) {
    form_set_error('mail', 'Invalid or missing entries.');
    $error_check = 'true';
  }
  $help_text = $form_state['values']['helptext'];
  if ($help_text == '') {
    if ($error_check == 'true') {
      form_set_error('helptext','');
    }
    else {
      form_set_error('helptext', 'Invalid or missing entries.');
    }
  }
}

/*
 * Mail out the information from the contact form
 */
function sidora_contact_us_form_submit($form, &$form_state) {
  module_load_include('inc', 'sidora', 'includes/utils');
  $default_to = variable_get('system_mail', '');
  $default_from = $form_state['values']['mail'];
  if (sidora_mail($default_from, variable_get('account_request_email_to', $default_to), 'Account Help', $form_state['values']['helptext'])) {
    drupal_set_message(t('Form submitted successfully'));
  }
}

/*
 * Hi-jack the islandora call for versions to our own handler
 * Also, add Sidora callback to Islandora XML Forms callback for Form Builder
 */
function sidora_menu_alter(&$items) {
  if (isset($items['islandora/object/%islandora_object/datastream/%islandora_datastream/version'])) {
    unset($items['islandora/object/%islandora_object/datastream/%islandora_datastream/version']['file']);
    $items['islandora/object/%islandora_object/datastream/%islandora_datastream/version']['page callback'] = 'sidora_datastream_version_view';
    $items['islandora/object/%islandora_object/datastream/%islandora_datastream/version']['page arguments'] = array(2,4);
  }
  if ((isset($items['admin/islandora/xmlform'])) || (isset($items['admin/islandora/xmlform/forms']))) {
    $islandora_xml_callback = $items['admin/islandora/xmlform'];
    unset($items['admin/islandora/xmlform']['file']);
    unset($items['admin/islandora/xmlform']['page callback']);
    unset($items['admin/islandora/xmlform']['module']);
    unset($items['admin/islandora/xmlform/forms']['file']);
    unset($items['admin/islandora/xmlform/forms']['page callback']);
    unset($items['admin/islandora/xmlform/forms']['module']);
    $items['admin/islandora/xmlform']['page callback'] = 'sidora_xml_form_builder_callback';
    $items['admin/islandora/xmlform']['page arguments'] = array($islandora_xml_callback);
    $items['admin/islandora/xmlform/forms']['page callback'] = 'sidora_xml_form_builder_callback';
    $items['admin/islandora/xmlform/forms']['page arguments'] = array($islandora_xml_callback);
  }
  $items['user/%user/edit']['title'] = t('Account Management');
  $items['user/%user/view']['title'] = t('Workspace');
}

/*
 * Add to the html returned by islandora xml form builder callback
 * Add an import link to each form
 */
function sidora_xml_form_builder_callback($islandora_xml_callback) {
  module_load_include(pathinfo($islandora_xml_callback['file'], PATHINFO_EXTENSION), $islandora_xml_callback['module'], pathinfo($islandora_xml_callback['file'], PATHINFO_FILENAME));
  $html_return = call_user_func($islandora_xml_callback['page callback']);
  $doc = new DOMDocument();
  $doc->loadHTML($html_return);
  $th_elements = $doc->getElementsByTagName("th");
  foreach ($th_elements as $th) {
    if ($th->hasAttribute('colspan')) {
      $th->removeAttribute('colspan');
      $th->setAttribute('colspan', '7');
    }
  }
 $elements = $doc->getElementsByTagName('tr');
foreach ($elements as $node) {
 $tds = $node->getElementsByTagName('td');
 // get the columns in this row
 if($tds->length == 0)
   continue;
   // then skip it
 $td = $doc->createElement('td');
 $e = $doc->createElement('a', 'Import');
 $e->setAttribute('href', $GLOBALS['base_url'].'/sidora/import_xml_form/'.$tds->item(0)->nodeValue.'/import');
 $td->appendChild($e);
 $node->appendChild($td);
 }
 return $doc->saveHTML();
}

/*
 * Return the short id for the viewer for this pid
 */
function sidora_get_viewer_id($pid) {
  $config = sidora_get_viewer_config($pid);
  if (empty($config)) return NULL;
  return $config['viewer_id'];
}

/*
 * returns an array object that contains viewer configuration for this object of form:
 * array(
 *   'viewer_id' => viewer short identifier
 *   'dsid' => the datastream id to use
 * )
 */
function sidora_get_viewer_config($pid) {
  $obj = sidora_obj($pid);
  if (empty($obj)) return NULL;
  $models = $obj->models;
  $viewers = array();
  foreach ($models as $model) {
    $viewer = variable_get('resource_viewer_viewer_'.$model,'never');
    $viewers[] = $viewer;
    if ($viewer != 'never' && $viewer != 'none') {
      $list_of_dsids = variable_get('resource_viewer_dsid_'.$model,'');
      $dsids = preg_split('/\s*,\s*/',trim($list_of_dsids));
      foreach ($dsids as $dsid) {
        if (!empty($dsid)) {
          $ds = $obj[$dsid];
          if (!empty($ds)) {
            $to_return = array();
            $to_return['viewer_id'] = $viewer;
            $to_return['dsid'] = $dsid;
            return $to_return;
          }
        }
      }
      // ends foreach dsids
    }
  }
  // ends foreach models
  return NULL;
}


/**
 * This function sets the viewer for different versions of datastreams.
 * Audio Resource type -
 * Local Dev Server is creating derivatives in Drupal and the derivative datastream, Proxy_MP3 is versioned.
 * On production server the Proxy_MP3 derivative is created on Fedora Commons Repo server via back-end and
 * is currently not being versioned.
 * Sidora Admin Config Changes - Resource Viewer Settings
 * For Islandora Audio Content Model, set JWPlayer as the viewer for OBJ and Proxy_MP3 datatstreams.
 * Currently, different versions of OBJ can only be downloaded, not viewed.
 * Only the most recent Proxy_MP3 version will be played in the viewer.
 */
function sidora_datastream_version_view($pid, $datastream) {
  module_load_include('inc', 'islandora', 'includes/datastream.version');
  module_load_include('inc', 'islandora', 'includes/datastream');
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'sidora', 'includes/utils');
  $parent = sidora_obj($pid);
  if (empty($parent)) {
    return '';
  }
  $ds = $parent[$datastream];
  drupal_set_title(t("@dsid Previous Versions", array('@dsid' => $datastream)));
  $audit_values = islandora_get_audit_trail($pid, $datastream);
  $header = array();
  $header[] = array('data' => t('Created Date'));
  $header[] = array('data' => t('Size'));
  $header[] = array('data' => t('Label'));
  $header[] = array('data' => t('Responsibility'));
  $header[] = array('data' => t('Mime type'));
  $header[] = array('data' => t('Operations'), 'colspan' => '2');
  $rows = array();
/**
  * check first whether a concept or resource. If a concept, we don't need to worry about setting a viewer
  * If a resource, get viewer settings from admin. If the listed model and datastream is listed, get that viewer
  */
  $is_concept = sidora_is_concept($parent);
  $version_view_link = array(
    'id' => 'xmlview',
    'class' => 'datastream-date',
  );
  if (!$is_concept) {
    $viewer_config = sidora_get_viewer_config($pid);
    if ($viewer_config !== NULL && $viewer_config['dsid'] == $datastream) {
      $version_view_link = array(
        'class' => 'datastream-date',
        'viewer' => $viewer_config['viewer_id'],
      );
    }
  }
  foreach ($ds as $version => $datastream_version) {
    $row = array();
    $reponsibility = $parent->owner;
    foreach ($audit_values as $audit_value) {
      $internal = $datastream_version->createdDate;
      if ($audit_value['date'] == $datastream_version->createdDate) {
        $reponsibility = $audit_value['responsibility'];
      }
    }
    $user_val = $reponsibility;
    if ($is_concept) {
      $version_view_link['data'] = theme('islandora_datastream_view_link', array(
        'datastream' => $ds,
        'label' => $datastream_version->createdDate->format(DATE_RFC850),
        'version' => $version,
      ));
    }
    else {
      if ((isset($version_view_link['viewer'])) && ($version_view_link['viewer'] != '')) {
        if ((($version_view_link['viewer'] == 'JW Audio Player') || ($version_view_link['viewer'] == 'JW Video Player')) && (strtoupper($datastream) == 'OBJ')) {
          $version_view_link['data'] = l(
            $datastream_version->createdDate->format(DATE_RFC850),
            sidora_get_direct_download_url($parent->id, $datastream, $version)
          );
        }
        else {
          $version_view_link['data'] = l(
            $datastream_version->createdDate->format(DATE_RFC850),
            $GLOBALS['base_url'] . '/sidora/version_viewer/' . $parent->id . '/' . $datastream . '/' . $viewer_config['viewer_id'] . '/' . $version,
            array('attributes' => array('target' => '_blank'))
          );
        }
      }
      else {
        $version_view_link['data'] = theme('islandora_datastream_view_link', array(
          'datastream' => $ds,
          'label' => $datastream_version->createdDate->format(DATE_RFC850),
          'version' => $version,
        ));
      }
    }
    $row[] = $version_view_link;
    $row[] = array(
      'class' => 'datastream-size',
      'data' => islandora_datastream_get_human_readable_size($datastream_version),
    );
    $row[] = array(
      'class' => 'datastream-label',
      'data' => $datastream_version->label,
    );
    $row[] = array(
      'class' => 'datastream-responsibility',
      'data' => $user_val,
    );
    $row[] = array(
      'class' => 'datastream-mime',
      'data' => $datastream_version->mimeType,
    );
    $row[] = array(
      'class' => 'datastream-delete',
      'data' => theme('islandora_datastream_delete_link', array(
        'datastream' => $ds,
        'version' => $version,
      )),
    );
    $row[] = array(
      'class' => 'datastream-revert',
      'data' => theme('islandora_datastream_revert_link', array(
        'datastream' => $ds,
        'version' => $version,
      )),
    );
    $rows[] = $row;
  }
  $to_return = theme('table', array('header' => $header, 'rows' => $rows));
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_create_resource.css',array('weight' => '1000000', 'group' => CSS_THEME));
  drupal_add_css('table.sticky-header { display: none !important; }', array('type' => 'inline'));
  drupal_add_js('
jQuery(document).ready(function() {
jQuery("#xmlview a").attr("target","_blank");
});
',array('type' => 'inline', 'weight' => '1000000', 'group' => JS_THEME));
    return $to_return;
}

/**
 * returns what is set in the admin for the viewer of this object given a specific version of a datastream
 * This is a duplicate of the sidora_resource_viewer with some modifications for handling versions
 */
function sidora_resource_version_viewer($pid, $datastream, $viewer, $version = '0') {
  sidora_resource_version_viewer_display($pid, $datastream, $viewer, $version);
  print 'The Administrator has not chosen a viewer for this combination of resource and dataset type.';
  drupal_exit();
}

/*
 * If this returns a value then a viewer was NOT found.
 * All viewers will immediately print and exit.
 */
function sidora_resource_version_viewer_display($pid, $dsid, $viewer, $version = '0') {
  module_load_include('inc', 'sidora', 'includes/workbench_viewers');
  /*
  $resource_viewer_dsid_prefix = 'resource_viewer_dsid_';
  $resource_viewer_view_prefix = 'resource_viewer_viewer_';
  TODO: make these static and used in the module and admin.inc
  */
  global $base_url;
  $obj = sidora_obj($pid);
  if (empty($obj)) {
    return;
  }
  $ds = $obj[$dsid];
  if (!empty($ds)) {
    switch ($viewer) {
      case 'direct':
        sidora_info_version($pid, $dsid, $version, 'browser');
        break;
      case 'web_view':
        $viewable_mime_types = sidora_get_viewable_mime_types();
        if (in_array($ds[$version]->mimetype, $viewable_mime_types)) {
          sidora_info_version($pid, $dsid, $version, 'browser');
        }
        else {
          $datastream_content = $ds[$version];
          $islandora_base_url = variable_get('islandora_base_url','');
          $datastream_version_content = $islandora_base_url . '/objects/'.$pid."/datastreams/".$ds->id."/content?asOfDateTime=".$datastream_content->createdDate;
          if (sidora_direct_jpg_output($datastream_version_content, FALSE)) {
            sidora_direct_jpg_output($datastream_version_content);
          }
          else {
            sidora_info_version($pid,$dsid, $version, 'download');
          }
        }
        break;
      case 'img_src_webpage':
        print '<html><body>';
        print '<img src="';
        print $GLOBALS['base_url'].'/sidora/info/'.$pid.'/meta/OBJ/download';
        print '">';
        print '</body></html>';
        drupal_exit();
        break;
      case 'pdfjs':
        sidora_get_html_pdfjs($pid, $dsid, $version);
        drupal_exit();
        break;
      case 'JW Audio Player':
        print sidora_audio_view_object($pid);
        drupal_exit();
        break;
      case 'JW Video Player':
        print sidora_video_view_object($pid);
        drupal_exit();
        break;
      case 'IDS':
        sidora_view_ids_iframe($pid, $dsid);
        break;
      case 'OpenSeaDragon':
        if ($dsid == 'OBJ') {
          // override to show DISPLAY instead of OBJ on .nef files
          $obj = sidora_obj($pid);
          $name = $obj['OBJ']->label;
          if (sidora_endsWith(strtolower($name), ".nef")){
            $dsid = 'DISPLAY';
          }
        }
        sidora_view_openseadragon($pid, $dsid, $version);
        break;
      case 'PHPExcel':
        sidora_tabular_view_phpexcelreader($pid,$dsid);
        break;
    }
  }
  return NULL;
}

/**
 * This function was created to enable viewing and download of different versions of a
 * datastream
 */
function sidora_info_version($pid, $datastream, $version='0', $download='browser') {
  module_load_include('inc', 'sidora', 'includes/utils');
  $object = sidora_obj($pid);
  if (empty($object)) {
    print t('Object not found');
    drupal_exit();
  }
  $ds = $object[$datastream];
  $datastream_content = $ds[$version];
  $islandora_base_url = variable_get('islandora_base_url','');
  $mime_type = (empty($datastream))?'text/xml':$datastream_content->mimeType;

  $direct_url_to_content = $islandora_base_url . '/objects/' . $pid . '/datastreams/' . $ds->id .'/content';
  $direct_url_to_content .= '?asOfDateTime='.$datastream_content->createdDate;

  if (($download == 'browser') && (strpos($mime_type,"xml") !== FALSE || strpos($mime_type,"text") !== FALSE)) {

  // html, text, csv
    header("Content-type: html");
    print file_get_contents($direct_url_to_content);
  }
  else {
    header("Content-type: $mime_type");
    if ($datastream_content->controlGroup == 'M' || $datastream_content->controlGroup == 'X') {
      header('Content-length: ' . $datastream_content->size);
    }
    $extension = sidora_get_file_extension_from_mime($datastream_content->mimetype);
    // Prevent adding on a duplicate extension.
    $label = $datastream_content->label;
    $filename = $label;
    $filename .= $extension;
    header("Content-Disposition: attachment; filename=\"$filename\"");
    print file_get_contents($direct_url_to_content);
  }
  drupal_exit();
}

/*
 * Redirect form submit to a new URL which will redisplay the data
 */
function sidora_revert_datastream_form_submit(array $form, array &$form_state) {
  $form_state['redirect'] = "sidora/version_history/" . $form_state['object_id'] . "/" . $form_state['dsid'];
}

/*
 * Redirect form submit to a new URL which will redisplay the data
 */
function sidora_delete_datastream_form_submit(array $form, array &$form_state) {
  $form_state['redirect'] = "sidora/version_history/" . $form_state['datastream']->parent->id . "/" . $form_state['datastream']->id;
}

/*
 * Basic proxy to talk with the openseadragon backend without showing the user the server names and ensuring that
 * the drupal user has access to this pid
 */
function sidora_osd_proxy_version($pid, $datastream='OBJ', $version='0') {
  module_load_include('inc', 'sidora', 'includes/utils');
  global $user;
  if (!sidora_allow($user,$pid,'view')) drupal_not_found();
  $obj = sidora_obj($pid);
  $ds = $obj[$datastream];
  $datastream_content = $ds[$version];
  $qs = $_SERVER['QUERY_STRING'];
  $postfix = variable_get('osd_proxy_pid_postfix', '');
  if ($datastream == 'DISPLAY' && strpos($postfix, '/OBJ/') !== FALSE) {
      // override to show DISPLAY instead of OBJ on .nef files
      $obj = sidora_obj($pid);
      $name = $obj['OBJ']->label;
      if (sidora_endsWith(strtolower($name), ".nef")){
        $postfix = str_replace('/OBJ/','/DISPLAY/', $postfix);
      }
  }
  $qs = str_replace(
    urlencode("{replacer}"),
    urlencode(variable_get('osd_proxy_pid_prefix', '')).
    urlencode($pid).
    urlencode($postfix).
    '?asOfDateTime=' .
    urlencode($datastream_content->createdDate),
    $qs
  );
  if (strpos($qs,'degraded') !== false) {
    $qs = preg_replace('/svc.region'.'=[^&]+(&|$)/', '', $qs);
  }
  $url = variable_get('osd_proxy_resolver_url', '').'?'.$qs;
  if (strpos($qs,'degraded') !== false) {
    $im = imagecreatefromstring(file_get_contents($url));
    ob_start();
    imagejpeg($im);
    $img = ob_get_clean();
    print "data:image/jpeg;base64," . base64_encode($img);
  }
  else {
    print file_get_contents($url);
  }
  drupal_exit();
}

/*
 * hook_<model>_islandora_ingest_steps_alter to remove the upload as SIdora is already used for that
 */
function sidora_islandora_sp_videoCModel_islandora_ingest_steps_alter(array &$steps, array &$form_state) {
 unset($steps['islandora_video_upload']);
}

/*
 * Video viewer piggy-back on the islandora viewer
 */
function sidora_video_view_object($pid) {
  $object = sidora_obj($pid);
  if (empty($object)) {
    return '';
  }
  $variables = array('object' => $object);
  $output = theme('islandora_video', $variables);
  $output = drupal_get_css() . drupal_get_js() . $output;
  return $output;
}

/*
 * The assumption problems holds information on fedora objects that don't seem
 * to fit properly into the SIdora workbench.  The workbench is made up of resources,
 * concepts, codebooks, users and relationships between them. If the relationships
 * don't make sense or the Fedora object does not fall into one of those categories
 * then store that information.
 * The array will look like this:
 * array (
 *   'object_issues' => array(
 *       '<pid>' => array(
 // standard array of object problems encountered by this pid (2 probs)
 *         array('description' => 'description of problem', 'time' => '<time>'),
 *         array('description' => 'description of problem', 'time' => '<time>'),
         ),
 *       '<pid>' => array(
 // array of object problems encountered by this pid (1 prob)
           array('description' => 'description of problem', 'time' => '<time>')),
         ),
 *       ...
 *   ),
 *   'relationship_issues' => array(
 *       '<pid containing rel>' => array(
 // standard array of relationship problems encountered by pid
 *         array(
 *           'description' => 'description of problem',
 *           'dsid' => '<datastream containing problem relationship, usually RELS-EXT>',
 *           'predicate_object' => '<string of the predicate, usually the pid of the related obj>'
 *           'time' => '<time>',
 *         ),
 *       ),
 *       '<pid containing rel>' => array(
 *         array(
 *           'dsid' => '<datastream containing problem relationship, usually RELS-EXT>',
 *           'predicate_object' => '<string of the predicate, usually the pid of the related obj>'
 *           'description' => 'description of problem',
 *           'time' => '<time>',
 *         ),
 *       ),
 *    ),
 *    'other_issues' => array(
 // These do not have associative array nature, just basic array
 *
 // other_issues will also "accept" any type of information and store it
 *      array (
 *        'description' => 'description of problem',
 *        'pids_involved' => array('<pid 1>','<pid 2>'),
 // Can be empty if a generic error
 *        'time' => '<time>',
 *      ),
 *      ...
 *    )
 *
 * Recap: 'object_issues','relationship_issues','other_issues' each with own structure
 */
function sidora_add_fedora_assumption_problem($type, $problem, $pid = '') {
  // Only record assumption problems when people are going to be looking at the log
  // Otherwise we could do lots of recording which slows the system and grows the
  // database but get no benefit from it
  $stop_milli = variable_get('sidora_log_assumption_stop',0);
  if (empty($stop_milli)) {
    return;
  }
  if ($stop_milli < microtime(true)) {
    return;
  }
  $assumption_problems = variable_get('sidora_assumption_problems',array(
    'object_issues' => array(),
    'relationship_issues' => array(),
    'other_issues' => array(),
  ));
  // Convert back to array if it became a stdObject through a config transfer
  $assumption_problems = json_decode(json_encode($assumption_problems), true);
  switch ($type) {
    case 'object_issues':
    case 'relationship_issues':
      if (empty($assumption_problems[$type][$pid])) {
        $assumption_problems[$type][$pid] = array();
      }
      $assumption_problems[$type][$pid][] = $problem;
      break;
    default:
      $assumption_problems['other_issues'][] = $problem;
  }
  variable_set('sidora_assumption_problems', $assumption_problems);
}

/*
 * Adds an assumption problem to the assumption problem list
 * $pid - the pid where the assumption is violated
 * $description - information on what happened to violate the assumption
 */
function sidora_add_fedora_assumption_problem_object($pid, $description) {
  $problem = array (
    'description' => $description,
    'time' => date('Y-m-d H:i:s'),
  );
  sidora_add_fedora_assumption_problem('object_issues', $problem, $pid);
}

/*
 * Adds an assumption problem to the assumption problem list
 * $pid - the pid where the assumption is violated
 * $dsid - where the relationship assumption violation occurred (usually RELS-EXT)
 * $predicate_pid - the target of the relationship
 * $description - information on what happened to violate the assumption
 */
function sidora_add_fedora_assumption_problem_relationship($pid, $description, $dsid, $predicate_pid) {
  $problem = array (
    'description' => $description,
    'time' => date('Y-m-d H:i:s'),
    'dsid' => $dsid,
    'predicate_object' => $predicate_pid,
  );
  sidora_add_fedora_assumption_problem('relationship_issues', $problem, $pid);
}

/*
 * Adds an assumption problem to the assumption problem list
 * $description - information on what happened to violate the assumption
 * $pids - a simple array of pids that were involved in the assumption (can be empty)
 */
function sidora_add_fedora_assumption_problem_other($description, $pids = array()) {
  $problem = array (
    'description' => $description,
    'time' => date('Y-m-d H:i:s'),
    'pids_involved' => $pids,
  );
  sidora_add_fedora_assumption_problem('other_issues', $problem);
}

/*
 * This creates an Import XML for an existing form
 * while retaining any associations
 * copied from the import xml functionality in XML Form Builder Module
 */
function sidora_import_xml_form($form, array &$form_state, $form_name) {
  module_load_include('inc', 'xml_form_builder', 'Create');
  if (isset($_POST['cancel'])) {
    drupal_goto('admin/islandora/xmlform');
  }
  $return = array();
  $return['#attributes'] = array(
    'enctype' => "multipart/form-data",
  );
  $return['form_name'] = array(
    '#type' => 'hidden',
    '#required' => TRUE,
    '#maxlength' => 128,
    '#value' => $form_name,
  );
  $return['header'] = array(
    '#markup' => t('Importing XML template for %form', array('%form' => $form_name)),
  );
  $return['file'] = array(
      '#type' => 'file',
      '#title' => t('Form Definition'),
      '#size' => 64,
      '#description' => t('XML form definition template.'),
      '#element_validate' => array('xml_form_builder_create_validate'),
    );
  $return['create'] = array(
    '#type' => 'submit',
    '#value' => t('Create'),
    '#name' => 'create',
  );

  $return['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#name' => 'cancel',
  );

  return $return;
}

function sidora_import_xml_form_submit(array $form, array &$form_state) {
  $form_name = $form_state['values']['form_name'];
  if ($form_state['clicked_button']['#name'] == 'create') {
    $file_uploaded = isset($_FILES['files']['error']['file']) && ($_FILES['files']['error']['file'] == 0);
    if ($file_uploaded) {
      $filename = $_FILES['files']['tmp_name']['file'];
      $definition = new DOMDocument();
      $xml_definition = xml_form_builder_create_get_uploaded_file();
      $xml_definition = isset($xml_definition) ? $xml_definition : xml_form_api_get_empty_form_definition();
      $xml_definition = XMLFormDefinition::upgradeToLatestVersion($xml_definition);
      $object = new stdClass();
      $object->name = $form_name;
      $object->form = $xml_definition->saveXML();
      if (drupal_write_record('xml_forms', $object, 'name') !== FALSE) {
        drupal_set_message(t('XML imported successfully into %form', array('%form' => $form_name)),'status');
      }
    }
    else {
      drupal_set_message(t('Valid XML template not uploaded'), 'warning');
    }
  }
  $form_state['redirect'] = "admin/islandora/xmlform";
}
/**
 * Return the drupal uid from a username (or NULL)
 */
function sidora_get_uid_from_username($username) {
  $output = db_select('users','u')->fields('u', array('uid'))->condition('name',$username,'=')->execute()->fetchAssoc();
  if (!empty($output)) {
    foreach($output as $record) {
      return $record;
    }
  }
  return NULL;
}

function sidora_debug_string_backtrace() {
  ob_start();
  debug_print_backtrace();
  $trace = ob_get_contents();
  ob_end_clean();

  // Remove first item from backtrace as it's this function which
  // is redundant.
  $trace = preg_replace ('/^#0\s+' . __FUNCTION__ . "[^\n]*\n/", '', $trace, 1);
  return $trace;
}

function sidora_drupal_goto_alter(&$path, &$options, &$http_response_code) {
  /*
  $to_save = sidora_debug_string_backtrace();
  ob_start();
  $args = func_get_args();
  $objects = ob_get_contents();
  ob_end_clean();
  watchdog('SIGotoCheck',$to_save . '<hr>' . $objects);
  */
}




/**
 * html_convert_entities($string) -- convert named HTML entities to
 * XML-compatible numeric entities.
 * Code originally from: http://inanimatt.com/php-convert-entities.php
 */

function sidora_html_convert_entities($string) {
  return preg_replace_callback('/&([a-zA-Z][a-zA-Z0-9]+);/',
                               'sidora_convert_entity', $string);
}


/**
 * Swap HTML named entity with its numeric equivalent. If the entity
 * isn't in the lookup table, this function returns a blank, which
 * destroys the character in the output - this is probably the
 * desired behaviour when producing XML.
 * Code originally from: http://inanimatt.com/php-convert-entities.php
 */
function sidora_convert_entity($matches) {
  static $table = array('quot'    => '&#34;',
                        'amp'      => '&#38;',
                        'lt'       => '&#60;',
                        'gt'       => '&#62;',
                        'OElig'    => '&#338;',
                        'oelig'    => '&#339;',
                        'Scaron'   => '&#352;',
                        'scaron'   => '&#353;',
                        'Yuml'     => '&#376;',
                        'circ'     => '&#710;',
                        'tilde'    => '&#732;',
                        'ensp'     => '&#8194;',
                        'emsp'     => '&#8195;',
                        'thinsp'   => '&#8201;',
                        'zwnj'     => '&#8204;',
                        'zwj'      => '&#8205;',
                        'lrm'      => '&#8206;',
                        'rlm'      => '&#8207;',
                        'ndash'    => '&#8211;',
                        'mdash'    => '&#8212;',
                        'lsquo'    => '&#8216;',
                        'rsquo'    => '&#8217;',
                        'sbquo'    => '&#8218;',
                        'ldquo'    => '&#8220;',
                        'rdquo'    => '&#8221;',
                        'bdquo'    => '&#8222;',
                        'dagger'   => '&#8224;',
                        'Dagger'   => '&#8225;',
                        'permil'   => '&#8240;',
                        'lsaquo'   => '&#8249;',
                        'rsaquo'   => '&#8250;',
                        'euro'     => '&#8364;',
                        'fnof'     => '&#402;',
                        'Alpha'    => '&#913;',
                        'Beta'     => '&#914;',
                        'Gamma'    => '&#915;',
                        'Delta'    => '&#916;',
                        'Epsilon'  => '&#917;',
                        'Zeta'     => '&#918;',
                        'Eta'      => '&#919;',
                        'Theta'    => '&#920;',
                        'Iota'     => '&#921;',
                        'Kappa'    => '&#922;',
                        'Lambda'   => '&#923;',
                        'Mu'       => '&#924;',
                        'Nu'       => '&#925;',
                        'Xi'       => '&#926;',
                        'Omicron'  => '&#927;',
                        'Pi'       => '&#928;',
                        'Rho'      => '&#929;',
                        'Sigma'    => '&#931;',
                        'Tau'      => '&#932;',
                        'Upsilon'  => '&#933;',
                        'Phi'      => '&#934;',
                        'Chi'      => '&#935;',
                        'Psi'      => '&#936;',
                        'Omega'    => '&#937;',
                        'alpha'    => '&#945;',
                        'beta'     => '&#946;',
                        'gamma'    => '&#947;',
                        'delta'    => '&#948;',
                        'epsilon'  => '&#949;',
                        'zeta'     => '&#950;',
                        'eta'      => '&#951;',
                        'theta'    => '&#952;',
                        'iota'     => '&#953;',
                        'kappa'    => '&#954;',
                        'lambda'   => '&#955;',
                        'mu'       => '&#956;',
                        'nu'       => '&#957;',
                        'xi'       => '&#958;',
                        'omicron'  => '&#959;',
                        'pi'       => '&#960;',
                        'rho'      => '&#961;',
                        'sigmaf'   => '&#962;',
                        'sigma'    => '&#963;',
                        'tau'      => '&#964;',
                        'upsilon'  => '&#965;',
                        'phi'      => '&#966;',
                        'chi'      => '&#967;',
                        'psi'      => '&#968;',
                        'omega'    => '&#969;',
                        'thetasym' => '&#977;',
                        'upsih'    => '&#978;',
                        'piv'      => '&#982;',
                        'bull'     => '&#8226;',
                        'hellip'   => '&#8230;',
                        'prime'    => '&#8242;',
                        'Prime'    => '&#8243;',
                        'oline'    => '&#8254;',
                        'frasl'    => '&#8260;',
                        'weierp'   => '&#8472;',
                        'image'    => '&#8465;',
                        'real'     => '&#8476;',
                        'trade'    => '&#8482;',
                        'alefsym'  => '&#8501;',
                        'larr'     => '&#8592;',
                        'uarr'     => '&#8593;',
                        'rarr'     => '&#8594;',
                        'darr'     => '&#8595;',
                        'harr'     => '&#8596;',
                        'crarr'    => '&#8629;',
                        'lArr'     => '&#8656;',
                        'uArr'     => '&#8657;',
                        'rArr'     => '&#8658;',
                        'dArr'     => '&#8659;',
                        'hArr'     => '&#8660;',
                        'forall'   => '&#8704;',
                        'part'     => '&#8706;',
                        'exist'    => '&#8707;',
                        'empty'    => '&#8709;',
                        'nabla'    => '&#8711;',
                        'isin'     => '&#8712;',
                        'notin'    => '&#8713;',
                        'ni'       => '&#8715;',
                        'prod'     => '&#8719;',
                        'sum'      => '&#8721;',
                        'minus'    => '&#8722;',
                        'lowast'   => '&#8727;',
                        'radic'    => '&#8730;',
                        'prop'     => '&#8733;',
                        'infin'    => '&#8734;',
                        'ang'      => '&#8736;',
                        'and'      => '&#8743;',
                        'or'       => '&#8744;',
                        'cap'      => '&#8745;',
                        'cup'      => '&#8746;',
                        'int'      => '&#8747;',
                        'there4'   => '&#8756;',
                        'sim'      => '&#8764;',
                        'cong'     => '&#8773;',
                        'asymp'    => '&#8776;',
                        'ne'       => '&#8800;',
                        'equiv'    => '&#8801;',
                        'le'       => '&#8804;',
                        'ge'       => '&#8805;',
                        'sub'      => '&#8834;',
                        'sup'      => '&#8835;',
                        'nsub'     => '&#8836;',
                        'sube'     => '&#8838;',
                        'supe'     => '&#8839;',
                        'oplus'    => '&#8853;',
                        'otimes'   => '&#8855;',
                        'perp'     => '&#8869;',
                        'sdot'     => '&#8901;',
                        'lceil'    => '&#8968;',
                        'rceil'    => '&#8969;',
                        'lfloor'   => '&#8970;',
                        'rfloor'   => '&#8971;',
                        'lang'     => '&#9001;',
                        'rang'     => '&#9002;',
                        'loz'      => '&#9674;',
                        'spades'   => '&#9824;',
                        'clubs'    => '&#9827;',
                        'hearts'   => '&#9829;',
                        'diams'    => '&#9830;',
                        'nbsp'     => '&#160;',
                        'iexcl'    => '&#161;',
                        'cent'     => '&#162;',
                        'pound'    => '&#163;',
                        'curren'   => '&#164;',
                        'yen'      => '&#165;',
                        'brvbar'   => '&#166;',
                        'sect'     => '&#167;',
                        'uml'      => '&#168;',
                        'copy'     => '&#169;',
                        'ordf'     => '&#170;',
                        'laquo'    => '&#171;',
                        'not'      => '&#172;',
                        'shy'      => '&#173;',
                        'reg'      => '&#174;',
                        'macr'     => '&#175;',
                        'deg'      => '&#176;',
                        'plusmn'   => '&#177;',
                        'sup2'     => '&#178;',
                        'sup3'     => '&#179;',
                        'acute'    => '&#180;',
                        'micro'    => '&#181;',
                        'para'     => '&#182;',
                        'middot'   => '&#183;',
                        'cedil'    => '&#184;',
                        'sup1'     => '&#185;',
                        'ordm'     => '&#186;',
                        'raquo'    => '&#187;',
                        'frac14'   => '&#188;',
                        'frac12'   => '&#189;',
                        'frac34'   => '&#190;',
                        'iquest'   => '&#191;',
                        'Agrave'   => '&#192;',
                        'Aacute'   => '&#193;',
                        'Acirc'    => '&#194;',
                        'Atilde'   => '&#195;',
                        'Auml'     => '&#196;',
                        'Aring'    => '&#197;',
                        'AElig'    => '&#198;',
                        'Ccedil'   => '&#199;',
                        'Egrave'   => '&#200;',
                        'Eacute'   => '&#201;',
                        'Ecirc'    => '&#202;',
                        'Euml'     => '&#203;',
                        'Igrave'   => '&#204;',
                        'Iacute'   => '&#205;',
                        'Icirc'    => '&#206;',
                        'Iuml'     => '&#207;',
                        'ETH'      => '&#208;',
                        'Ntilde'   => '&#209;',
                        'Ograve'   => '&#210;',
                        'Oacute'   => '&#211;',
                        'Ocirc'    => '&#212;',
                        'Otilde'   => '&#213;',
                        'Ouml'     => '&#214;',
                        'times'    => '&#215;',
                        'Oslash'   => '&#216;',
                        'Ugrave'   => '&#217;',
                        'Uacute'   => '&#218;',
                        'Ucirc'    => '&#219;',
                        'Uuml'     => '&#220;',
                        'Yacute'   => '&#221;',
                        'THORN'    => '&#222;',
                        'szlig'    => '&#223;',
                        'agrave'   => '&#224;',
                        'aacute'   => '&#225;',
                        'acirc'    => '&#226;',
                        'atilde'   => '&#227;',
                        'auml'     => '&#228;',
                        'aring'    => '&#229;',
                        'aelig'    => '&#230;',
                        'ccedil'   => '&#231;',
                        'egrave'   => '&#232;',
                        'eacute'   => '&#233;',
                        'ecirc'    => '&#234;',
                        'euml'     => '&#235;',
                        'igrave'   => '&#236;',
                        'iacute'   => '&#237;',
                        'icirc'    => '&#238;',
                        'iuml'     => '&#239;',
                        'eth'      => '&#240;',
                        'ntilde'   => '&#241;',
                        'ograve'   => '&#242;',
                        'oacute'   => '&#243;',
                        'ocirc'    => '&#244;',
                        'otilde'   => '&#245;',
                        'ouml'     => '&#246;',
                        'divide'   => '&#247;',
                        'oslash'   => '&#248;',
                        'ugrave'   => '&#249;',
                        'uacute'   => '&#250;',
                        'ucirc'    => '&#251;',
                        'uuml'     => '&#252;',
                        'yacute'   => '&#253;',
                        'thorn'    => '&#254;',
                        'yuml'     => '&#255;'

                        );
  // Entity not found? Destroy it.
  return isset($table[$matches[1]]) ? $table[$matches[1]] : '';
}

function sidora_upload_batch($upload_files_array,$ontology_id) {
  global $user;
  if ((!empty($upload_files_array)) && (count($upload_files_array) > 0)) {
    $unique_id = uniqid(preg_replace('/\s+/', '_', $user->name));
    $fields =
       array(
        'batch_id',
        'owner',
        'Created',
  'count',
  'resource_type'
  );
    $insert_query = db_insert('sidora_batch_ingest')->fields($fields);
    $insert_query->values(
      array(
        'batch_id' => $unique_id,
        'owner' => $user->name,
        'Created' => date('Y-m-d H:i:s'),
  'count' => count($upload_files_array),
  'resource_type' => $ontology_id
      )
    );
    $output = $insert_query->execute();
    $files = sidora_create_batch_filelist($unique_id,$upload_files_array);
    if ((is_array($files)) && (!empty($files))) {
      $update_query = db_update('sidora_batch_ingest')
         ->fields(array(
          'filenames' => serialize($files),
    'status' => 'file list generated'
       ))
        ->condition('batch_id', $unique_id, '=');
      $num_updated = $update_query->execute();
      return $unique_id;
    }
  }
  return;
}

function sidora_ingest_request($url,$post_data) {
  return sidora_call_batch_API("POST",$url,$post_data);
}

function sidora_create_batch_filelist($batch_id,$uploaded_files) {
  $domtree = new DOMDocument('1.0', 'UTF-8');
  $domtree->formatOutput = TRUE;
  $batch_tag = $domtree->createElement('batch');
  $batch_tag = $domtree->appendChild($batch_tag);
  $batch_id_xml = $domtree->createElement('batch_id',$batch_id);
  $batch_id_xml = $batch_tag->appendChild($batch_id_xml);
  $files_array = array();
  foreach ($uploaded_files as $file) {
    $unique_filename = sidora_toAscii($batch_id . '_' . $file->filename);
    if (file_unmanaged_copy($file->filepath, 'public://' . $unique_filename)) {
      $filename_xml = $domtree->createElement('file', str_replace('https://','http://',file_create_url('public://' . '/' . $unique_filename)));
      //$filename_xml = $batch_tag->appendChild($filename_xml);
      $batch_tag->appendChild($filename_xml);
      $filename_xml->setAttribute("originalname", $file->filename);
      $files[] = array('original' => $file->filename,'ingest' => $unique_filename);
    }
    else {
      return;
    }
  }
  $domtree->save('public://' . 'files_' . $batch_id . '.xml');
  return $files;
}

function sidora_create_association_xml($batch_id,$association) {
  $domtree = new DOMDocument('1.0', 'UTF-8');
  $domtree->formatOutput = TRUE;
  $batch_tag = $domtree->createElement('association');
  $batch_tag = $domtree->appendChild($batch_tag);
  if (!empty($association['transform']) && (FALSE === strpos($association['transform'], 'http'))){
    global $base_url;
    global $base_path;
    $prepend = str_replace('https://','http://',$base_url . $base_path . 'sites/all/modules/sidora_specific/transforms/');
    $association['transform'] = $prepend . $association['transform'];
  }
//  dsm($association);
  sidora_array_to_xml($association,$batch_tag,$domtree);
  $domtree->save('public://' . 'association_' . $batch_id . '.xml');
  return 1;
}

function sidora_call_batch_API($method, $url, $data = false)
{
  $curl = curl_init();
  switch ($method)
  {
    case "POST":
      curl_setopt($curl, CURLOPT_POST, 1);
      if ($data) curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
      break;
    case "PUT":
      curl_setopt($curl, CURLOPT_PUT, 1);
      break;
    default:
      if ($data) $url = sprintf("%s?%s", $url, http_build_query($data));
  }
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  $result = curl_exec($curl);
  $curl_dump_info = substr(curl_error($curl),0,1024);
  if (!empty($curl_dump_info)) {
    watchdog('Sidora_debug',t("Bulk metadata Curl error:<br/> %curl_dump",
                array('%curl_dump' => substr(curl_error($curl),0,1024)))
                );
  }
  curl_close($curl);
  return $result;
}

function sidora_get_nested_title_field($field_array,$parent_array) {
  if (is_array($field_array) && is_array($parent_array)) {
    return (drupal_array_get_nested_value($parent_array,$field_array));
  }
  return;
}
function sidora_get_available_memory(){
  $memory_limit = _sidora_return_bytes(ini_get('memory_limit'));
  return $memory_limit;
}
/**
* Converts shorthand memory notation value to bytes
* From http://php.net/manual/en/function.ini-get.php
*
* @param $val Memory size shorthand notation string
*/
function _sidora_return_bytes($val) {
    $val = trim($val);
    $last = strtolower($val[strlen($val)-1]);
    $val = substr($val, 0, -1);
    switch($last) {
        // The 'G' modifier is available since PHP 5.1.0
        case 'g':
            $val *= 1024;
        case 'm':
            $val *= 1024;
        case 'k':
            $val *= 1024;
    }
    return $val;
}

function sidora_check_opt_in_for_wi(AbstractObject $object){
  $wi_infos = sidora_get_wi_type($object, TRUE);

  if (!empty($wi_infos)){
    foreach($wi_infos as $wi_info) {
      $opt_in = FALSE;
      $parent_id = $object->id;
      for($i = 0; $i <= $wi_info['max_distance_to_project']; $i++){
        $checker_id = $parent_id;
        if ($i >= $wi_info['min_distance_to_project']){
          // $checker_id should now hold the pid of the project, which we need to check to see if it's opt-in is checked
          $project_obj = sidora_obj($checker_id);

          if (!empty($project_obj) && (!empty($project_obj['EAC-CPF']))){
            $content = $project_obj['EAC-CPF']->content;
            if (!empty($content)){
              $doc = new DOMDocument();
              $docToLoad = ($content);
              $doc->loadXML($docToLoad);
              $existing_wi_opt_in_nodes = $doc->getElementsByTagName(SIDORA_EMAMMAL_OPT_IN_TAG);
              foreach($existing_wi_opt_in_nodes as $exister){
                $opt_in = $exister->nodeValue;
              }
            }
          }
          if ("" . $opt_in === "1"){
            return TRUE;
          }
        }
        if ($i < $wi_info['max_distance_to_project']){
          module_load_include('inc', 'sidora', 'includes/utils');
          // use isAdministeredBy if exists
          $parent_id = sidora_get_owning_parent_concept_pid_by_administered_pid($checker_id);
          if (empty($parent_id)){
            $parents = sidora_get_parent_concepts_by_pid($checker_id);
            foreach($parents as $ppid => $parent){
              $parent_id = $ppid;
            }
          }
        }
      }
    }
  }
  return FALSE;
}

/**
 * Helper function to return the base type of the WI object for this Fedora object
 */
function sidora_get_wi_type($object, $return_distances = FALSE){
  if (empty($object)){
    return NULL;
  }
  if (!is_object($object)){
    return NULL;
  }
  $fedora_models_to_wi_type = sidora_get_fedora_models_to_wi_type();
  $models = ($object->relationships->get('info:fedora/fedora-system:def/model#', 'hasModel'));
  $wi_model_types = array_keys($fedora_models_to_wi_type);
  $wi_info = array();
  foreach($models as $model_rel) {
    $model = $model_rel['object']['value'];
    if (in_array($model, $wi_model_types)){
      $check = $fedora_models_to_wi_type[$model];
      if (is_array($check)){
        if (!empty($object) && (!empty($object['EAC-CPF']))){
          // For right now we'll hack this for project / subproject
          // it was originally designed for subprojects that had a different model
          // than projects, refactor when appropriate
          $multi = $check;
          foreach($multi as $indiv){
            $content = $object['EAC-CPF']->content;
            if ($indiv['wi_type'] == 'subproject' && strpos($content, "<recordId>s") > 0){
              $check = $indiv;
            }
            if ($indiv['wi_type'] == 'project' && strpos($content, "<recordId>p") > 0){
              $check = $indiv;
            }
          }
        }
      }
      if (!$return_distances){
        if (empty($check['wi_type'])){
          return '';
        }
        return $check['wi_type'];
      }
      $wi_info[] = $check;
    }
  }
  return $wi_info;
}

/**
 * Helper single location for this array of info linking Feodra to WI types
 */
function sidora_get_fedora_models_to_wi_type(){
  return array(
    'si:projectCModel' => array(
       array(
         'min_distance_to_project' => 0,
         'max_distance_to_project' => 0,
         'wi_type' => 'project',
       ),
       array(
         'min_distance_to_project' => 1,
         'max_distance_to_project' => 1,
         'wi_type' => 'subproject',
       ),
    ),
    'si:cameraTrapCModel' => array(
       'min_distance_to_project' => 2,
       'max_distance_to_project' => 3,
       'wi_type' => 'deployment',
    ),
    'si:generalImageCModel' => array(
       'min_distance_to_project' => 3,
       'max_distance_to_project' => 4,
       'wi_type' => 'dataFile',
    ),
    /*
    'si:datasetCModel' => array(
       'min_distance_to_project' => 3,
       'max_distance_to_project' => 4,
       'wi_type' => 'dataFile',
    ),
    */
    // Optional level of plots push things one down
  );
}

/**
 * Function for calling sidora-wi camel route code
 * @param  string $pid pid of fedora object to pass to camel route
 * @return boolean     true on success, false on failure
 *
 * src: https://www.sitepoint.com/using-curl-for-remote-requests/
 */
function sidora_wi_curl_request($pid, $opt_in)
{
  $ch = curl_init();
  $headers = array();
  $headers[] = 'Content-Type: application/json';

  $opt_in_string = $opt_in?"true":"false";
  $data_fields = array('wiProjectPid'=>$pid, 'enabled' => $opt_in_string);
  $data = json_encode($data_fields);


  curl_setopt_array($ch, array(
    CURLOPT_URL => variable_get("sidora_wi_url", ""),
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_HTTPHEADER => $headers,
    CURLOPT_POSTFIELDS => $data
  ));
  // execute
  $output = curl_exec($ch);

  // Check if any error occurred
  if (!curl_errno($ch))
  {
    switch ($http_code = curl_getinfo($ch, CURLINFO_HTTP_CODE))
    {
      case 200:  # OK
        break;
      default:
        watchdog("sidora", "Unexpected HTTP code:  !http", array("!http" => $http_code), WATCHDOG_ERROR);
    }
  }

  // free
  curl_close($ch);

  return $output;
}
