<?php
$islandora_module_path = drupal_get_path('module', 'islandora');
@include_once 'sites/all/libraries/tuque/FedoraRelationships.php';


module_load_include('inc', 'xml_forms', 'builder/includes/datastream.form'); //BBB TODO TBD REMOVE, figure out how to do this properly:
//The issue is that the ahah call on the edit metadata form can't find the function for the form
//So it throws an error.  This is related to SID-305
 
/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function sidora_help($path, $arg) {
  switch ($path) {
    case "admin/help#sidora":
      $output =  '<p>' . t("Sidora") . '</p>';
      $output .=  '<p>' . t("Smithsonian Institution's module to allows users to store and share information.") . '</p>';
      return $output;
      break;
  }
}
/**
 * Implements hook_block_info().
 */
function sidora_block_info(){
  $blocks['sidora_navigation'] = array(
    'info' => t('Sidora Navigation'),
    'cache' => DRUPAL_NO_CACHE, //Our caching is done with the Sidora specific caching
  );
  $blocks['sidora_individual_resource_info'] = array(
    'info' => t('Sidora Individual Resource Information'),
    'cache' => DRUPAL_NO_CACHE, //Our caching is done with the Sidora specific caching
  );
  $blocks['sidora_concept_info'] = array(
    'info' => t('Sidora Concept Information'),
    'cache' => DRUPAL_NO_CACHE, //Our caching is done with the Sidora specific caching
  );
  return $blocks;
}


/**
 * Implements hook_menu().
 */
function sidora_menu() {
  return array(
    'admin/sidora/configure' => array(
      'title' => 'Sidora Configuration',
      'description' => 'Configure the Sidora Module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'sidora.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'sidora/upload' => array(
      'description' => 'Uploader for files',
      'page callback' => 'sidora_upload',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_NORMAL_ITEM,
    ),
    'sidora/workbench' => array(
      'title callback' => 'sidora_title_callback',
      'description' => '',
      'page callback' => 'sidora_main_non_block_content',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_NORMAL_ITEM,
    ),
    'sidora/info' => array(
      'title' => 'Sidora Information',
      'description' => 'General Information Interface',
      'page callback' => 'sidora_info_json',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/edit_metadata' => array(
      'title' => 'Edit Metadata',
      'description' => 'Edit the metadata of a datastream with a specified form',
      'page callback' => 'sidora_edit_metadata',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/manage' => array(
      'title' => 'Manage Object',
      'description' => 'Show the management panel',
      'page callback' => 'sidora_management_panel',
      'type' => MENU_CALLBACK,
      'access callback' => 'user_access',
      'access arguments' => array('administer site configuration'),
    ),
    'sidora/create_resource' => array(
      'title' => 'Create Resource',
      'description' => 'Create a new concept',
      'page callback' => 'sidora_create_resource',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/create_concept' => array(
      'title' => 'Create Concept',
      'description' => 'Create a new concept',
      'page callback' => 'sidora_create_concept',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/ajax_parts' => array(
      'title' => 'Ajax Parts',
      'description' => 'Specifically for use with ajax, returning HTML snippets',
      'page callback' => 'sidora_ajax_parts',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/test' => array(
      'title' => 'TESTING',
      'description' => 'Not intended to be used in production',
      'page callback' => 'sidora_testing',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
     'sidora/workbench/test' => array(
      'title' => 'TESTING',
      'description' => 'Not intended to be used in production',
      'page callback' => 'sidora_testing',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
   'sidora/codebook/autocomplete' => array(
      'title' => 'Codebook Autocomplete',
      'description' => 'Return codebook information',
      'page callback' => 'sidora_codebook_autocomplete',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
    'sidora/resource_viewer' => array(
      'title' => 'Resource Viewer',
      'description' => 'return the resource in the designated view style',
      'page callback' => 'sidora_resource_viewer',
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
    ),
		/* Called by Delete XSL button in admin - sidora.admin.inc */
		'sidora/delete_xsl' => array(
		  'title' => 'Delete XSL',
			'description' => 'Delete a XSL',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_delete_xsl_form'),
      'access callback' => 'user_is_logged_in',
      'type' => MENU_CALLBACK,
   ),
  );
}
function sidora_management_ingest($pid, $dsid, $label = NULL, $mimeType = NULL){
  $object = sidora_obj($pid);
  $datastream = isset($object[$dsid]) ? $object[$dsid] : $object->constructDatastream($dsid);
  if ($label !== NULL) $datastream->label = $label; //don't use empty() since we want to set it to empty string '' if user wants to
  if ($mimeType !== NULL) $datastream->mimeType = $mimeType;
  $current_uploads = sidora_create_resource_get_current_uploads();
  $datastream->setContentFromFile($current_uploads[0]->filepath);
  $object->ingestDatastream($datastream);
}
function sidora_generic_upload($configure = array()){
  global $user;
  $button_text = (empty($configure['button_text']))?'Upload File':$configure['button_text'];
  $file_types = (empty($configure['file_types']))?array('*'):$configure['file_types'];
  $post_location_js = (empty($configure['post_location_js']))?'""':$configure['post_location_js'];
  $success_function_js = (empty($configure['success_function_js']))?'':$configure['success_function_js'];
  $form_id = (empty($configure['form_id']))?'create-resource-upload':$configure['form_id'];
  $post_data_js = (empty($configure['post_data_js']))?'""':$configure['post_data_js'];
  $on_file_add_js = (empty($configure['on_file_add_js']))?'':$configure['on_file_add_js'];
  $on_file_upload_js = (empty($configure['on_file_upload_js']))?'':$configure['on_file_upload_js'];

  $elements = array('#extensions' => $file_types );
  $to_return = '';
  $to_return .= "<div id='$form_id'>";
  $to_return .= sidora_get_plupload_html($elements, $button_text);
  $to_return .= "</div>";
  $_SESSION['file_uploads'][$user->uid] = array();

  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_create_resource.css',array('weight' => '1000000', 'group' => CSS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_util.js',array('weight' => '1000000', 'group' => JS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_uploader.js',array('weight' => '1000000', 'group' => JS_THEME));
  drupal_add_js('
submitIt = function(){
  var postData = '.$post_data_js.';
  jQuery.ajax({ 
    type: "POST",
    url: '.$post_location_js.',
    data: postData,
    success: function(){'.
      $success_function_js.'
    }
  });
}
jQuery(document).ready(function(){
  jQuery("#'.$form_id.'").append("<input class=\"form-submit\" value=\"Add\" onclick=\"submitIt();\">");
  uploader.bind("FilesAdded", function(up, files) {'.
    $on_file_add_js.'
  });
  uploader.bind("FileUploaded", function() {'.
    $on_file_upload_js.'
  });

});
',array('type' => 'inline', 'weight' => '1000000', 'group' => JS_THEME));
  return $to_return;
}

function sidora_management_panel($pid, $show_or_save = 'show', $dsid_to_remove = '', $confirm_action = FALSE){
  global $user;
  if ($show_or_save == 'new_dsid'){
    if (!sidora_allow($user,$pid,'update')) drupal_not_found();
    $label = filter_input(INPUT_POST, 'label', FILTER_SANITIZE_STRING);
    $identifier = filter_input(INPUT_POST, 'identifier', FILTER_SANITIZE_URL);
    $state = filter_input(INPUT_POST, 'state', FILTER_SANITIZE_URL);
    $mime_detect = new MimeDetect();
    $current_uploads = sidora_create_resource_get_current_uploads();
    $mimeType = $mime_detect->getMimeType($current_uploads[0]->filepath);
    sidora_management_ingest($pid, $identifier, $label, $mimeType);
    $to_return = 'complete';
    return $to_return;
  }
  if ($show_or_save == 'upload'){
    $to_return =  sidora_create_resource_get_upload_form_html('*','Upload File');
    drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_create_resource.css',array('weight' => '1000000', 'group' => CSS_THEME));
    drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_util.js',array('weight' => '1000000', 'group' => JS_THEME));
    drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_uploader.js',array('weight' => '1000000', 'group' => JS_THEME));
    drupal_add_js('
submitIt = function(){
  var postData = "label="+jQuery("#dsl").val()+"&identifier="+jQuery("#dsi").val()+"&state="+jQuery("#state").val();
  jQuery.ajax({ 
    type: "POST",
    url: window.location.href.substring(0,window.location.href.lastIndexOf("/")+1)+"new_dsid",
    data: postData,
    success: function(){
      window.parent.jQuery("#addDatastreamDialog").dialog("close");
      window.parent.sidora.manage.resetFrame();
    }
  });
}
jQuery(document).ready(function(){
  var tableHtml = "<table>";
  tableHtml +=  "<tr><td>Identifier:</td><td><input id=\"dsi\" value=\"\" type=\"text\" style=\"border:solid 1px lightblue;\"></td></tr>";
  tableHtml +=  "<tr><td>Label:</td><td><input id=\"dsl\" value=\"\" type=\"text\" style=\"border:solid 1px lightblue;\"></td></tr>";
  tableHtml +=  "<tr><td>State:</td><td><select id=\"dss\"><option value=\"A\">Active</option><option value=\"I\">Inactive</option></select></td></tr>";
  tableHtml += "</table>";
  jQuery("#create-resource-upload").append(tableHtml);
  jQuery(".form-submit").remove();
  jQuery("#create-resource-upload").append("<input class=\"form-submit\" value=\"Add\" onclick=\"submitIt();\">");
  uploader.bind("FilesAdded", function(up, files) {
    jQuery("#filelist").html("");
    while (up.files.length > 1) {
        up.removeFile(up.files[0]);
    }
  });
  uploader.bind("FileUploaded", function() {
    if (uploader.files.length == (uploader.total.uploaded + uploader.total.failed)) {
      while (jQuery("#filelist div").length > 1){
        jQuery(jQuery("#filelist div")[0]).remove();
      }
    }
  });

});
',array('type' => 'inline', 'weight' => '1000000', 'group' => JS_THEME));
    return $to_return;
  }
  if ($show_or_save == 'remove'){
    if (empty($confirm_action)){
      return t('This action cannot be undone.  Are you sure?');
    }
    if (!empty($dsid_to_remove)){
      $object = sidora_meta($pid);
      $object->purgeDatastream($dsid_to_remove);
    }
    return 'DS purge complete';
  }
  if ($show_or_save == 'save'){
    if (!sidora_allow($user,$pid,'update')) drupal_not_found();
    $label = filter_input(INPUT_POST, 'label', FILTER_SANITIZE_STRING);
    $owner = filter_input(INPUT_POST, 'owner', FILTER_SANITIZE_URL);
    $object = sidora_meta($pid);
    if ($label != $object->label){
      sidora_clear_tree_cache($pid);
      $object->label = $label;
      dsm("cleared cache:".$pid);
    }
    if ($owner != $object->owner){
      $object->owner = $owner;
    }
    return;
  }
  if (!sidora_allow($user,$pid,'view')) drupal_not_found();

      $object = sidora_meta($pid);
  print '
<style>
.object-properties {
  padding: 15px;
}
</style>
<div id="objectManagement" style="
    position: absolute;
    background: whitesmoke;
    width:100%;
    height:100%;
"><div id="objectManagementObjProperties" class="object-properties"><table>
    <tbody><tr><td>Label:</td><td><input type="text" name="label" style="border: solid 1px lightblue;" id="objPropLabel" value="'.$object->label.'" size="50"></td></tr>
    <tr><td>Owner:</td><td><input type="text" name="owner" style="border: solid 1px lightblue;" id="objPropOwner" value="'.$object->owner.'" size="50"></td></tr>
    <tr><td>State:</td><td><input type="text" name="" disabled="disabled" value="'.$object->state.'" size="50"></td></tr>
    <tr><td>Date Created:</td><td><input type="text" name="ok" disabled="disabled" value="'.$object->createdDate.'" size="50"></td></tr>
    <tr><td>Last Modified:</td><td><input type="text" name="ok" disabled="disabled"  value="'.$object->lastModifiedDate.'" size="50"></td></tr>
  </tbody></table>
  <input class="form-submit" value="Save Changes" onclick="" id="submitObjProperties"></div>
<div id="objectManagementDatastreams" class="object-properties"><table>
    <tbody><tr><th>ID</th><th>Label</th><th>State</th><th>Mime Type</th><th>Date Created</th><th>Actions</th></tr>
';
      foreach($object as $dsid=>$datastream){
print '<tr><td>'.$datastream->id.'</td><td>'.$datastream->label.'</td><td>'.$datastream->state.'</td><td>'.$datastream->mimetype.'</td><td>'.$datastream->createdDate.'</td><td>';
print '<a href="/sidora/info/'.$pid.'/meta/'.$datastream->id.'/download">Download</a> ';
print '<a href="/sidora/info/'.$pid.'/meta/'.$datastream->id.'/browser" target="_blank">View</a> ';
print '<a href="#" onclick="window.sidora.manage.removeDatastream(\''.$pid.'\',\''.$datastream->id.'\'); return false;">Remove</a> ';
print '</td></tr>'."\n";
      }
print '
  </tbody></table>
  <input class="form-submit" value="Add Datastream" onclick="" id="addDatastream">
  </div></div>
';
  exit();
}
function sidora_direct_jpg_output($content){
  $tempfilename = tempnam('','Sidora_temp_pic_');
  file_put_contents($tempfilename, $content);
  $tempimage = image_load($tempfilename);
  if (!empty($tempimage)){
    image_scale($tempimage, 800, 700);
    $save_info = image_save($tempimage);
    header("Content-type: image/jpeg");
    readfile($tempfilename);
  }else{
    print t('There is no available view for this content');
  }
  exit();
}
/**
 * returns what is set in the admin for the viewer of this object
 */
function sidora_resource_viewer($pid){
  /*
  $resource_viewer_dsid_prefix = 'resource_viewer_dsid_';
  $resource_viewer_view_prefix = 'resource_viewer_viewer_';
  TODO: make these static and used in the module and admin.inc
  */
  //Determine the model of the object
  $obj = sidora_obj($pid);
  if (empty($obj)){ return; }
  $models = $obj->models;
  //Go through the models "in order" to find something that has a viewer.
  //Once something is found with a viewer, immediately return
  $viewers = array();
  foreach($models as $model){
    $viewer = variable_get('resource_viewer_viewer_'.$model,'never');
    $viewers[] = $viewer;
    if ($viewer != 'never' && $viewer != 'none'){
      $list_of_dsids = variable_get('resource_viewer_dsid_'.$model,'');
      $dsids = preg_split('/\s*,\s*/',trim($list_of_dsids));
      foreach($dsids as $dsid){
        //$dsid = variable_get('resource_viewer_dsid_'.$model,'');
        //The admin may have typed in something poorly or unexpected data.  See that the DS exists
        if (!empty($dsid)){
          $ds = $obj[$dsid];
          if (!empty($ds)){
            switch ($viewer) {
              case 'direct':
                sidora_info_json($pid, 'meta', $dsid, 'browser');
                exit();
                break;
              case 'web_view':
                $viewable_mime_types = sidora_get_viewable_mime_types();
                if (in_array($ds->mimetype, $viewable_mime_types)){
                  return sidora_info_json($pid, 'meta', $dsid, 'browser');
                }else{
                  sidora_direct_jpg_output($ds->content);
                }
                break;
              case 'flexpaper_pdf':
                //Dan Davis: 3/4/2015, does not need to do pdf to swf conversion
                if ($ds->mimetype == 'application/x-shockwave-flash') {
                  print sidora_get_html_flexpaper($pid,$dsid);
                }else{
                  sidora_info_json($pid, 'meta', $dsid, 'browser');
                }
                exit();
                break;
              case 'IDS':
                return sidora_view_ids_iframe($pid, $dsid);
                break;
            }
          }
        }
      }//end dsids loop
    }
  }
  print 'The Administrator has not chosen a viewer for this combination of resource and dataset type.  You can still download the object through the View > Download option.';
  print '<br/>The possible models that this resource uses:';
  print '<br/>'.implode('<br/>',$models);
  print '<br/><div style="display:none">Possible viewers:<br/>'.implode('<br/>',$viewers).'</div>';
  exit();
}
/**
 * IDS Iframe contents, direct to output, exit() at end
 *
 * @param string $pid
 * @param string $dsid
 *
 * @return none
 */
function sidora_view_ids_iframe($pid, $dsid) {
  print '<html>';
  print '<head>';
  print '<script src="';
  print $GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/idsiframe/js/jquery-1.9.1.min.js"';
  print '></script>';
  print '<script src="';
  print $GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/idsiframe/js/jquery-ui-1.9.2.custom.min.js"';
  print '></script>';
  print '<script src="';
  print $GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/idsiframe/js/jquery.dynatree.min.js"';
  print '></script>';
  print '<script src="';
  print $GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/idsiframe/js/scrollspy.js"';
  print '></script>';
  print '<script src="';
  print $GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/idsiframe/js/jquery.jscroll.min.js"';
  print '></script>';
  print '<script src="';
  print $GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/idsiframe/js/imagesloaded.pkgd.min.js"';
  print '></script>';
  print '<script src="';
  print $GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/idsiframe/js/masonry.pkgd.min.js"';
  print '></script>';
  print '<script src="';
  print $GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/idsiframe/js/jquery.ids.js"';
  print '></script>';
  print '<script src="';
  print $GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/idsiframe/js/seadragon-min.js"';
  print '></script>';
/*
*/
  print '</head>';
  print '<body>';
  print "
<script>
$(function(){
var ids_id = '";
  print str_replace('https','http',$GLOBALS['base_url']);
/*
http://sidora09.myquotient.net/sidora/info/si:121379/meta/OBJ/browser
*/
//  print "/viewer/$pid/$dsid/download';
  print "/sidora/info/$pid/meta/$dsid/browser';

var ids__ = jQuery('#containerIDS').ids({
      idsid: ids_id,
      idsButtonPath: '";
  print $GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/idsiframe/js/buttons/';
  print "',
      //container: 'containerIDS',
      rotation: 0,
      fullscreen: false,
      onComplete: function() {
        jQuery('span[title=\"Toggle full page\"]').remove(); //Doesn't make sense to have a fullscreen button on this
      },
    });
});
</script>
<div id='containerIDS' height='100%' width='100%'></div>

";
  print '</body>';
  print '</html>';
  exit();
}

/**
 * Drupal autocomplete for codebooks, based on the logged in user
 */
function sidora_codebook_autocomplete($s1){
  module_load_include('inc', 'sidora', 'includes/utils');
  $user_projects = sidora_obj(sidora_get_user_object());
  $matches = array();
  if (!empty($user_projects)){
    $rels = $user_projects->relationships->get(FEDORA_RELS_EXT_URI, 'managesCodebook');
    foreach($rels as $rel){
      $pid = $rel['object']['value'];
      $curr_codebook = sidora_obj($pid);
      if (!empty($curr_codebook)){
        $label = $curr_codebook->label;
        if (strpos($label, $s1) !== FALSE || strpos($pid, $s1) !== FALSE){
          $matches[$pid] = $label.' ('.$pid.')';
        }
      }
    }
  }
  drupal_json_output($matches);
}
function sidora_title_callback(){
  return 'Sidora Workbench';
}
/**
 * Implementation for hook_islandora_object_ingested
 * Uses information set into the page load to determine what to do with the object
 *   The information is set during the "form submit" stage of sidora_create_concept and sidora_create_resource
 * Uses information set into session during the file uploads to determine what files to add
 *   TBD / TODO: Create better implementation for storing which files go with which item
 *   For example, save it in the form's cache / form
 */
function sidora_islandora_object_ingested(AbstractObject $object){
  global $user;
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/ingest.form');
  module_load_include('inc', 'sidora', 'includes/utils');

  drupal_set_message("Sidora Object Ingested");
  $parent_pid = drupal_static('parent_collection_pid');
  $ontology_id = drupal_static('ontology_id');
  drupal_set_message("Object:".$object->id);
  drupal_set_message("Parent:".$parent_pid);

  $id_to_filename = cache_get("sidora:form_id_to_filename");
  if (empty($id_to_filename)){ $id_to_filename = array(); }else{ $id_to_filename = $id_to_filename->data; }
  $file_location = '';
  if (array_key_exists('form_build_id', $_POST)){
    $submitted_form_id = $_POST['form_build_id'];
    if (array_key_exists($submitted_form_id, $id_to_filename)){ //Wont be on concepts or non-file upload forms
      $file_location = $id_to_filename[$submitted_form_id];
      foreach($_SESSION['file_uploads'][$user->uid] as $index => $file_obj){
        if ($file_obj->filepath == $file_location){
          unset($_SESSION['file_uploads'][$user->uid][$index]);
          $_SESSION['file_uploads'][$user->uid] = array_values($_SESSION['file_uploads'][$user->uid]);
        }
      }
    }
  }
  $id_to_creation_info = cache_get("sidora:form_id_to_creation_info");
  if (empty($id_to_creation_info)){ $id_to_creation_info = array(); dsm("didnt exist yet"); }else{ $id_to_creation_info = $id_to_creation_info->data; }
  //dsm($id_to_creation_info);
  if (array_key_exists('form_build_id', $_POST)){
    $submitted_form_id = $_POST['form_build_id'];
    $all_meta_entered = filter_input(INPUT_POST, 'all_meta_entered', FILTER_SANITIZE_URL);
    if ($all_meta_entered != 'TRUE') $all_meta_entered = 'FALSE';
    if (array_key_exists($submitted_form_id, $id_to_creation_info)){ 
      $creation_info = $id_to_creation_info[$submitted_form_id];
      $dsids = sidora_get_proper_dsid($creation_info['model'],$creation_info['form']);
      $creation_info['dsid'] = (empty($dsids))?'':$dsids[0];
      
      sidora_update_datastream($object, '<sidora>
<model>'.$creation_info['model'].'</model>
<form>'.$creation_info['form'].'</form>
<ontology_location_id>'.$creation_info['ontology_id'].'</ontology_location_id>
<meta_requirements_fulfilled>'.$all_meta_entered.'</meta_requirements_fulfilled>
<initial_dsid>'.$creation_info['dsid'].'</initial_dsid>
</sidora>', 'SIDORA');
    }else{
      dsm("no creation infor for this form");
      dsm($id_to_creation_info);
    }
  }else{
    dsm("no build ID");
  }

  if ($parent_pid){
    $tuque = islandora_get_tuque_connection();
    $parent = $tuque->repository->getObject($parent_pid);
    //link to parent with Sidora nomenclature
    $is_concept = sidora_is_concept($object);
    $is_codebook = sidora_is_codebook($object);
    if ($is_concept){
      dsm("is_concept");
      $parent->relationships->add(FEDORA_RELS_EXT_URI, 'hasConcept', $object->id);
      //clear THEIR parents out since the number in parens is held there
      $grandparents = sidora_get_parent_concepts($parent);
      foreach($grandparents as $grandparent_pid => $grandparent){ sidora_clear_tree_cache($grandparent_pid); }
    }else if ($is_codebook){
      dsm("is_codebook");
      //add codebook to user object (not the intended parent)
      $user_projects_pid = sidora_get_user_object();
      $user_projects = $tuque->repository->getObject($user_projects_pid);
      $user_projects->relationships->add(FEDORA_RELS_EXT_URI, 'managesCodebook', $object->id);
      //set the user's recent codebook to this new codebook
      $edit['data']['recent_codebook_id'] = $object->id;
      user_save($user,$edit);
      dsm($user);
    }else{
      dsm("is_resource");
      $parent->relationships->add(FEDORA_RELS_EXT_URI, 'hasResource', $object->id);
      $tuque = islandora_get_tuque_connection();
      $apim = $tuque->repository->api->m;
      sidora_update_datastream($object, $file_location,'OBJ');
      //if it's a tabular, see if there is a proper codebook
      if ($creation_info['model'] == 'si:datasetCModel'){
        $codebook_pid = $user->data['recent_codebook_id'];
        $object->relationships->add(FEDORA_RELS_EXT_URI, 'hasCodebook', $codebook_pid);
      }
    }
    sidora_clear_tree_cache($object->id);
  }
}
/**
 * Implements hook_islandora_object_modified
 */
function sidora_islandora_object_modified(AbstractObject $object){
  //drupal_set_message("Sidora Object Modified");
  sidora_clear_tree_cache($object->id);
}
/**
 * Implements hook_islandora_datastream_modified
 */
function sidora_islandora_datastream_modified(AbstractObject $object, AbstractDatastream $datastream) {
  module_load_include('inc', 'sidora', 'includes/utils');
  //Assume that any update that occurs to a datastream that is of type xml but is not one of the "main" types is the proper type for
  //metadata to be complete.  The more formal way to do this would be:
  //1) Take information from the SIDORA datastream to determine form and model
  //2) Use this information with the Islandora XML form builder association information to determine the datastream ID SI cares about
  //3) Use Islandora XML form builder to produce the form required
  //4) Check that the information in the submitted information matches the required fields
  //The reason that the formal method is skipped is that the only way to otherwise get to this point is through advanced manipulation, either
  //trying to get around the UI by doing direct calls or by using the management system available to admins
  //If the user is doing either of those, then they also have the ability to directly write to the SIDORA datastream and can 
  //manipulate it as they desire.  This is NOT a security problem, the user would be allowed to perform these actions.
  //However, it would be a user directly manipulating data in a way that is
  //not fully supported by the Workbench.
  if ($datastream->mimetype == 'text/xml' && $datastream->id != 'SIDORA' && $datastream->id != 'DC' && $datastream->id != 'RELS-EXT'){
    if (!empty($object['SIDORA'])){
      $doc = new DOMDocument();
      $docToLoad = ('<'.'?'.'xml version="1.0" encoding="UTF-8"'.'?'.'>'.$object['SIDORA']->content);  
      //vi gets borked when it sees the xml declaration and no longer highlights correctly for the rest of the file
      //for the sanity of anyone using vi please leave the xml declaration as a concatenation
      $doc->loadXML($docToLoad);
      $mrf = $doc->getElementsByTagName('meta_requirements_fulfilled');
      if (!empty($mrf) && $mrf->length > 0){
        foreach($mrf as $smrf){
          $smrf->nodeValue = 'TRUE';
        }
      }else{
        $node = $doc->createElement('meta_requirements_fulfilled');
        $node->nodeValue = 'TRUE';
        $sidora_node = $doc->getElementsByTagName('sidora');
        $sidora_node->item(0)->appendChild($node);
      }
      $sidora_node = $doc->getElementsByTagName('sidora');
      $object['SIDORA']->content = $doc->saveXML($sidora_node->item(0));
    }else{
      //Didn't have the SIDORA datastream, add at least that the metadata has been updated
      sidora_update_datastream($object, '<sidora><meta_requirements_fulfilled>TRUE</meta_requirements_fulfilled></sidora>', 'SIDORA');
    }
  }
  sidora_clear_tree_cache($object->id);
  //update its parents too.  What probably happened affected its concept children number (is in the parens) which is held at the parent level
  $parents = sidora_get_parent_concepts($object);
  foreach($parents as $parent_pid => $parent){ sidora_clear_tree_cache($parent_pid); }
}
/**
 * Implements hook_islandora_datastream_ingested
 */
function sidora_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  drupal_set_message("Sidora Datastream Ingested");
}
/** 
 * Implements hook_islandora_datastream_alter
 */
function sidora_islandora_datastream_alter(AbstractObject $object, AbstractDatastream $datastream, array &$context) {
  //drupal_set_message("Sidora Datastream Alter");
  sidora_clear_tree_cache($object->id);
}
/**
 * Guess the dsid and form name used to create the object
 * returns an array of the form:
 *     $to_return['dsid'] = 'FGDC';
 *     $to_return['form_name'] = 'Tabular Data Set Object';
 */
function sidora_guess_dsid_and_form_name($object){
  module_load_include('inc', 'sidora', 'includes/utils'); //for is_concept

  //Tries to guess the dsid and form_name for an object
/*
If concept:
  Look at what datastreams exist on the object, several datastreams correspond directly to a specific form, however these break down on 
EAC-CPF 
  Person
  Expedition
  Research Project
FGDC 
  Camera Trap Deployment
  Archaeology Site

If resource:
First, get the models of the item which will narrow down the choices.
Choose a datastream based on the model
Hard code each set of dsid by type:
Image: MODS
Tabular: FGDC
PDF: MODS

If necessary, look into the datastream contents to see if it has items specific to a certain form (hard-coded)

Reference (if needed)
Image metadata:
  is Camera Trap if in XML (doesn't exist in other forms of this model):
    relatedItem identifier
    originInfo dateOther
  is General if in XML (doesn't exist in other forms of this model):
    genre
    note


PDF metadata:
  is Digitized Text if in XML (doesn't exist in other forms of this model):
    genre
    originInfo dateIssued
    physicalDescription extent
  is Field Book if in XML (doesn't exist in other forms of this model):
    location shelfLocator
*/
  $to_return = array();
  $to_return['dsid'] = '';
  $to_return['form_name'] = '';

  $is_concept = sidora_is_concept($object);
  if ($is_concept){
    if (!empty($object['EAC-CPF'])){
      $to_return['dsid'] = 'EAC-CPF'; 
      if (sidora_startsWith($object->id, 'si-user:')){
        $to_return['form_name'] = 'Person'; 
      }else{
/*
  Person
  Expedition
  Research Project
*/
        $EACCPF_content = $object['EACCPF']->content;
        if (strpos($EACCPF_content, "<localControl localType=\"Publication Date\">") !== FALSE){
          $to_return['form_name'] = 'Research Project'; 
        }else{
          $to_return['form_name'] = 'Expedition'; 
        }
      }
    }else if (!empty($object['FGDC-Research'])){
      $to_return['dsid'] = 'FGDC-Research'; 
      $to_return['form_name'] = 'Research Site or Area - Full Description'; 
    }else if (!empty($object['FGDC'])){
/*
  Camera Trap Deployment
  Archaeology Site
*/
      $to_return['dsid'] = 'FGDC'; 
      $to_return['form_name'] = 'Archaeology Site'; 
      $object_content_models = $object->relationships->get('info:fedora/fedora-system:def/model#', 'hasModel'); 
      foreach($object_content_models as $ocm){
        if ($ocm['object']['value'] == 'si:cameraTrapCModel'){
          $to_return['form_name'] = 'Camera Trap Deployment';
        }
      }
    }else if (!empty($object['FGDC-CTPlot'])){
      $to_return['dsid'] = 'FGDC-CTPlot'; 
      $to_return['form_name'] = 'Camera Trap Plot'; 
    }else if (!empty($object['NCD'])){
      $to_return['dsid'] = 'NCD'; 
      $to_return['form_name'] = 'Field Book Collection'; 
    }else if (!empty($object['LIDO'])){
      $to_return['dsid'] = 'LIDO'; 
      $to_return['form_name'] = 'Cultural Heritage Entity or Object'; 
    }
    /*
    $object_content_models = $object->relationships->get('info:fedora/fedora-system:def/model#', 'hasModel'); 
    foreach($object_content_models as $ocm){
      dsm($ocm['object']['value']);
    }
    */
  }else{
    //So our known types are si:generalImageCModel (Image), si:fieldbookCModel (PDF), si:datasetCModel (CSV)
    $object_content_models = $object->relationships->get('info:fedora/fedora-system:def/model#', 'hasModel'); 
    foreach($object_content_models as $ocm){
      $cm = $ocm['object']['value'];
      if ($cm == 'si:generalImageCModel'){
        $to_return['dsid'] = 'MODS';
        $MODS_content = $object['MODS']->content;
        if (strpos($MODS_content, "<relatedItem>") !== FALSE){
          $to_return['form_name'] = 'Camera Trap Image';
        }else{
          $to_return['form_name'] = 'General Image Description';
        }
      }
      if ($cm == 'si:fieldbookCModel'){
        //Since we won't be editing metadata yet for fieldbooks, assume this is a PDF
        $to_return['dsid'] = 'MODS';
        $to_return['form_name'] = 'Digitized Text (PDF)';
      }
      if ($cm == 'si:datasetCModel'){
        $to_return['dsid'] = 'FGDC';
        $to_return['form_name'] = 'Tabular Data Set Object';
      }
    }
  }
  return $to_return;
}
/*
 * returns an array('form_name'=> <form_name>, 'dsid'=> <dsid>) or FALSE if it can't be figured out
 */
function sidora_get_form_and_dsid($object_pid){
  $to_return = array();
  module_load_include('inc', 'sidora', 'includes/utils'); //for is_concept
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/ingest.form');
  module_load_include('inc','xml_forms','builder/includes/datastream.form');
  module_load_include('inc','xml_forms','builder/includes/associations');
  $object = sidora_obj($object_pid);
    //Now that we have the object, check to see if it has the SIDORA datastream (which will tell us the model and form to use)
    if ($object['SIDORA'] && strpos($object['SIDORA']->content, '<form>') > 0 && strpos($object['SIDORA']->content, '<model>') > 0){
      $to_model = '
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:mods="http://www.loc.gov/mods/v3"
xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
xmlns:cpf="urn:isbn:1-931666-33-4"
>
<xsl:template match="/">
    <xsl:for-each select="//model">
        <xsl:value-of select="current()"/>
      </xsl:for-each>
</xsl:template>
</xsl:stylesheet>';

      $to_form_name = '
<xsl:stylesheet version="1.0"
xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
xmlns:mods="http://www.loc.gov/mods/v3"
xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output"
xmlns:cpf="urn:isbn:1-931666-33-4"
>
<xsl:template match="/">
    <xsl:for-each select="//form">
        <xsl:value-of select="current()"/>
      </xsl:for-each>
</xsl:template>
</xsl:stylesheet>';

      $doc = new DOMDocument();
      $xsl = new XSLTProcessor();
      $doc->loadXML($to_form_name);
      $xsl->importStyleSheet($doc);
      $docToLoad = ('<?xml version="1.0" encoding="UTF-8"?>'.$object['SIDORA']->content);
      $doc->loadXML($docToLoad);
      $form_name = trim($xsl->transformToDoc($doc)->firstChild->wholeText);

      $doc->loadXML($to_model);
      $xsl->importStyleSheet($doc);
      $docToLoad = ('<?xml version="1.0" encoding="UTF-8"?>'.$object['SIDORA']->content);
      $doc->loadXML($docToLoad);
      $model = trim($xsl->transformToDoc($doc)->firstChild->wholeText);

      $checker = xml_form_builder_get_associations(array(), array(), array(), FALSE);   
      //Sidora assumes that we will only have one form that we care about as metadata, and that we will only have one association of model to form
      $found_dsid = '';
      foreach($checker as $check_association){
        if ($check_association['content_model'] == $model && $check_association['form_name'] == $form_name){
          $found_dsid = $check_association['dsid'];
        }
      }
      $to_return['dsid'] = $found_dsid;
      $to_return['form_name'] = $form_name;
      return $to_return;
    }else{
      $info = sidora_guess_dsid_and_form_name($object);
      if (!empty($info['form_name'])){
        //watchdog('sidora_workbench',$object_pid.' - Form was guessed, not included in information:'.$dsid.' "'.$form_name.'"');
        return $info;
      }else{
        return FALSE;
      }
    }
  return $to_return; 
}
/* Show the form used to delete a XSL file  */
function sidora_delete_xsl_form($form,&$form_state){
  $form = array();
  $directory_to_list_for_xsl = DRUPAL_ROOT.'/'.drupal_get_path('module','sidora').'/XSL';
  $xsl_filenames = array_diff(scandir($directory_to_list_for_xsl), array('..', '.', '.htaccess'));
  $xsl_names_dd = '<select class="xsl-names-dd form-select">';
  $xsl_names_dd .= '<option value="">None - Direct metadata to browser</option>';
  $xsl_form_dropdown = array();
  foreach($xsl_filenames as $name){ 
    if (sidora_endsWith(strtolower($name), ".xsl")){
      $xsl_names_dd .= '<option value="'.$name.'">'.$name.'</option>'; 
      	$xsl_form_dropdown[$name] = $name;
    }
  }
  $xsl_names_dd .= '</select>';
 // need to add the ui-dialog library here to be able to create a dialog box inside the Delete XSL Shadowbox
  drupal_add_library('system','ui.dialog');
  $js_for_form = '<script>
  jQuery(document).ready(function(){
	jQuery("body").css("padding-top","0px");
  jQuery("#confirm-delete").click(function(e){
		  e.preventDefault();
		  todelete = jQuery("#xsl-to-delete").val();
      jQuery("#deleteXSLdialog").remove();
	    jQuery("body").append("<div id=\'deleteXSLdialog\' style=\'display:none;\' title=\'Delete XSL\'><p>Are you sure you want to delete this XSL?</p><p>"+jQuery("#xsl-to-delete").val()+"</p></div>");
      jQuery("#deleteXSLdialog").dialog({
      height: 300,
      width: 350,
      modal: true,
      resizable: false,
      buttons: {
        "Delete XSL": function() {
          var toClose = this;
          var onDeleteWorked = function(){
            jQuery( toClose ).dialog( "close" );
            jQuery("#deleteXSLConfirm").remove();
            /*jQuery("body").append("<div title=\'XSL Deleted\' id=\'deleteXSLConfirm\'><p>XSL Deleted</p><div>");
            jQuery("#deleteXSLConfirm").dialog({
              resizable:false, modal:true
						}); */
						self.parent.Shadowbox.close();
          }
          var onDeleteFailed = function(data){
            jQuery( toClose ).dialog( "close" );
            jQuery("#deleteXSLConfirm").remove();
            jQuery("body").append("<div title=\'XSL Not Deleted\' id=\'deleteXSLConfirm\'><p>XSL Not Deleted</p><div>");
            jQuery("#deleteXSLConfirm").dialog({
              resizable:false, modal:true
            });
          };
					deleteXSLfunction(todelete,onDeleteWorked,onDeleteFailed);
        },
        Cancel: function() {
          jQuery( this ).dialog( "close" );
        }
      }
		});
	});
    jQuery("#cancel-btn").click(function(){
      self.parent.Shadowbox.close();
 		});
  deleteXSLfunction =function(todelete, onDeleteWorked, onDeleteFailed){
     var url = Drupal.settings.basePath+"sidora/ajax_parts/delete_xsl_file/"+todelete;
     jQuery.ajax ({
      type: "POST",
			url: url,
			data: todelete,
			success: onDeleteWorked,
			error: onDeleteFailed,
			dataType: "text"
		});	 
  }
});
</script>';
$form['hidden_js'] = array(
  '#type' => 'hidden',
	'#suffix' => $js_for_form
	);	
 $form['xsl_to_delete']= array(
        '#type'=>'select',
        '#title'=>t('Select a XSL file to delete'),
        '#options'=>$xsl_form_dropdown,
				'#attributes'=>array("id" => "xsl-to-delete")
      );

$form['submit-btn']=array(
        '#type'=>'button',
        '#value'=>t('Delete'),
				'#attributes' => array("id" => "confirm-delete")
      );
$form['cancel-btn'] = array(
    '#type' => 'button',
    '#value' => t('Cancel'),
		'#attributes' => array("id" => "cancel-btn")
  );	
	return $form;
	}		
/*
 * Show the form used to edit the object's metadata
 */
function sidora_edit_metadata($object_id = '', $dsid = '', $form_name = ''){
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_metadata_screens.css',array('weight' => '1000000', 'group' => CSS_THEME));
  global $user;
  //if the pid is locked, can't do it
  if (!sidora_obtain_lock($object_id)){
    $to_return = '';
    $to_return .= t('The object is currently locked by another user');
    return $to_return;
  }

  $to_return = '';
  $sidora_data = sidora_get_form_and_dsid($object_id);
  $dsid = $sidora_data['dsid'];
  $form_name = $sidora_data['form_name'];
  
  $tuque = islandora_get_tuque_connection();
  $object = $tuque->repository->getObject($object_id);
  $form_state = array();
  $associations = xml_form_builder_datastream_form_get_associations($form_state,$object->models, $dsid);  //first param goes unused
  $association = null;
  foreach($associations as $curr_association){
    if ($curr_association['form_name'] == $form_name){
      $association = $curr_association;
    }
  }
  if (empty($association)){
    print "The form is not configured correctly.  The form specified is not associated to this model";
  }
  $tform = drupal_get_form('xml_form_builder_datastream_form_metadata_form',$object,$association);
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_metadata_screens.css',array('weight' => '1000000', 'group' => CSS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_util.js',array('weight' => '1000000', 'group' => JS_THEME));
  $is_concept = sidora_is_concept($object);
  drupal_add_js('window.isConcept = '.$is_concept.';
  ',array('type' => 'inline', 'weight' => '1000000', 'group' => JS_THEME));
  drupal_add_js('
  jQuery().ready(function(){
   jQuery("body").css("padding-top","0px");
   jQuery(".content").append("<input id=\"workbench-submit\" class=\"form-submit\" value=\"Update\" style=\"float:right;\"></input>");
   var sidora = window.parent.sidora;
   jQuery("#workbench-submit").click(function(){
   jQuery("body").append("<div class=\'theoverlay\' style=\'width:100%;height:100%;overflow:hidden;opacity:0.5;position:fixed;top:0;left:0;background-color:black;z-index:4000\'></div>");
     jQuery.ajax({
       type: "POST",
       url: "",
       data: jQuery("#xml-form-builder-datastream-form-metadata-form").serialize()+"&op=Submit",
       success: function( data ) {
         window.aa = data;
         if (data.indexOf("<h2 class=\"element-invisible\">Error message</h2")>0){
           //If not successful, reload the page so that the user can see why
           jQuery("#edit-update").click();
           jQuery(".theoverlay").remove();
         }else{
           //If successful, kill itself.
           newPid = data.substring(0,data.indexOf(")"+" has been ingested")).substring(data.substring(0,data.indexOf(")"+" has been ingested")).lastIndexOf("si:"))
           if (sidora && sidora.CloseIFrame){
             if (window.isConcept) sidora.concept.forceRefreshOnNextLoadContent = true;
             sidora.CloseIFrame(newPid, "edit metadata");
           }else{
             console.log("This is not in the expected IFrame");
           }
         }
       },
       dataType: "text"
     });
   });
  });
  ',array('type' => 'inline', 'weight' => '1000000', 'group' => JS_THEME));
  $pic_shown = FALSE;
  if (!$is_concept){
    $vmt = sidora_get_viewable_mime_types();
    if (!empty($object['OBJ']) &&  strpos($object['OBJ']->mimetype, 'image') !== FALSE){
      if (!empty($object['TN']) && in_array($object['TN']->mimetype, $vmt)){
        $tn = '<img src="'.$GLOBALS['base_url'].'/sidora/info/'.$object_id.'/meta/TN/browser" />';
      }
      $obj_pic = '<img src="'.$GLOBALS['base_url'].'/sidora/resource_viewer/'.$object_id.'" />';
      $to_return .= '<div style="width:45%;display:inline-block;overflow:auto;vertical-align:top;">';
      $to_return .= $tn;
      $to_return .= '<div style="width:100%;height:600px;overflow:auto;">';
      $to_return .= $obj_pic;
      $to_return .= '</div>';
      $to_return .= '</div>';
      $pic_shown = TRUE;
    }
  }
  if ($pic_shown){
    $to_return .= '<div style="width:49%;display:inline-block;margin-left:9px;">'.drupal_render($tform).'</div>';
  }else{
    $to_return .= '<div>'.drupal_render($tform).'</div>';
  }
  return $to_return;
}
function sidora_get_viewable_mime_types(){
  return array(
    'image/jpeg',
    'image/gif',
    'image/png',
    'text/csv'
  );

}
/**
 * Tell any imagemagic transforms to convert it to jpg
 */
function sidora_imagemagick_arguments_alter($args, $context){
  $context['destination'] = $context['destination_original'];
  $context['destination_format'] = 'jpg';
}
/*
 * returns an array of strings that are the DSIDs that are currently conigured for use with the specified model and form name
 * convenience method to xml_form_builder_get_associations
 */
function sidora_get_proper_dsid($model_id, $form_name){
  module_load_include('inc', 'xml_form_builder', 'XMLFormRepository');
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  //$names = XMLFormRepository::GetNames();
  $associations = xml_form_builder_get_associations(array($form_name), array($model_id), array(), FALSE);
  $to_return = array();
  foreach($associations as $association){
    $to_return[] = $association['dsid'];
  }
  return $to_return;
}
function sidora_get_parent_table($pid){
  module_load_include('inc', 'sidora', 'includes/utils');
  $output = 'Parents';
  $object = sidora_obj($pid);
  $parents = sidora_get_parent_concepts($object);
    
  $header = array(t('Title'), t('Type'));
  if (sizeof($parents) > 1) $header[] = t('Remove');
  $unassociate_location = $GLOBALS['base_url'].'/sidora/ajax_parts/unassociate/';

  foreach ($parents as $parent) {
    
    $text_link = array(
      '#type' => 'submit',
      '#value' => 'Remove',
      '#attributes' => array("ppid"=>$parent['pid'], "class"=>array('parent-removal')),
    );
    $sidora_data = sidora_get_form_and_dsid($parent['pid']);
    $form_name = $sidora_data['form_name'];
    $row = array(
      array('data' => $parent['label']),
      array('data' => $form_name),
    );
    if (sizeof($parents) > 1) $row[] = array('data' => drupal_render($text_link));
    $rows[] = $row;
  }
  $table_attributes = array('id' => 'sidora_exhibit_projects_table');
  if (!empty($rows)){
    $output .= theme('table', array('header'=>$header, 'rows'=>$rows, 'attributes'=>$table_attributes));
  }else{
    $output .= 'This is an orphan.';
  }
  $output .= '<script>jQuery(document).ready(function(){
  jQuery("input.parent-removal").click(function(){
    var ppid = jQuery(this).attr("ppid");
    var pid = "'.$pid.'";
    var clicked = jQuery("input[ppid=\'"+ppid+"\']");
    var cp = clicked.parent();   
    cp.children().remove();
    cp.append("<div>Removing...</div>");
    sidora.queue.RequestPost("Remove parent "+ppid+" from "+pid,"'.$unassociate_location.'" + ppid + "/" + pid,"",
      function(data){
        if (typeof(data) == "string") data = jQuery.parseJSON(data);
        if (data.error){
          cp.children().remove();
          cp.append("<div>Problem removing: "+data.description+"</div>");
        }else{
          cp.children().remove();
          cp.append("<div>Removed</div>");
          //When I unassociate from the currently selected concept, reload the resources table,
          if (ppid == sidora.concept.GetPid()){
            sidora.concept.LoadContentHelp.FullTableReload(ppid);
          }else{
            //otherwise reload the tree? TBD
            sidora.util.RefreshTree();
          }
        }
        window.lastArgs = arguments;
      },
      function(){},[pid,ppid]
    );
    sidora.queue.Next();

  });
});</script>';
  return $output;
}
/**
 * returns an entite html page that loads the javascript for flexpaper and a OBJ.swf from a fedora object
 */
function sidora_get_html_flexpaper($pid,$dsid = 'OBJ.swf'){
  global $base_url;
  $flexpaper_path = base_path().libraries_get_path('flexpaper');
  $to_return = '

<!doctype html>
<html>
    <head> 
        <title>FlexPaper AdaptiveUI</title>                
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /> 
  <meta name="viewport" content="initial-scale=1,user-scalable=0,width=device-width" />
        <style type="text/css" media="screen"> 
      html, body  { height:100%; }
      body { margin:0; padding:0; overflow:auto; }   
      #flashContent { display:none; }
        </style> 
    
    <link rel="stylesheet" type="text/css" href="'.$flexpaper_path.'/css/flexpaper_flat.css?r=141205" />
    <script type="text/javascript" src="'.$flexpaper_path.'/js/jquery.min.js?r=141205"></script>
    <script type="text/javascript" src="'.$flexpaper_path.'/js/jquery.extensions.min.js?r=141205"></script>
    <script type="text/javascript" src="'.$flexpaper_path.'/js/flexpaper.js?r=141205"></script>
    <script type="text/javascript" src="'.$flexpaper_path.'/js/flexpaper_handlers.js?r=141205"></script>
    </head> 
    <body>  

    <div id="documentViewer" class="flexpaper_viewer" style="width:100%;height:100%;"></div>
          
          <script type="text/javascript">   
            var startDocument = "Paper";
          
          jQuery.get(\'UI_flexpaper_desktop_flat.html\',
                  function(toolbarData) {
                      $(\'#documentViewer\').FlexPaperViewer(
                              { config : {
              SWFFile : "'.$base_url.'/sidora/info/'.$pid.'/meta/'.$dsid.'/browser",     
              jsDirectory : "'.$flexpaper_path.'/js/",
             //SWFFile : \'{samples/WhitePaper_sample.pdf_[*,0].swf,32}\',
             //            IMGFiles : \'samples/WhitePaper_sample.pdf_{page}.jpg\',
             //            JSONFile : \'samples/WhitePaper_sample.pdf_{page}.js\',
             //            PDFFile : \'samples/WhitePaper_sample_[*,2].pdf\',
             //PDFFile : \'samples/WhitePaper_sample.pdf\',
             //            ThumbIMGFiles : \'samples/WhitePaper_sample.pdf_{page}_thumb.jpg\',
             Scale : 1, 
             ZoomTransition : \'easeOut\',
             ZoomTime : 0.5, 
             ZoomInterval : 0.2,
             FitPageOnLoad : false,
             FitWidthOnLoad : false, 
             FullScreenAsMaxWindow : false,
             ProgressiveLoading : true,
             MinZoomSize : 0.2,
             MaxZoomSize : 5,
             SearchMatchAll : false,
             Toolbar : toolbarData,
             InitViewMode : \'Portrait\',
             RenderingOrder : \'flash\',
             
             ViewModeToolsVisible : true,
             ZoomToolsVisible : true,
             NavToolsVisible : true,
             CursorToolsVisible : true,
             SearchToolsVisible : true,
             localeChain: \'en_US\'
          }}
                     );
                });
          </script>  
   </body> 
</html> 
';
  return $to_return;
}
/**
 * Used only for testing purposes.  Should not be called by the main application
 */
function sidora_testing($one = 'one', $two = 'two', $parent_pid = 'si:root', $extra = ''){
  global $user;
  if ($one == 'flexpaper'){
  $pid = $two;
  //$to_return .= '<li><a href="'.base_path().'sidora/workbench/#'.$root_pid.'" pid="'.$root_pid.'" fullname="'.$root->label.'">';
    //$base_path = 
    print sidora_get_html_flexpaper($pid);
    exit();
  }
  if ($one == 'clearcache'){
    if ($two == 'all'){
      sidora_clear_entire_tree_cache();
    }else{
      sidora_clear_tree_cache($two);
    }
    $to_return = sidora_html_tree_for_ajax();
    return "cleared $two".$to_return;
  }
  if ($one == 'formbuilder'){
    $form_content = '';
    try{
      module_load_include('inc', 'xml_form_builder', 'XMLFormRepository');
      module_load_include('inc', 'xml_form_builder', 'includes/associations');
      $names = XMLFormRepository::GetNames();
      /*
      $orig_form = array();
      $form_state = array();
      $form = xml_form_builder_get_form($orig_form, $form_state, $names[0]);
      */
      $form_name = $names[0];
      if ($two != 'two') $form_name = $two;
      $form = XMLFormRepository::Get($form_name); //DOMDocument
      if (!empty($form)){
        $form->formatOutput = TRUE;
        $form_content = $form->saveXML();
      }else{
        $form_content = 'Form not found';
      }
    
    }catch(Exception $exc){
      dsm($exc);
      return "got error";
    }
    return "Form<pre>".htmlentities($form_content).'<pre>';
  }
  if ($one == 'parenttable'){
    return sidora_get_parent_table($two);
  }
  if ($one == 'formassociations'){
    if ($two == 'two'){
      module_load_include('inc', 'xml_form_builder', 'XMLFormRepository');
      module_load_include('inc', 'xml_form_builder', 'includes/associations');
      $names = XMLFormRepository::GetNames();
      $associations = xml_form_builder_get_associations($names, array(), array(), FALSE);
      var_dump ($associations);
      exit();
    }else{
      $dsids = sidora_get_proper_dsid($two, $parent_pid);
      var_dump($dsids);
      exit();
    }
  }
  if ($one == 'guesser'){
    $object = sidora_obj($two);
    $the_guess = sidora_guess_dsid_and_form_name($object);
    var_dump($the_guess);
    exit();
    return;
  }
  if ($one == 'models'){
    $root_pid = 'si:root';
    $results = _sidora_get_child_results_cache($root_pid);
    $filled = sidora_fill_concepts_children($results); 
    print '<pre>';
    //var_dump ($filled);
    $html_tree_from_query_result = sidora_html_tree($filled);
    $ht = str_replace('<',' ',$html_tree_from_query_result);
    $parts = explode(' pid="',$ht);
    foreach($parts as $i=>$part){ $parts[$i] = substr($part,0,strpos($part,'"')); if (strpos($parts[$i],'si:') === FALSE){ unset($parts[$i]);} }
    $models = array();
    foreach($parts as $i=>$part){
      $obj = sidora_obj($part);
      foreach($obj->models as $model){
        if (empty($models[$model])) $models[$model] = array();
        $models[$model][] = $part;
      }
    }
    var_dump($models);
    
    exit();
  }
  if ($one == 'upload2'){
    $configure = array(
      'file_types' => array('xsl'),
      'post_location_js' => 'Drupal.settings.basePath+"sidora/info/xsl_save/xsl_upload"',
      'success_function_js' => 'if (window.opener != null){
         window.opener.filesUpdated(jQuery.parseJSON(arguments[0]));
         window.close();
       }else{
         console.log("not child");
       }',
    );
    $to_return = sidora_generic_upload($configure);
    return 'Upload XSL files:'.$to_return;
  }
  if ($one == 'lock'){
    $to_return ='';
    if ($two == 'two'){
      $to_return .= 'Use with /_pid_/_user_/obtain or /_pid_/_user_/clear.  ';
      $to_return .= 'Use with /_pid_/ to see current lock on pid';
    }else{
    $pid = $two;
      if ($parent_pid == 'si:root'){
        $cache_name = "sidora:locking:".$pid;
        $pid_lock = cache_get($cache_name);
        dsm($pid_lock);
      }else{
    $user_name = $parent_pid;
    $obtain_lock = $extra == 'obtain';
    $clear_lock = $extra == 'clear';
    if ($extra == 'clearobtain') $obtain_lock = $clear_lock = TRUE;
    $to_return .= "Desired:<table>";
    $to_return .= "<tr><td>Pid</td><td>$pid</td></tr>";
    $to_return .= "<tr><td>User</td><td>$user_name</td></tr>";
    $to_return .= "<tr><td>Obtain Lock</td><td>$obtain_lock</td></tr>";
    $to_return .= "<tr><td>Clear Lock</td><td>$clear_lock</td></tr>";
    $to_return .= "</table>";
    $spsl = sidora_pid_set_locked($pid, $user_name, $obtain_lock, $clear_lock);
    $to_return .= "<h1>$spsl</h1>";
    $cache_name = "sidora:locking:".$pid;
    $pid_lock = cache_get($cache_name);
    dsm($pid_lock);
    if (!empty($pid_lock)){
      $expiry = $pid_lock->expire;
      $to_return .= "Currently:<table>";
      $to_return .= "<tr><td>User</td><td>$pid_lock->data</td></tr>";
      $to_return .= "<tr><td>Expire</td><td>$expiry</td></tr>";
      $to_return .= "<tr><td>Current</td><td>".time()."</td></tr>";
      $sec_left = ($expiry - time());
      $to_return .= "<tr><td>Expires In:</td><td>".$sec_left."</td></tr>";
      $to_return .= "</table>";
    }
      }
    }
    return $to_return;;
  }
  if ($one == 'php_info'){
    phpinfo();
    exit();
  }
  if ($one == 'imagemagick'){
    $moth = image_load('/var/www/drupal/sites/all/modules/large_image_moth.jp2');
    dsm($moth);
    $moth2 = image_load('/var/www/drupal/sites/all/modules/moth.png');
    dsm($moth2);
    $gwd = image_load('/var/www/drupal/sites/all/modules/GenericWorkflowDemo - Copy.tiff');
    dsm($gwd);
    $save_info = 'save 1 not attempted';
    $save_info_2 = 'save 2 not attempted';
    $newfile1 = 'save 1 filename not set';
    $newfile2 = 'save 2 filename not set';
    if (!empty($moth)){
      $newfile1 = '/var/www/drupal/sites/default/files/BobbyTest.jpg';
      //$newfile1 = tempnam("/tmp","FOO");
      image_scale($moth, 800, 700);
      $save_info = image_save($moth, $newfile1);
    } 
    if (!empty($moth2)){
      $newfile2 = tempnam("/tmp","FOOi2");
      image_scale($moth2, 800, 700);
      $save_info_2 = image_save($moth2, $newfile2);
      
      $newfile2_new = '/var/www/drupal/sites/default/files/BobbyTest2.jpg';
      copy($newfile2,$newfile2_new);
    } 
    if (!empty($gwd)){
      $newfile3 = '/var/www/drupal/sites/default/files/BobbyTest3.jpg';
      image_scale($gwd, 800, 700);
      $save_info_3 = image_save($gwd, $newfile3);
    } 
    $to_return = '';
    $to_return .= '<br/>empty 1:'.empty($moth);
    $to_return .= '<br/>empty 2:'.empty($moth2);
    $to_return .= '<br/>file 1 file:'.$newfile1;
    $to_return .= '<br/>file 2 file:'.$newfile2;
    $to_return .= '<br/>file 1 save success:'.$save_info;
    $to_return .= '<br/>file 2 save success:'.$save_info_2;
    $to_return .= '<br/>image file 1: <img src="/sites/default/files/'.'BobbyTest.jpg'.'"/>';
    $to_return .= '<br/>image file 2: <img src="/sites/default/files/'.'BobbyTest2.jpg'.'"/>';
    $to_return .= '<br/>image file 2: <img src="/sites/default/files/'.'BobbyTest3.jpg'.'"/>';

    return $to_return;
    
  }
  if ($one == 'gmagick'){
    if(!extension_loaded('gmagick')){
      return 'gmagick test failed';
    }else{
      return 'gmagick loaded';
    }
  }
  if ($one == 'gd'){
    print "<pre>";
    var_dump(gd_info());
    exit();
  }
  if ($one == 'get_user_root'){
    print 'gur<br/>';
    print $two;
    print '<br/><pre>'."\n";
    $drupal_user = user_load_by_name($two);
    var_dump($drupal_user);
    exit();
  }
  if ($one == 'current_file_uploads'){
    $current_uploads = sidora_create_resource_get_current_uploads();
    dsm($current_uploads);
    return 'current_uploads';
  }
  if ($one == 'queries'){
    print 'ok';
    print sidora_generate_child_resource_sparql_query('si:288599', array(), 'Ch');
  }
  if ($one == 'permissions'){
    if (sidora_allow($two, $parent_pid, $extra)){
      print 'allowed';
    }else{
      print 'not allowed';
    }
  }
  if ($one == 'idsiframe'){
    $pid = $two;
    $dsid = $parent_pid;
    sidora_view_ids_iframe($pid, $dsid);
  }
  if ($one == 'session'){
    dsm("use session/clear to clear session");
    dsm($_SESSION);
    if ($two == 'clear'){
      $_SESSION = array();
    }
    return 'session';
  }
  if ($one == 'file_uploads'){
    dsm($_SESSION['file_uploads'][$user->uid]);
    return 'files';
  }
  if ($one == 'user'){
    dsm($user);
    $edit['data']['yes'] = 'yes';
    $uso = user_save($user, $edit);
    dsm($uso);
    return 'user';
  }
  if ($one == 'sessionImage'){
    $fileinfo = $_SESSION['file_uploads'][$user->uid][$two];
    $filename = $fileinfo->filename;
    $filepath = $fileinfo->filepath;
    //dsm($_SESSION['file_uploads'][$user->uid]);
    //dsm($two);
    //return '';
    $handle = fopen($filepath, "r");
    $contents = fread($handle, filesize($filepath));
    sidora_direct_jpg_output($contents);
    //header("Content-type: image/jpeg");
    //print $contents;
    exit();
  }
  if ($one == 'id_to_filename'){
    $id_to_filename = cache_get("sidora:form_id_to_filename");
    dsm($id_to_filename);
    return 'form to filename';
  }
  if ($one == 'add_concept'){
    module_load_include('inc', 'islandora', 'includes/utilities');
    module_load_include('inc', 'islandora', 'includes/ingest.form');
    module_load_include('inc', 'sidora', 'includes/utils');
    $tuque = islandora_get_tuque_connection();
    $parent_pid = 'si-user:105'; 
    $object_pid = 'si:141451';
    $parent = $tuque->repository->getObject($parent_pid);
    $object = $tuque->repository->getObject($object_pid);
    //link to parent with Sidora nomenclature
    $is_concept = sidora_is_concept($object);
    if ($is_concept){
      $parent->relationships->add(FEDORA_RELS_EXT_URI, 'hasConcept', $object->id);
      //clear THEIR parents out since the number in parens is held there
      $grandparents = sidora_get_parent_concepts($parent);
      foreach($grandparents as $grandparent_pid => $grandparent){ sidora_clear_tree_cache($grandparent_pid); }
    }else{
      $parent->relationships->add(FEDORA_RELS_EXT_URI, 'hasResource', $object->id);
      $tuque = islandora_get_tuque_connection();
      $apim = $tuque->repository->api->m;
      $mime_detect = new MimeDetect();
      $mimeType = $mime_detect->getMimeType('logo11w.png');
      $apim->addDatastream($object->id, 'OBJ', 'url', 'http://www.google.com/images/srpr/logo11w.png',
      //http://www.iana.org/_img/2013.1/iana-logo-header.svg', 
        array(
          'controlGroup'=>'M',
          'dsLabel'=>'Google Logo',
          'mimeType'=>$mimeType,
        )
      );
    }
  }
  if ($one == 'xsl'){
    print sidora_xsl_string();
    exit();
  }
  if ($one == 'upload'){
    $elements = array(
      '#extensions' => array(
        'gif','jpg'
      )
    );
    return sidora_get_plupload_html($elements);
  }
if ($one == 'exhibition'){ 
//	if (module_exists('exhibition_config')){
	//	$exhibition_data = exhibition_config_get_config_data($two);
  	//var_dump($exhibition_data);
//	}
  $exhibitions['action'] = 'return false;';
	$exhibitions['ui_state_disable'] = 'true';
	 //can't do operations on blank pid
	if (empty($two)){         
     $exhibitions['action'] = 'return false;';
		 $exhibitions['ui_state_disable'] = 'true';
	}else{
  		if (module_exists('exhibition_config')){
  			$exhibition_data = exhibition_config_get_config_data($two);
  			if (!(empty($exhibition_data)) && !(is_null($exhibition_data['pid'])) && ($exhibition_data['is_available'] != '')){
           $exhibitions['action'] = 'return false;window.open(\'' . variable_get('si_exhibition_website_location', ''). '\'+window.sidora.concept.GetPid()); return false;';
  				 $exhibitions['ui_state_disable'] = 'false';
  		  }else{
            $exhibitions['action'] = 'return false;';
  				 $exhibitions['ui_state_disable'] = 'true';
  			}
		 }else{
        $exhibitions['action'] = 'return false;';
			  $exhibitions['ui_state_disable'] = 'true';
		 }
	}					
  var_dump($exhibition_data);	
	var_dump($exhibitions);
	}
if ($one == 'deletexsl'){
  echo "in deletexsl : ".$two;
	   $curr_item = array();
    if (sidora_endsWith(strtolower($two),'.xsl')){
      $directory_to_list_for_xsl = DRUPAL_ROOT.'/'.drupal_get_path('module','sidora').'/XSL/';
			if (file_exists($directory_to_list_for_xsl.$two)){
        $rename_worked = rename($directory_to_list_for_xsl.$two,$directory_to_list_for_xsl.'backups/'.'Deleted_on_'.date('Ymd_His').'_'.$two);
        $curr_item['existing_moved'] = $rename_worked;
        $curr_item['description'] = t('Attempted file write');
        $curr_item['success'] = $rename_worked;
     }else{
       $curr_item['success'] = FALSE;
       $curr_item['description'] = t('XSL File not found');
    }
    }else{
       $curr_item['success'] = FALSE;
       $curr_item['description'] = t('Wrong file extension for xsl delete');
    }
 	 var_dump($curr_item);
	 } 
	}
/*
 * Show the form to create a concept
 */
function sidora_create_concept($parent_pid = 'si:root', $model = 'si:collectionCModel', $form_name='', $ontology_id = ''){
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_metadata_screens.css',array('weight' => '1000000', 'group' => CSS_THEME));
  global $user;
  //if the parent pid is locked, can't do it
  if (!sidora_obtain_lock($parent_pid)){
    $to_return = '';
    $to_return .= t('The parent of this concept is currently locked by another user');
    return $to_return;
  }
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/ingest.form');
  if (!sidora_allow($user, $parent_pid, 'create')){
    $to_return = t('This user does not have permission to create children of the selected concept. The option to create should not have been visible. Error #: scc1');
    return $to_return;
  }
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_util.js',array('weight' => '1000000', 'group' => JS_THEME));
  $tuque = islandora_get_tuque_connection();
  $page = $tuque->repository->constructObject(islandora_get_namespace('si:root'));//$parent_pid));//'si:root'));//$object->id));
  $page->owner = $user->name;
  $page->label = 'New Concept'; //Label of object if no label gets put into place
  $page->models = 'si:collectionCModel';//parent of the models being sent?
  drupal_static('parent_collection_pid', $parent_pid);
  //print $model;
  //print $parent_pid;
  drupal_static('form_of_interest', $form_name);
  $form = drupal_get_form('islandora_ingest_form', array(
    'models' => array($model),
    'objects' => array($page),
    'parent' => $parent_pid, //'si:root',//$object->id,
    ));
  $id_to_creation_info = cache_get("sidora:form_id_to_creation_info");
  if (empty($id_to_creation_info)){ $id_to_creation_info = array(); }else{ $id_to_creation_info = $id_to_creation_info->data; }
  $creation_info = array();
  $creation_info['model'] = $model;
  $creation_info['form'] = $form_name;
  $creation_info['ontology_id'] = $ontology_id;
  $id_to_creation_info[$form['#build_id']] = $creation_info;
  cache_set("sidora:form_id_to_creation_info",$id_to_creation_info);
  $to_return = drupal_render($form);
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_metadata_screens.css',array('weight' => '1000000', 'group' => CSS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_metadata_screens.js',array('weight' => '1000000', 'group' => JS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_util.js',array('weight' => '1000000', 'group' => JS_THEME));
  sidora_clear_tree_cache($parent_pid);
  return $to_return;
}
/**
 * Implementation of hook_form_alter
 * We want to remove "required" fields, but also know when user's didn't enter info in the field
 * TBD / TODO: Create a system that will track if users entered info in the field
 */
function sidora_form_alter(&$form, &$form_state, $form_id){
  if (!array_key_exists('#submit', $form)) $form['#submit'] = array();
  array_unshift($form['#submit'], 'sidora_form_submit_alter');
  if ($form_id == 'xml_form_builder_ingest_form' || $form_id == 'islandora_ingest_form'){
    remove_validation_for_this_and_children($form);
    $form['all_meta_entered'] = array(
      '#name' => 'all_meta_entered',
      '#type' => 'hidden',
      '#title' => 'All metadata entered',
      '#description' => '',
      '#required' => false,
    );
  }
}
/**
 * Helper to step through the entire form and remove actual validation, putting a red * in its place
 */
function remove_validation_for_this_and_children(&$item, $current_location = ''){
  if ($item != null && array_key_exists('#required', $item)){
    if ($item['#required']){
      if (empty($item['#title'])) $item['#title'] = '';
      $item['#title'] .= ' <span class="form-required" title="This field is required.">*</span>';
      //dsm($current_location); //TODO finish this up
    }
  }
  $item['#required'] = FALSE;
  foreach($item as $si_name => $subitem){
    if (strpos($si_name, "#") === FALSE){
      $next_location = '';
      if ($current_location == ''){
        $next_location = $si_name;
      }else{
        $next_location = $current_location.'['.$si_name.']';
      }
      $returned = remove_validation_for_this_and_children($subitem, $next_location);
      $item[$si_name] = $returned;
    }
  }
  return $item;
}

function sidora_form_submit_alter($form, &$form_state){
  //dsm('sidora_form_submit_alter');
}

/**
 * Show the form that the user chooses the codebook or to create a new codebook
 * returns the string of the HTML representation of the form to use
 */
function sidora_create_resource_codebook_creation_step(){
  global $user;
  $to_return = '';
  $form['tabular_codebook'] = array(
    '#id' => 'user_supplied_codebook_pid',
    '#name' => 'user_supplied_codebook_pid',
    '#type' => 'textfield',
    '#title' => 'Use Existing Tabular Data Codebook',
    '#description' => 'Type a codebook name to associate with the tabular dataset or use the button below to create a new codebook',
    '#required' => false,
    '#value' => empty($user->data['recent_codebook_id'])?'':$user->data['recent_codebook_id'],  
    //Since this is not a normal drupal form / validate / submit, using #value instead of #default_value
    '#autocomplete_path' => 'sidora/codebook/autocomplete',
    '#maxlength' => 1024,
  );
  $form['new_tabular_codebook'] = array(
    '#id' => 'ntc',
    '#type' => 'markup',
    '#markup' => '<input id="create-new-codebook" value="Create and use new codebook" style="width:222px;" class="form-submit"><br/>',
  );
  $form['continue'] = array(
    '#id' => 'continue',
    '#type' => 'button',
    '#value' => 'Continue with listed codebook',
  );
  $to_return .= '<form id="codebook-form" method="post">';
  $to_return .= drupal_render($form);
  $to_return .= '</form>';
  return $to_return;
}

/**
 * Determine if any uploads have occurred in the session
 * returns the uploads themselves or FALSE 
 */
function sidora_create_resource_get_current_uploads(){
  global $user;
  if (!array_key_exists('file_uploads', $_SESSION)){
    $_SESSION['file_uploads'] = array();
    $_SESSION['file_uploads'][$user->uid] = array();
  }
  
  if (array_key_exists('file_uploads', $_SESSION) && !empty($_SESSION['file_uploads'])){
    $fu = $_SESSION['file_uploads'];
    if (array_key_exists($user->uid, $fu)){
      $current_uploads = $_SESSION['file_uploads'][$user->uid];
      if (!empty($current_uploads)){
        return $current_uploads;
      }
    }
  }
  return FALSE;
}

/*
 * gives the proper upload form for the model selected
 * returns string of HTML
 */
function sidora_create_resource_get_upload_form_html($model, $upload_button_text = 'Upload Files'){
  global $user;
  $to_return = '';
  $file_extensions = array(
    'si:imageCModel' => array('jpg', 'png', 'gif', 'tiff', 'tif', 'jp2'),
    'si:generalImageCModel' => array('jpg', 'png', 'gif', 'tiff', 'tif', 'jp2'),
    'si:datasetCModel' => array('csv', 'xml', 'xlsx', 'xls', 'dat', 'med', 'arg', 'slt'),
    'si:fieldbookCModel' => array('pdf'),
    '*' => array('*'),
  );
  if (array_key_exists($model, $file_extensions)){
    $extensions_for_model = $file_extensions[$model];
    $elements = array(
      '#extensions' => $extensions_for_model
    );
    $to_return .= "<div id='create-resource-upload'>";
    $to_return .= sidora_get_plupload_html($elements, $upload_button_text);
    $to_return .= "<input class=\"form-submit\" value=\"Next\" onclick=\"jQuery('#create-resource-upload').hide(); location.reload();\"></input>";
    $to_return .= "</div>";
    $_SESSION['file_uploads'][$user->uid] = array();
  }
  return $to_return;
}

/*
 * Performs the information pertaining to the codebook auto-fill and storage, as well as determine if the codebook 
 * has been set for this resource creation
 * returns TRUE or FALSE - true if codebook should be shown
 */
function sidora_create_resource_determine_codebook_complete($model){
  global $user;
  $ask_for_codebook = FALSE;
  if ($model == 'si:datasetCModel'){
    if (empty($_POST['user_supplied_codebook_pid'])){
      $ask_for_codebook = TRUE;
    }else{
      //if it's not a codebook, say so
      $codebook_pid = $_POST['user_supplied_codebook_pid'];
      $codebook_obj = sidora_obj($codebook_pid);
      if (empty($codebook_obj)){
        drupal_set_message(t('Invalid codebook, please choose a different codebook'), 'warning');
        $ask_for_codebook = TRUE;
      }else{ 
        $edit['data']['recent_codebook_id'] = $codebook_pid;
        user_save($user,$edit);
      }
    }
  }
  return $ask_for_codebook;
}
/**
 * Use the filename to determine if this can be used once the graphics library converts it to jpg
 * returns TRUE or FALSE;
 */
function sidora_is_displayable_image_with_convert($filename){
  $convertable_extensions = array('jpg','png','gif','tif','jp2');
  return sidora_is_displayable_image($filename, $convertable_extensions);

}
/**
 * Use the filename to determine if this can be used as a src in an HTML image tag
 * returns TRUE or FALSE;
 */
function sidora_is_displayable_image($filename, $extensions = array()){
  $filename = strtolower($filename);
  $can_be_shown_extensions = array('jpg','png','gif');
  if (!empty($extensions)) $can_be_shown_extensions = $extensions;
  $extension = '';
  if (strpos($filename,".") !== FALSE){
    $extension = substr($filename, strrpos($filename, ".")+1);
  }
  if (in_array($extension,$can_be_shown_extensions)){
    return TRUE;
  }
  return FALSE;
}
/**
 * Creates the entire structure holding all the metadata forms HTML and sets Drupal cache for usage
 * later to connect the form_id to the filenames
 * TBD / TODO - use the form's actual cache instead of a made-up one
 * returns string HTML of all forms
 */
function sidora_create_resource_get_metadata_form_html($parent_pid, $model, $form_name, $current_uploads){
  global $user;
  $tuque = islandora_get_tuque_connection();
  $to_return = '';
  $to_return .= "<div id='create-resource-form'>";
  if (count($current_uploads) == 0 || empty($current_uploads)){  //if no files
    $to_return .= '<div id="form-num-0" class="sidora-ingest-form-holder">';
    $page = $tuque->repository->constructObject(islandora_get_namespace('si:root'));
    $form = drupal_get_form('islandora_ingest_form', array(
      'models' => array($model),
      'objects' => array($page),
      'parent' => $parent_pid,
      ));
    $id_to_creation_info = cache_get("sidora:form_id_to_creation_info");
    if (empty($id_to_creation_info)){ $id_to_creation_info = array(); }else{ $id_to_creation_info = $id_to_creation_info->data; }
    $creation_info = array();
    $creation_info['model'] = $model;
    $creation_info['form'] = $form_name;
    $ontology_id = drupal_static('ontology_id');
    $creation_info['ontology_id'] = $ontology_id;

    $id_to_creation_info[$form['#build_id']] = $creation_info;
    cache_set("sidora:form_id_to_creation_info",$id_to_creation_info);
    $to_return .= drupal_render( $form);
  }else{
    $at_least_one_pic = false;
    foreach ($current_uploads as $cu){
      $at_least_one_pic = $at_least_one_pic ||  sidora_is_displayable_image_with_convert($cu->filename);
    }
    for ($form_total = 0; $form_total < count($current_uploads); $form_total++){
      $to_return .= '<div id="form-num-'.$form_total.'" class="sidora-ingest-form-holder ';
      if (!empty($current_uploads[$form_total]) && $at_least_one_pic){
        $to_return .= 'has-image';
      }
      $to_return .= '">';
      if (!empty($current_uploads[$form_total]) && $at_least_one_pic){
        $to_return .= "<div class='picHolder' id='picHolder-".$form_total."'>";
        if (sidora_is_displayable_image_with_convert($current_uploads[$form_total]->filename)){
          $to_return .= "<img src='/sidora/test/sessionImage/".$form_total."'/>";
        }else{
          $to_return .= $current_uploads[$form_total]->filename.' is not displayable at this time.';
        }
        $to_return .= "</div>";
      }
      $page = $tuque->repository->constructObject(islandora_get_namespace('si:root'));
      $page->owner = $user->name;
      $page->label = ''; //Label of object if no label gets put into place
      $page->models = 'si:resourceCModel';//parent of the models being sent?
      $form = drupal_get_form('islandora_ingest_form', array(
        'models' => array($model),
        'objects' => array($page),
        'parent' => $parent_pid,
      ));
      if (!empty($current_uploads[$form_total])){
        $filename = $current_uploads[$form_total]->filename;
        if (!empty($form['mods']['titleInfo']['title'])){
          $form['mods']['titleInfo']['title']['#value'] = $filename;  //Should try to acquire this from the Islandora XML form title field instead of hardcode TODO TBD BBB
        }

        $id_to_filename = cache_get("sidora:form_id_to_filename");
        if (empty($id_to_filename)){ $id_to_filename = array(); }else{ $id_to_filename = $id_to_filename->data; }
        $id_to_filename[$form['#build_id']] = $current_uploads[$form_total]->filepath;
        cache_set("sidora:form_id_to_filename",$id_to_filename);
      }
      
      $id_to_creation_info = cache_get("sidora:form_id_to_creation_info");
      if (empty($id_to_creation_info)){ $id_to_creation_info = array(); }else{ $id_to_creation_info = $id_to_creation_info->data; }
      $creation_info = array();
      $creation_info['model'] = $model;
      $creation_info['form'] = $form_name;
      $ontology_id = drupal_static('ontology_id');
      $creation_info['ontology_id'] = $ontology_id;
      $id_to_creation_info[$form['#build_id']] = $creation_info;
      cache_set("sidora:form_id_to_creation_info",$id_to_creation_info);
      $to_return .= drupal_render( $form);
      $to_return .= "</div>";
    }
  }
  $to_return .= "</div>";
  return $to_return;
}

/*
 *First page is an upload page
 *Second return is a page that is filled with Metas
 *
 * extra info is whether or not the page should be refreshed to the first page, clearing out the existing session (if they stopped mid session last time)
 */
function sidora_create_resource($parent_pid = 'si:root', $model = 'si:collectionCModel', $form_name = '', $ontology_location = '', $extra_info = ''){
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_metadata_screens.css',array('weight' => '1000000', 'group' => CSS_THEME));
  global $user;
  //if the parent pid is locked, can't do it
  if (!sidora_obtain_lock($parent_pid)){
    $to_return = '';
    $to_return .= t('The parent of this resource is currently locked by another user');
    return $to_return;
  }
  
   
  //Clear out the session if they just did a click on new (cancelled out an old one or on a new page)
  //TBD / TODO: make each request have it's own information instead of storing in session
  if ($extra_info == 'fresh'){
    $path = current_path();
    $path = substr($path,0,strpos($path,'/fresh'));
    if (array_key_exists('file_uploads', $_SESSION)){
      $_SESSION['file_uploads'][$user->uid] = array();
    }
    drupal_goto($path);
  }
  module_load_include('inc', 'islandora', 'includes/utilities');
  module_load_include('inc', 'islandora', 'includes/ingest.form');
  drupal_add_library('system','ui.progressbar');
  drupal_static('parent_collection_pid', $parent_pid);
  drupal_static('form_of_interest', $form_name);
  drupal_static('ontology_id', $ontology_location);
  $to_return = '';
  //Determine if it should have an uploader
  $check_for_uploads = TRUE;
  $show_form = TRUE;
  $ask_for_codebook = FALSE;
  //Determine if we already bypassed the uploader step 
  $current_uploads = sidora_create_resource_get_current_uploads();
  $ask_for_codebook = sidora_create_resource_determine_codebook_complete($model);
  if (empty($current_uploads)){
    if ($ask_for_codebook){
      $check_for_uploads = FALSE;
      $show_form = FALSE;
      $to_return .= sidora_create_resource_codebook_creation_step();
    }
    if ($check_for_uploads){
      //Uploads already done
      $form_html = sidora_create_resource_get_upload_form_html($model);
      if (!empty($form_html)){
        $to_return .= $form_html;
        $show_form = FALSE;
      }
    }
  }
  if ($show_form){
    $to_return .= sidora_create_resource_get_metadata_form_html($parent_pid, $model, $form_name, $current_uploads);
  }
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench_create_resource.css',array('weight' => '1000000', 'group' => CSS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_util.js',array('weight' => '1000000', 'group' => JS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_uploader.js',array('weight' => '1000000', 'group' => JS_THEME));
  sidora_clear_tree_cache($parent_pid);
  return $to_return;
}
function sidora_get_thumbnail_image_for_mime_type($mime_type){
  $mimeTypeFileName = str_replace('/','-',$mime_type);
  //Security concern - give list of appropriate mime types...
  if (strpos($mimeTypeFileName,'spreadsheet') !== FALSE){
    $mimeTypeFileName = 'x-office-spreadsheet';
  }
  if (strpos($mimeTypeFileName,'image') !== FALSE){
    $mimeTypeFileName = 'image-default';
  }
  return $mimeTypeFileName;
}
/**
 * Implements hook_user_insert when a user is created
 * Create a Projects folder for the user and put information about it into the Drupal db
 */
function sidora_user_login(&$edit, $account){
  try{
    if (!$account->data || !array_key_exists("islandora_user_pid",$account->data)){
      module_load_include('inc', 'sidora', 'includes/utils');
      $object = sidora_create_user_object($account);
      $data['data']['islandora_user_pid'] = $object->id;
      user_save($account,$data);
      //dsm("Created Sidora object for user:".$object->id);
    }
  }catch(Exception $exc){
    //dsm("User ID reused"); //BBB don't cause the error to happen in the first place
  }
}
/**
 * Set the specified user's root (islandora_user_pid) to the specified pid
 */
function sidora_set_user_object($drupal_user, $pid){
  $acdata['data']['islandora_user_pid'] = $pid;
  user_save($drupal_user, $acdata);
}
/*
 * returns true if the user is a fedora admin
 */
function sidora_is_admin($drupal_user = ''){
  global $user;
  if (empty($drupal_user)) $drupal_user = $user;
  return (is_array($drupal_user->roles) && in_array('administrator', $drupal_user->roles));
}
/*
 * returns a drupal user from an abiguous source, or current drupal user
 */
function sidora_get_drupal_user($user_pid_or_drupal_user = ''){
  global $user;
  $drupal_user = $user_pid_or_drupal_user;
  if (empty($user_pid_or_drupal_user)){
    $drupal_user = $user;
  }else if (is_string($user_pid_or_drupal_user)){
    $drupal_user = user_load_by_name($user_pid_or_drupal_user);
  }
  //drupal_user is now a proper drupal user
  return $drupal_user;
}
/**
 * The main permissions function
 * There are 5 types of operation
 * C R U D
 * translates into
 * create - create a resource on the specified concept (therefore modifiying the RELS-EXT but only a specific way)
 * (read) view - allow reading of ALL data
 * update - allow changing of all of this object's datastreams 
 * delete - allow deletion of this object
 * and
 * permission - allow changing of permissions
 *
 * TODO: Delete Resource from the UI will require ONLY that the user has access to update the parent concept as is, true delete not unassociate
 * If the user does not have delete access and it belongs to them, it will be placed in a special "orphan" concept TBD / TODO
 */
function sidora_allow($user_pid_or_drupal_user, $pid_or_fedora_object, $type_of_operation = 'create'){
  if ($type_of_operation == 'view') return TRUE;
  $drupal_user = sidora_get_drupal_user($user_pid_or_drupal_user);
  $object = $pid_or_fedora_object;
  if (empty($pid_or_fedora_object)) return FALSE; //can't do operations on blank pid
  if (is_string($pid_or_fedora_object)) $object = sidora_obj($pid_or_fedora_object);
  if (empty($object)) return FALSE; //can't do operations on bad pid
  //hopefully this is a valid fedora object now
  //if the user is an administrator, they always have the rights
  if (sidora_is_admin($drupal_user)){
    return TRUE;
  }

  //the owner has rights to all except manage
  if ($object->owner == $drupal_user->name && $type_of_operation != 'manage'){
   return TRUE;
  }
  
  return FALSE;
}
function sidora_user_view($account, $view_mode, $langcode){
  global $user;
  $is_logged_in_as_admin = FALSE;
  //if they came in trying to change the user pid, see if they are an administrator and then do it
  if (sidora_is_admin($user)){
    $is_logged_in_as_admin = TRUE;
    $new_user_pid = filter_input(INPUT_POST, 'user_pid', FILTER_SANITIZE_URL);
    if (!empty($new_user_pid)) sidora_set_user_object($account, $new_user_pid);
  }

  module_load_include('inc', 'sidora', 'includes/utils');
  $account_data = ($account->data);

  //dsm($account);
  $codebook_pid = '';
  $codebook_html = '';
  $user_pid = sidora_get_user_object($account);
    $members = array();
    if ($user_pid) {
      
      /*
      $collection = new Collection($user_pid);
      $members = $collection->getTreeMembers();
      if (function_exists('exhibition_config_get_exhibition_pids_for_user')){
        if ($_GET['showProjects'] == 'true'){
        $members = exhibition_config_get_exhibition_pids_for_user($account->name);
        if (count($members)) {
          $account->content['sidora_exhibit_projects'] = array(
            '#title' => t('View Projects in Exhibit'),
            '#value' => '<br />' . sidora_user_table($members, $user_pid),
              '#type' => 'user_profile_item'
            );
          }
        }else{
          $account->content['sidora_exhibit_projects'] = array(
            '#title' => t('View Projects in Exhibit'),
            '#value' => '<br/><a href="?showProjects=true">Click here </a>to reload page showing your Exhibition Projects',
            '#type' => 'user_profile_item'
          );
        }
      }else{
          $account->content['sidora_exhibit_projects'] = array(
            '#title' => t('View Projects in Exhibit'),
            '#value' => '<br/>Enable the Exhibition Config module to list user exhibitions.',
            '#type' => 'user_profile_item'
          );
      }
      */

    if (count($members)){
      foreach ($members as $member) {
        if ((string) $member['label']==='Codebook Library') {
          $codebook_pid = $member['pid'] ;
          break 1;
        }
      }
    }
    $user_obj = sidora_obj($user_pid);
    //Load up the Fedora Commons object for the user
    if (!empty($user_obj)){
      //Check to see what managesCodebook relations it has
      $codebooks = $user_obj->relationships->get(FEDORA_RELS_EXT_URI, 'managesCodebook');
      //Load up each codebook for more info
      foreach($codebooks as $codebook_info){
        $codebook_pid = ($codebook_info['object']['value']);
        $codebook = sidora_obj($codebook_pid);
        $codebook_html .= '<tr><td>'.$codebook_pid.'</td><td>'.$codebook->label.'</td>';
        $codebook_html .= '<td><a href="'.base_path().'sidora/workbench/#'.$codebook_pid.'">View In Workbench</a></td>';
        $codebook_html .= '</tr>';
      }
    }
  }
  if ($is_logged_in_as_admin){
    $account->content['reset_islandora_user_pid'] = array(
      '#title' => t('View / Set this user\'s Islandora Pid (Their root concept / user project)'),
      '#markup' => '<form id="reset_user_pid" method="post"><input type="text" name="user_pid" value="'.$user_pid.'" class="form-text"/><input type="submit" class="form-submit"/></form>',
      '#class' => 'islandora_user_pid',
      '#type' => 'user_profile_item',
    );
  }
  $codebook_html = '<table><tr><th>ID</th><th>Label</th><th>Link</th></tr>'.$codebook_html.'</table>';
  $account->content['islandora_user_pid'] = array(
    '#title' => t('Codebooks'),
    '#markup' => $codebook_html,
    '#class' => 'islandora_user_pid',
    '#type' => 'user_profile_item',
  );
}

/*
 * Copied from 0.3, unused currently 
 */
function sidora_user_table($members, $user_pid) {
  $header = array(t('Project Name'), t('Link'));

  foreach ($members as $member) {
    $exhibit_link = url(variable_get(VAR_SIDORA_EXHIBITION_URL, VAR_DEFAULT_SIDORA_EXHIBITION_URL) . '/fedora/repository/' . $member['pid'], array('absolute' => TRUE));
    $text_link = array(
      '#type' => 'textfield',
      '#value' => check_plain($exhibit_link),
      '#attributes' => array('readonly' => 'readonly'),
      '#size' => 80,
    );
    $rows[] = array(
      array('data' => l($member['label'], $exhibit_link, array(
            'attributes' => array('target' => '_blank')))),
      array('data' => drupal_render($text_link))
    );
  }
  $table_attributes = array('id' => 'sidora_exhibit_projects_table');
  $output .= theme('table', $header, $rows, $table_attributes);

  return $output;
}
function sidora_info_json($pid, $type='resources', $specific_meta = '', $download = '', $formatted = '', $limit = NULL, $offset = NULL){
  global $user;
  $to_output = '';
  //$pid = 'si:257075';
  switch ($type) {
    case 'relationships':
      print sidora_get_parent_table($pid);
      break;
    case 'xsl_upload':
      $return_when_encoded = array();
      $all_uploads = $_SESSION['file_uploads'][$user->uid];
      $directory_to_list_for_xsl = DRUPAL_ROOT.'/'.drupal_get_path('module','sidora').'/XSL';
      //$xsl_filenames = array_diff(scandir($directory_to_list_for_xsl), array('..', '.'));
      $return_when_encoded['files'] = array();
      if (!empty($all_uploads)){
        foreach($all_uploads as $curr_upload){
          $curr_item = array();
          $new_name = $directory_to_list_for_xsl.'/'.$curr_upload->filename;
          if (sidora_endsWith(strtolower($new_name),'.xsl')){
            if (file_exists($new_name)){
              $rename_worked = rename($new_name, $directory_to_list_for_xsl.'/backups/'.'Prior_to_'.date('Ymd_His').'_'.$curr_upload->filename);
              $curr_item['existing_moved'] = $rename_worked;
            }
            $rename_worked = rename($curr_upload->filepath,$new_name);
            $curr_item['description'] = t('Attempted file write');
            $curr_item['success'] = $rename_worked;
          }else{
            $curr_item['success'] = FALSE;
            $curr_item['description'] = t('Wrong file extension for xsl upload');
          }
          $curr_item['name'] = $curr_upload->filename;
          $return_when_encoded['files'][] = $curr_item;
        }
        $_SESSION['file_uploads'][$user->uid] = array();
      }else{
        $return_when_encoded['description'] = t('No files to update');
      }
      print json_encode($return_when_encoded);
      exit();
      break;
    case 'management':
      if (!sidora_allow($user,$pid,'view')) drupal_not_found();
      $object = sidora_meta($pid);
      $for_json_output = array();
      $ds_info = array();
      foreach($object as $dsid=>$datastream){
        $dsi = array();
        $dsi['id'] = $dsid;
        $dsi['label'] = $datastream->label;
        $dsi['state'] = $datastream->state;
        $dsi['mimetype'] = $datastream->mimetype;
        $dsi['createdDate'] = $datastream->createdDate;
        $ds_info[] = $dsi;
      }
      $for_json_output['datastreams'] = $ds_info;
      $obj_prop = array();
      $obj_prop['label'] = $object->label;
      $obj_prop['owner'] = $object->owner;
      $obj_prop['state'] = $object->state;
      $obj_prop['createdDate'] = $object->createdDate;
      $obj_prop['lastModifiedDate'] = $object->lastModifiedDate;
      $for_json_output['object_properties'] = $obj_prop;
      print json_encode($for_json_output);
      exit();
      break;
    case 'permission':
      $permission['create'] = sidora_allow($user,$pid,'create');
      $permission['view'] = sidora_allow($user,$pid,'view');
      $permission['update'] = sidora_allow($user,$pid,'update');
      $permission['delete'] = sidora_allow($user,$pid,'delete');
      $permission['permission'] = sidora_allow($user,$pid,'permission');
      $permission['manage'] = sidora_allow($user,$pid,'manage');
      print json_encode($permission);
      exit();
      break;
    case 'base':
      $object = sidora_meta($pid);
      if (empty($object)){
        print t('Object not found');
        exit();
      }
      var_dump($object);
      break;
    case 'meta':
      $object = sidora_meta($pid);
      if (empty($object)){
        print t('Object not found');
        exit();
      }
      if (!empty($specific_meta)){
        $existing_json_sidora_form_config = variable_get('xsl_form_config', '');
        $sfc = json_decode($existing_json_sidora_form_config);
        //If this is to be based on the xsl_form_config
        $xsl_file = '';
        if ($specific_meta == 'sidora_xsl_config_variable'){
          //determine the current form and model
          $sidora_data = sidora_get_form_and_dsid($pid);
          $preferred_dsid = $sidora_data['dsid'];
          $form_name = $sidora_data['form_name'];
          $models = $object->models;
          $perfect_match = FALSE;
          //So search through the sfc until you find one that matches
          //Cut out early if a perfect match is found (matches form/model/preferred_dsid)
          $dsid_to_use = '';
          for ($sfci = 0; $sfci < sizeof($sfc->xsl_config) && !$perfect_match; $sfci++){
            
            $curr_check = $sfc->xsl_config[$sfci];
            //var_dump($curr_check);
            $model_match = in_array($curr_check->model,$models);
            $form_match = $curr_check->form == $form_name;
            //$dsid_match = $curr_check->dsid == $preferred_dsid;
            //print 'mm:'.$model_match.' for:'.$curr_check->model;
            //var_dump($models);
            //print 'fm:'.$form_match.' for:'.$form_name.' vs:'.$curr_check->form;
            
            if ($model_match && $form_match){
              $perfect_match = TRUE;
              $dsid_to_use = $curr_check->dsid;
              //print 'Setting dsid to use to '.$dsid_to_use;
            }
            if ($model_match && $form_match){
              $xsl_file = $curr_check->file;
             
            }
          }
          if (empty($dsid_to_use)){
            $specific_meta = 'all';
          }else{
            $specific_meta = $dsid_to_use;
          }
        }//ends sidora_xsl_config_variable
        $datastream_content = '';
        //print "Using $specific_meta";
        $datastream = '';
        foreach($object as $dsid_loop=>$datastream_loop){
          if ($specific_meta == 'all'){
            //strip off the <?xml directives if it has any and remove binary data
            $content = $datastream_loop->content;
            $doc = new DOMDocument();
            if (substr(trim($content),0,1) == '<'){
              $doc->loadXML($content);
              $datastream_content .= $doc->saveHTML();
            }
          }else if ($dsid_loop == $specific_meta){
            $datastream_content = $datastream_loop->content;
            $datastream = $datastream_loop;
          }
        }
        if (empty($datastream_content)){
          print t('Datastream not found by that name');
          exit();
        }
        //datastream_content is now set.  perform the output
        $mime_type = (empty($datastream))?'text/xml':$datastream->mimeType;

        if ($specific_meta == 'all'){
          $datastream_content = '<xml_root><general_info><owner>'.$object->owner.'</owner><label>'.$object->label.'</label></general_info>'."\n".$datastream_content."\n".'</xml_root>';
          $mime_type = 'text/xml';
        }

        if ($download=='browser' && strpos($mime_type,"text") !== FALSE){ //html, text, csv
          header("Content-type: html");
        }else{
          header("Content-type: $mime_type");
        }
        if ($download=='download'){
          $content_size = strlen($datastream_content);
          $filename = $pid.'_'.$specific_meta;//get_suggest_filename($label, $mime_type);
          if ($content_size > 0) {
            header("Content-length: $content_size");
          }
          header("Content-Disposition: attachment; filename=\"$filename\"");
        }
        if ($formatted == 'html'){
          $datastream_content = str_replace('&nbsp;',"&#160;",$datastream_content); //XSL transforms won't go through with &nspb; as an element
          //but islandora inserts that into some areas, specifically dc:identifier was the problem that necessitated this replacer
          print '<div class="metadata-table">'.sidora_metadata_to_html_table_transform($datastream_content, $xsl_file).'</div>';
        }else{
          print $datastream_content;
          exit();
        }
      }else{
        $for_json_output = array();
        foreach($object as $dsid=>$datastream){
          $for_json_output[] = $dsid; //array_keys will not work on the Fedora object - not true array?
        }
        print json_encode($for_json_output);
        exit();
      }
      break;
    case 'resources':
      $resource_types = array(
        'all' => array('si:imageCModel', 'si:generalImageCModel','si:fieldbookCModel','si:datasetCModel'),
        'images' => array('si:imageCModel', 'si:generalImageCModel'),
        'pdf' => array('si:fieldbookCModel'),
        'csv' => array('si:datasetCModel'),
        'text' => FALSE,
        'video' => FALSE
      );
      if ($download == 'browser' && $formatted == 'dataTableServerSideProcessing'){
        $jsdt_title_and_type_search_val = filter_var($_GET['search']['value'], FILTER_SANITIZE_STRING);
        //The search value holds both the type of object and the title search, pull those out
        $vals = explode("\n",$jsdt_title_and_type_search_val);
        $jsdt_search_val = $vals[0];
        $jsdt_title_search_val = empty($vals[1])?'':$vals[1];
        if (!array_key_exists($jsdt_search_val, $resource_types)){
          $jsdt_search_val = 'all';
        }
        $jsdt_draw = filter_input(INPUT_GET,'draw', FILTER_SANITIZE_NUMBER_INT);
        $jsdt_start = filter_input(INPUT_GET,'start', FILTER_SANITIZE_NUMBER_INT);
        $jsdt_length = filter_input(INPUT_GET,'length', FILTER_SANITIZE_NUMBER_INT);
        $limit = $jsdt_length;
        $offset = $jsdt_start;
        $resources_count = sidora_concept_resource_listing_count($pid,$resource_types); 
        $filtered_resources_count = sidora_concept_resource_listing_count($pid,$resource_types, $jsdt_search_val, $jsdt_title_search_val); 
        $resources = sidora_concept_resource_listing($pid,$resource_types,$limit,$offset, $jsdt_search_val, $jsdt_title_search_val); 

        $jsdt_response = array();
        $jsdt_response['draw'] = $jsdt_draw;
        $jsdt_response['recordsTotal'] = $resources_count;
        $jsdt_response['recordsFiltered'] = $filtered_resources_count;
        $jsdt_data = array();
        foreach($resources as $element){
          if (array_key_exists('object',$element)){
            $tn = '<img src="'.$GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/images/mime/default.png" height="30" width="30"/>';
            if (array_key_exists('thumbnail_exists',$element) && $element['thumbnail_exists']){
              $tn = '<img style="max-height:90px;max-width:150px;" src="../info/'.$element['object']['value'].'/meta/TN/browser" />';
            }else if (array_key_exists('MainMimeType',$element) && !empty($element['MainMimeType'])){
              $mimeTypeFileName = sidora_get_thumbnail_image_for_mime_type($element['MainMimeType']);
              if (!empty($mimeTypeFileName)){
                //check to see if the file exists that we are interested in
                if (file_exists(drupal_realpath(drupal_get_path('module','sidora').'/images/mime/'.$mimeTypeFileName.'.png'))){
                  $tn = '<img src="'.$GLOBALS['base_url'].'/'.drupal_get_path('module','sidora').'/images/mime/'.$mimeTypeFileName.'.png" height="30" width="30"/>';
                }
              }
            }
            $omdText = '<div class="original_metadata" />';
            if (array_key_exists('original_metadata',$element) && $element['original_metadata']==='FALSE'){
              $omdText = '<div class="not_original_metadata" />';
            }
            $jsdt_data[] = array(
              "DT_RowId"=>$element['object']['value'],
              /*$element['o']['value'],*/
              0=>'<div class="resource-list-tn">'.$tn.'</div>',
              1=>$omdText,
              /*$element['m']['value'],*/
              2=>'<div class="resource-list-label">'.$element['title']['value'].'</div>',
            );
          }
        }
        $jsdt_response['data'] = $jsdt_data;
        

        print json_encode($jsdt_response);
        exit();
      }
      if ($download == 'browser' && $formatted == 'html_placeholder'){
          $to_output = '<table id="res_table" class="display resources-table">';
          $to_output .= '<thead style="display:none"><tr>';
          $to_output .= '<th>Meta</th>';
          $to_output .= '<th>Preview</th>';
          $to_output .= '<th>Object Name</th>';
          $to_output .= '</tr></thead>';
          $to_output .= '<tbody>';
          $to_output .= '</tbody></table>';
      }else if ($download == 'browser' && $formatted == 'html'){
        $resources = sidora_concept_resource_listing($pid,$resource_types,$limit,$offset); 
        if (sizeof($resources) == 0){
          $to_output = t('<div class="resources-table">No resources available on this concept</div>');
        }else{
          $to_output = '<table id="res_table" class="resources-table">';
          $to_output .= '<thead><tr>';
          $to_output .= '<th>aw1</th>';
          $to_output .= '<th>aw2</th>';
          $to_output .= '<th>aw3</th>';
          $to_output .= '<th>aw4</th>';
          $to_output .= '<th>aw5</th>';
          $to_output .= '</tr></thead><tbody>';
          foreach($resources as $element){
            if (array_key_exists('object',$element)){
            $to_output .= '<tr><td>';
            $to_output .= $element['original_metadata'];
            $to_output .= '</td><td>';
            $to_output .= $element['object']['value'];
            $to_output .= '</td><td style="text-align:right;">';
            if (array_key_exists('thumbnail_exists',$element) && $element['thumbnail_exists']){
              $to_output .= '<img src="info/'.$element['object']['value'].'/meta/TN/browser" width="30" height="30"/>';
            }else{
              $to_output .= 'No TN';
            }
            $to_output .= '</td><td>';
            $to_output .= $element['m']['value'];
            $to_output .= '</td><td>';
            $to_output .= $element['t']['value'];
            $to_output .= '</td></tr>';
            }else{
              $to_output .= 'bad element here';
              print_r($element);
            }
          }
          $to_output .= '</tbody></table>';
        }
      }else{
        $resources = sidora_concept_resource_listing($pid,$resource_types,$limit,$offset); 
        print $download.$formatted;
        $to_output = json_encode($resources);
      }
      break;
      case 'create_resource_menu':
        //if the user is able to create under this concept, give them a create menu
        global $user;
        if (!sidora_allow($user, $pid, 'create')){
            $to_output = '';
        }else{
          $to_output = '<ul>';
          $to_output .= '<li><a href="" model="si:fieldbookCModel" formname="Digitized Text (PDF)" ontology-id="DigitizedTextPdf">Digitized&nbsp;Text&nbsp;PDF&nbsp;(MODS)</a>';
          $to_output .= '</li>';
          $to_output .= '<li><a href="" model="si:datasetCModel" formname="Tabular Data Set Object" ontology-id="Datasets">Tabular&nbsp;Datasets</a></li>';
          $to_output .= '<li><a href="">General&nbsp;Image</a><ul>';
          $to_output .=   '<li><a href="" model="si:generalImageCModel" formname="General Image Description" ontology-id="GeneralImage_GeneralImage">General&nbsp;Image&nbsp;Description&nbsp;(MODS)</a></li>';
          $to_output .=   '<li><a href="" model="si:generalImageCModel" formname="Camera Trap Image" ontology-id="GeneralImage_CameraTrapImage">Camera&nbsp;Trap&nbsp;Image&nbsp;(MODS)</a></li>';
          $to_output .= '</ul></li>';
          $to_output .= '</ul>';
        }
      break;
	 // added by RA on 3/12/15 - the ajax call to see if there is an exhibition for the current concept and enable/disable the "Exhibit" menu link accordingly
		case 'exhibition': 
      $exhibitions['action'] = 'return false;';
			$exhibitions['ui_state_disable'] = true;
			 //can't do operations on blank pid
			if (empty($pid)){         
           $exhibitions['action'] = 'return false;';
					 $exhibitions['ui_state_disable'] = true;
			}else{
    		  if (module_exists('exhibition_config')){
    				$exhibition_data = exhibition_config_get_config_data($pid);
    				if (!(empty($exhibition_data)) && !(is_null($exhibition_data['pid'])) && ($exhibition_data['is_available'])){
               $exhibitions['action'] = 'window.open(\'' . variable_get('si_exhibition_website_location', ''). '\'+window.sidora.concept.GetPid()); return false;';
    					 $exhibitions['ui_state_disable'] = false;
    			  }else{
               $exhibitions['action'] = 'return false;';
    					 $exhibitions['ui_state_disable'] = true;
    				}
				  }else{
            $exhibitions['action'] = 'return false;';
					  $exhibitions['ui_state_disable'] = true;
				  }
			}					
			print json_encode($exhibitions);
      exit();
      break; 
	}
  print $to_output;
}
/**
 * This will return a php object with fedora object information or a blank array
 */

function sidora_obj($pid){
  return sidora_meta($pid);
}
function sidora_meta($pid){
  $object = array();
  $tuque = islandora_get_tuque_connection();
  if ($tuque) {
    $object = islandora_object_load($pid);
  }
  return $object;
}
function sidora_concept_resource_listing_count($pid, $resource_types_list, $resource_type = 'all', $title_search = ''){
  $to_return = array();
  $tuque = islandora_get_tuque_connection();
  $concept_pid = $pid;
  if ($tuque) {
    $query = sidora_generate_child_resource_sparql_query($concept_pid, $resource_types_list[$resource_type], $title_search);
    $ri = $tuque->repository->ri;
    $results = $ri->sparqlQuery($query);
    $to_return = sizeof($results);
    return $to_return;
  }
  return -1;
}
function sidora_concept_resource_listing($pid, $resource_types, $limit, $offset, $specific_resource_type = 'all', $title_search = ''){
  $to_return = array();
  $tuque = islandora_get_tuque_connection();
  $concept_pid = $pid;
  if ($tuque) {
    $query = sidora_generate_child_resource_sparql_query($concept_pid, $resource_types[$specific_resource_type], $title_search, '', 'created', $limit, $offset);
    $ri = $tuque->repository->ri;
    $results = $ri->sparqlQuery($query);
    foreach($results as $resindex=>$result){
      $tobj = $tuque->repository->getObject($result['object']['value']);
      //$results[$resindex]['object'] = $tobj;
      $original_metadata = 'FALSE';
      foreach($tobj as $dsid=>$datastream){
        if ($dsid == 'TN'){
          $results[$resindex]['thumbnail_exists'] = TRUE;
        }
        if ($dsid == 'OBJ'){
          $results[$resindex]['MainMimeType'] = $datastream->mimetype;
        }
        if ($dsid == 'RELS-EXT'){
          //Why is this stored in RELS-EXT? Who knows! It's not a relationship, but thats where it sits
          $doc = new DOMDocument();
          $doc->loadXML($datastream->content);
          $original_metadata_elements = $doc->getElementsByTagName('orginal_metadata'); //YES IT IS SPELLED ORGINAL - NOT original
          foreach($original_metadata_elements as $ome){
            $original_metadata = $ome->nodeValue;
          }
        }
      }
      //Override the orginal_metadata from RELS-EXT with the new check for metadata entry in the SIDORA dataset
      if (!empty($tobj['SIDORA'])){
          $doc = new DOMDocument();
          $doc->loadXML($tobj['SIDORA']->content);
          $original_metadata_elements = $doc->getElementsByTagName('meta_requirements_fulfilled');
          foreach($original_metadata_elements as $ome){
            $original_metadata = ($ome->nodeValue !== 'TRUE')?'TRUE':'FALSE';
          }
      }
      $results[$resindex]['original_metadata'] = $original_metadata;
    }
    /*
    print "\n<pre>\n";
    print_r($results);
    print "\n</pre>\n";
    */
    return $results;
  }
  return $to_return;
}
function sidora_main_non_block_content(){
  drupal_add_library('system','ui.tabs');
  drupal_add_library('system','ui.menu');
  drupal_add_library('system','ui.tooltip');
  drupal_add_library('system','ui.button');
  drupal_add_library('system','ui.dialog');
  drupal_add_library('system','ui.resizable');
  return '';
}
/**
 * Implements hook_xml_form_builder_get_transforms of the XML Form Builder module
 * This allows admins to pick these transforms when using the XML Form Builder
 */
function sidora_xml_form_builder_get_transforms(){
  $module_path = drupal_get_path('module', 'sidora');
  return array(
    'customCT_to_dc.xsl' => "$module_path/transforms/customCT_to_dc.xsl",
    'darwinCore_to_dublinCore_ver5.xsl' => "$module_path/transforms/darwinCore_to_dublinCore_ver5.xsl",
    'dc_no_transform.xsl' => "$module_path/transforms/dc_no_transform.xsl",
    'dwc_to_dc.xsl' => "$module_path/transforms/dwc_to_dc.xsl",
    'eaccpf_to_dc.xsl' => "$module_path/transforms/eaccpf_to_dc.xsl",
    'eac_to_dc.xsl' => "$module_path/transforms/eac_to_dc.xsl",
    'fgdc_to_dc.xsl' => "$module_path/transforms/fgdc_to_dc.xsl",
  );
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function sidora_block_view($delta = ''){
  try{
  if (strpos(current_path(), 'sidora/workbench') === FALSE){
    return;
  }
  if (strpos(current_path(), 'sidora/test') !== FALSE){
    return;
  }
  if (!user_is_logged_in()){
    return;
  }
   $block = array();
   switch ($delta) {
    case 'sidora_navigation':
      $block['content'] = sidora_block_content_navigation();
      break;
    case 'sidora_individual_resource_info':
      $block['content'] = '<div id="sidora_content_resource_info"></div>';//Comes fully from javascript
      break;
    case 'sidora_concept_info':
      $block['content'] = '<div id="workbench-menu" style="display:none;">' .
                          '</div><div id="sidora_content_concept_info">'.
/*
                          '<ul id="menu000">
  <li class="ui-state-disabled">Aberdeen</li>
  <li><a href="">Ada</a></li>
  <li>Adamsville</li>
  <li>Addyston</li>
  <li>Delphi
    <ul>
      <li class="ui-state-disabled">Ada</li>
      <li>Saarland</li>
      <li>Salzburg an der schö Donau</li>
    </ul>
  </li>
  <li>Saarland</li>
  <li><a href="">Salzburg</a>
    <ul>
      <li><a href="">Delphi</a>
        <ul>
          <li>Ada</li>
          <li>Saarland</li>
          <li>Salzburg</li>
        </ul>
      </li>
      <li>Delphi
        <ul>
          <li>Ada</li>
          <li>Saarland</li>
          <li>Salzburg</li>
        </ul>
      </li>
      <li>Perch</li>
    </ul>
  </li>
  <li class="ui-state-disabled">Amesville</li>
</ul>'.
*/
 '';
      $block['content'] .= '
  <div id="concept_tabs">
    <ul>
      <li><a href="#concept-meta">Concept Metadata</a></li>
      <li><a href="#concept-relationships">Concept Relationships</a></li>
      <li><a href="#concept-resource-list">Resource List</a></li>
    </ul>
    <div id="concept-meta">
      <div id="concept-meta-menu" class="sidora-menu">
        <div class="workbench-nav">
          <ul id="concept-menu">
            <li><a href="#" onclick="return false;">Concepts</a>
              <ul id="concept-file-menu">
';
      $block['content'] .= '
                <li id="deleteConcept"><a href="#" onclick="sidora.concept.DeleteConcept(); return false;">Delete</a></li>
              </ul>
           </li>
           <li><a href="#" onclick="return false;">Edit</a>
             <ul>
                <li id="editMetadataConcept"><a href="#" onclick="return false;" id="edit-concept-metadata-menu">Edit&nbsp;Metadata</a></li>
                <li id="editPermissionsConcept"><a href="#" onclick="return false;sidora.concept.ShowPermissions(); return false;">Edit&nbsp;Permissions</a></li>';
      if (sidora_is_admin()) $block['content'] .= '
                <li id="manageConcept"><a href="#" onclick="sidora.concept.Manage(); return false;">Manage&nbsp;Concept</a></li>';
      $block['content'] .='
                <li id="configureExhibition"><a href="#" onclick="window.open(Drupal.settings.basePath+\'exhibition_config/config/\'+window.sidora.concept.GetPid()); return false;">Configure&nbsp;Exhibition</a></li>
             </ul>
           </li>
           <li><a href="#" onclick="return false;">View</a>
             <ul>';
 
      //Only show exhibition link if someone has administratively set a location for where exhibition exists
      if (variable_get('si_exhibition_website_location', '') != ''){
    /*   $block['content'] .= '
                <li id="exhibitConcept"><a href="#" onclick="return false;window.open(\''.
          variable_get('si_exhibition_website_location', '').
          '\'+window.sidora.concept.GetPid()); return false;">Exhibit</a></li>';
					*/
        $block['content'] .= '
                <li id="exhibitConcept"><a href="#";>Exhibit</a></li>';
      }
      $block['content'] .= '
             </ul>
           </li>
         </ul>
       </div>    
      </div>
    </div>
    <div id="concept-relationships">
      Concept Relationships
    </div>
    <div id="concept-resource-list" class="sidora-menu">
      <div id="concept-resource-list-internal"/>
        <div class="workbench-nav resource-menu-holder">
          <ul id="resource-menu">
            <li><a href="#" onclick="return false;">Resources</a>
              <ul id="resource-files-menu">
                <li><a href="#" onclick="return false;" id="delete-resource">Delete Selected</a>
              </ul>
            </li>
            <li><a href="#" onclick="return false;">Edit</a>
              <ul>
                <li><a href="#" onclick="return false;" id="edit-resource-metadata-menu" class="ui-state-disabled">Edit&nbsp;Metadata</a></li>';
      if (sidora_is_admin()) $block['content'] .= '
                <li><a href="#" onclick="return false;" id="manage-resource" class="ui-state-disabled">Manage&nbsp;Resource</a></li>';
      $block['content'] .= '
              </ul>
            </li>
            <li><a href="#" onclick="return false;">View</a>
              <ul>
                <li><a href="#" onclick="return false;" id="resource-open-window">Open&nbsp;in&nbsp;New&nbsp;Window</a></li>
                <li><a href="#" onclick="return false;" id="resource-download">Download</a></li>
              </ul>
            </li>
          </ul>
        </div>
      </div>
    </div>
    <div id="tabs-3">
    </div>
  </div>';
      $block['content'] .= '</div>';//Comes fully from javascript
      break;
  }
  return $block;
  }catch(Exception $e){
    //TODO BBB
    $block['content'] = 'Tuque down for block:'.$delta;
    return $block;
  }
}

function sidora_block_content_concept_info(){
  return 'sidora_concept_info';
}
function sidora_block_content_individual_resource_info(){
  return 'sidora_individual_resource_info';
}
function sidora_ontology_object(){
  print variable_get('sidora_ontology_json',sidora_ontology_json_default());
  exit();
}
function sidora_ontology_json_default(){
  return '
 {
  "Project":{"description":"This concept is used to represent a project as a whole or some major subdivision of a project. In both cases it is where you can give a project a title, talk about who is involved, describe the work of the project in a general way, etc.","children":{},"model":"si:projectCModel","form":"Research Project"},
  "Actor":{
      "description":"",
      "children":{
      "Person":{"description":"The Person object is used to describe a person. It includes information about exist dates, full name, address, occupations and biographical information","children":{},"model":"si:projectCModel","form":"Person"},
      "Organization":{"description":"The Organization, Institution or Expedition content model is used to organize the concepts relating to an Organization or Expedition.","children":{},"model":"si:projectCModel","form":"Organization"},
      "Expedition":{"description":"The Organization, Institution or Expedition content model is used to organize the concepts relating to an Organization or Expedition.","children":{},"model":"si:projectCModel","form":"Expedition"}
      }
    },
  "Place":{
      "description":"",
      "children":{
      "General Place":{"description":"This concept is a general concept used to describe a place and includes very basic information such as place name, description, etc.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true},
      "Archaeological Site":{"description":"This concept describes a characteristics of an archaeological site or excavation including stratigraphy, location etc.","children":{},"model":"si:ctPlotCModel","form":"Archaeology Site"},
      "Research Site":{"description":"This concept describes a data set pertaining to a geographic area.","children":{},"model":"si:projectCModel","form":"Research Site or Area - Full Description", "disabled":true}

      }
    },
  "Built Environment":{"description":"This concept describes a man-made construction or landscape, such as a building, garden or facility of some kind.","children":{},"model":"si:projectCModel","form":"Research Project"},
  "Object or Entity":{
      "description":"",
      "children":{
      "Cultural Heritage Entity or Object":{"description":"The Cultural Heritage Entity or Object Concept can be used to describe Artifacts, works of Art, and human-built entities such as a fountain standing in a square etc. ","children":{},"model":"si:lidoCollectionCModel","form":"Cultural Heritage Entity or Object"},
      "Archaeological Feature":{"description":"This concept is used to describe an archaeological feature that is discovered as part of an excavation such as a tomb, a midden or a housing structure.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true}
      }
    },
  "Animal":{
      "description":"",
      "children":{
      "Species":{"description":"This concept is used to describe general characteristics of an animal species.","children":{},"model":"si:dwcCModel","form":"Animal Species or Specimen - Brief Description", "disabled":true},
      "Specimen":{"description":"This concept is used to describe general characteristics of an animal specimen used as part of a research project and includes the catalog number, scientific name and common name of a specific specimen.","children":{},"model":"si:dwcCModel","form":"Animal Species or Specimen - Brief Description"},
      "Component":{"description":"This concept is used to describe a specific body part or component of a specimen used as part of a researc project.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true}
      }
    },
  "Plant":{
      "description":"",
      "children":{
      "Species":{"description":"This concept is used to describe general characteristics of a plant species.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true},
      "Specimen":{"description":"This concept is used to describe general characteristics of an animal specimen used as part of a research project and includes the catalog number, scientific name and common name of a specific specimen.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true},
      "Component":{"description":"This concept is used to describe a specific body part or component of a specimen used as part of a research project.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true}

      }
    },
  "Deployment":{
      "description":"",
      "children":{
      "Instrument Deployment":{"description":"This concept describes an arbitrary instrument deployed to capture data.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true},
       "Camera Deployment":{"description":"The Camera Deployment concept describes the deployment of an camera that collect images automatically at a specific location for a specific period of time.","children":{},"model":"si:cameraTrapCModel","form":"Camera Trap Deployment"}
      }
    },
  "Collection":{
      "description":"",
      "children":{
      "General Collection":{"description":"This concept is used to describe a general grouping of items as part of a research project.  It includes at the very least a title and description.","children":{},"model":"si:projectCModel","form":"Research Project"},
      "Natural History Collection":{"description":"NCD (Natural Collections Description) concepts capture information about collections of Natural History materials. The Natural Collections Description covers all types of collections of natural history material including specimens, original artwork, photographs, archives, published material or a mixture. Each record describes one entire collection, including information on the extent and purpose of the collection, conditions of access and use and who to contact for more information. ","children":{},"model":"si:projectCModel","form":"Research Project"},
      "Dataset":{"description":"This concept is used to describe the characteristics of set resources including the collector of the data and the reason the data was collected.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true}

      }
    },
  "Experiment":{"description":"This concept is used to describe the characteristics of a research experiment including the hypothesis, process steps, observations and conclusion of the experiment.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true},
  "Event":{"description":"This concept is used to describe a general event including a date, time and description of the significance of the event.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true},
  "Idea":{"description":"This concept is used to describe an idea or an organizing concept or theme pertaining to a research project.","children":{},"model":"si:projectCModel","form":"Research Project", "disabled":true}
}
';

}
/*
 * Catch all for ajax
 */
function sidora_ajax_parts($call_type, $param1 = '', $param2 = '', $param3 = ''){
  if ($call_type == 'ontology'){
    return sidora_ontology_object();
  }
  if ($call_type == 'tree'){
    return sidora_html_tree_for_ajax($param1);
  }
  if ($call_type == 'unassociate_delete_orphan'){
    return sidora_unassociate_delete_if_orphaned($param1,$param2);
  }
  if ($call_type == 'delete'){
    return sidora_json_for_delete($param1);
  }
  if ($call_type == 'copy'){
    return sidora_copy($param1,$param2);
  }
  if ($call_type == 'move'){
    return sidora_move($param1,$param2, $param3);
  }
  if ($call_type == 'unassociate'){
    return sidora_unassociate($param1, $param2);
  }
  if ($call_type == 'lock'){
    return sidora_ajax_lock($param1, $param2);
  }
	if ($call_type == 'delete_xsl_file'){
   //error_log("in ajax parts for ".$param1,3,DRUPAL_ROOT.'/'.drupal_get_path('module','sidora')."/errorlog.txt");
	   return sidora_remove_xsl($param1);
	}	 
  drupal_not_found();
}
/**
 * obtain/release/renew a lock on a pid
 * always for the currently logged in user
 * 
 */
function sidora_ajax_lock($pid, $operation = 'obtain'){
  global $user;
  $to_print = array();
  $to_print['error'] = true;
  $to_print['description'] = t('The locking operation was never attempted');
  switch ($operation) {
    case "obtain":
      $clear_lock = false;
      $obtain_lock = true;
      break;
    case "release":
      $clear_lock = true;
      $obtain_lock = false;
      break;
    case "renew":
      $clear_lock = true;
      $obtain_lock = true;
      break;
    default:
      $clear_lock = false;
      $obtain_lock = false;
      $to_print['error'] = true;
      $to_print['description'] = t('Invalid lock action.  Lock actions are: obtain, release, or renew.'); 
  }
  if ($clear_lock || $obtain_lock){
    $who_has_lock = sidora_pid_is_locked($pid);
    $username = $user->name;
    //If a lock exists and the current user doesn't have the lock, they can't do any of these operations
    if (!empty($who_has_lock) && $who_has_lock != $username){
      $to_print['error'] = true;
      $to_print['description'] = t('Another user has a lock on this object');
      if (sidora_is_admin($user)){
        $to_print['admin_only'] = array();
        $to_print['admin_only']['lock_owner'] = $who_has_lock;
      }
    }else{
      $spsl = sidora_pid_set_locked($pid, '', $obtain_lock, $clear_lock);
      if (!empty($spsl)){
        if ($spsl == $username){
          $to_print['error'] = false;
          $to_print['description'] = t('Current user has lock on desired pid');
        }else{
          $to_print['error'] = true;
          $to_print['description'] = t('Another user was granted a lock on this pid');
        } 
      }else{
        //if user wanted to clear the lock this is the desired return
        if ($operation == 'release'){
          $to_print['error'] = false;
          $to_print['description'] = t('Pid was released by current user');
        }else{
          $to_print['error'] = true;
          $to_print['description'] = t('Could not set lock for pid, pid is not locked');
        }
      }
    }
  }
  print json_encode($to_print);
  exit();
}
/**
 * Does a copy then unassociate (equivalent to a move)
 * Copy requires read permission of the to be copied object pid
 * Copy requires update of the copy_to_id
 * Unassociate requires update of the move_from_id 
 */
function sidora_move($move_from_id, $copy_to_id, $pid, $show_output = TRUE){
  global $user;
  if (
       !sidora_allow($user, $pid, 'read') || 
       !sidora_allow($user, $copy_to_id, 'update') ||
       !sidora_allow($user, $move_from_id, 'update')
      ){
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Logged in user does not have permissions for one or more of the following: update this concept's children, update the target concept's children, read access to the object to be moved.");
    $to_output['code'] = "sm1";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  //if the parent pids are locked, can't do it
  if (
       !sidora_obtain_lock($copy_to_id) ||
       !sidora_obtain_lock($move_from_id) 
     ){
    $to_output['error'] = TRUE;
    $to_output['description'] = t("One of the concepts involved in this move have been locked by another user.");
    $to_output['code'] = "sm2";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  $copied = sidora_copy($copy_to_id, $pid, FALSE);
  sidora_release_lock($copy_to_id);
  sidora_release_lock($move_from_id);
  if ($copied['error']){
    if ($show_output){
      print json_encode($copied);
      exit();
    }else{
      return $copied;
    }
  }
  sidora_obtain_lock($copy_to_id);
  sidora_obtain_lock($move_from_id);
  $unassociated = sidora_unassociate($move_from_id, $pid);
  sidora_release_lock($copy_to_id);
  sidora_release_lock($move_from_id);
  return $unassociated;
  //if ($sidora_debug) print 'Move:'.$pid." from:".$move_from_id." to:".$copy_to_id;
}
/**
 * Unassociates one object from another
 * returns TRUE or an array of this type: $to_output['description'] = t("Object not found in the repository");
 * Unassociate requires update of the move_from_id 
 */
function sidora_unassociate($remove_from_pid, $pid_to_remove, $show_output = TRUE, $allow_orphan = FALSE){
  global $user;
  if (
       !sidora_allow($user, $remove_from_pid, 'update')
      ){
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Logged in user does not have permissions for: update this concept's children");
    $to_output['code'] = "su1";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  //if the parent pids are locked, can't do it
  if (
       !sidora_obtain_lock($remove_from_pid) 
     ){
    $to_output['error'] = TRUE;
    $to_output['description'] = t("The parent concept for the unassociate have been locked by another user.");
    $to_output['code'] = "su2";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  module_load_include('inc', 'sidora', 'includes/utils');
  $to_remove = sidora_obj($pid_to_remove);
  $parents = sidora_get_parent_concepts($to_remove);
  if (!$allow_orphan && sizeof($parents) < 2){ //Can't orphan it
    $to_output['error'] = TRUE;
    $to_output['description'] = t("There is only one parent concept for this object. Protecting the object from being an orphan.");
    $to_output['code'] = "su3";
    if ($show_output){ print json_encode($to_output); exit(); }else{ return $to_output; }
  }
  module_load_include('inc', 'sidora', 'includes/utils');
  //determine if this is a resource or a concept
  $parent = sidora_obj($remove_from_pid);
  if (empty($parent) || empty($to_remove)){
    sidora_release_lock($remove_from_pid);
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Object not found in the repository");
    $to_output['code'] = "una";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  $is_concept = sidora_is_concept($to_remove);
  $is_codebook = sidora_is_codebook($to_remove);
  if ($is_concept){
    $parent->relationships->remove(FEDORA_RELS_EXT_URI, 'hasConcept', $pid_to_remove);
  }else if ($is_codebook){
    $parent->relationships->remove(FEDORA_RELS_EXT_URI, 'hasCodebook', $pid_to_remove);
  }else{
    $parent->relationships->remove(FEDORA_RELS_EXT_URI, 'hasResource', $pid_to_remove);
  }
  sidora_clear_tree_cache($remove_from_pid);
  sidora_release_lock($remove_from_pid);
  $to_output['error'] = FALSE;
  $to_output['description'] = t("Object unassociated");
  $to_output['code'] = "una2";
  if ($show_output){
    print json_encode($to_output);
    exit();
  }else{
    return $to_output;
  }
}
/**
 * Performs an unassociate from the input object and then checks to see if the unassociated object has any
 * remaining parents.  If there are no remaining parents, performs a delete on the object.
 * returns TRUE or an array of this type: $to_output['description'] = t("Object not found in the repository");
 */
function sidora_unassociate_delete_if_orphaned($remove_from_pid, $pid_to_remove, $show_output = TRUE){
  global $user;
  if (
       !sidora_allow($user, $remove_from_pid, 'update') ||
       !sidora_allow($user, $pid_to_remove, 'delete')
      ){
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Logged in user does not have permissions for one or more of the following: update this concept's children, delete the object when orphaned");
    $to_output['code'] = "udio1";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  //if the parent pids are locked, can't do it
  if (
       !sidora_obtain_lock($pid_to_remove) 
     ){
    $to_output['error'] = TRUE;
    $to_output['description'] = t("The pid to remove is locked by another user.");
    $to_output['code'] = "udio2";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  module_load_include('inc', 'sidora', 'includes/utils');
  $unassociated = sidora_unassociate($remove_from_pid, $pid_to_remove, FALSE, TRUE);
  if ($unassociated['error']){
    if ($show_output){
      print json_encode($unassociated);
      exit();
    }else{
      return $unassociated;
    }
  }
  $tuque = islandora_get_tuque_connection();
  try{
    $object = $tuque->repository->getObject($pid_to_remove);
  }catch(Exception $exc){
    sidora_release_lock($pid_to_remove);
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Object not found in the repository");
    $to_output['code'] = "udio";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  $parents = sidora_get_parent_concepts($object);
  if (sizeof($parents) == 0){
    $delete_confirmation = sidora_json_for_delete($pid_to_remove, FALSE);
    sidora_release_lock($pid_to_remove);
    if ($show_output){
      if ($delete_confirmation['error']){
        $delete_confirmation['description'] .= ' - Unassocated from original, problem with delete';
        $delete_confirmation['code'] = 'udio1';
      }else{
        $delete_confirmation['description'] .= ' - Unassocated from original';
      }
      if (sidora_is_admin()) $delete_confirmation['pid'] = $pid_to_remove;  //Don't give pid back to non-admins (XSS issue)
      print json_encode($delete_confirmation);
      exit();
    }else{
      return $delete_confirmation;
    }
    //delete will have it's own exit() if called with show_output = TRUE
  }

  sidora_release_lock($pid_to_remove);
  $to_output['error'] = FALSE;
  $to_output['description'] = t("Object not orphaned, unassociated from requested parent");
  //var_dump ($parents);
  if ($show_output){
    print json_encode($to_output);
    exit();
  }else{
    return $to_output;
  }
}
/**
 * Performs a "copy", which is actually adding the relationship to the existing object to a new parent.
 * No new item gets created in Fedora Commons.
 * returns TRUE or an array of this type: $to_output['description'] = t("Object not found in the repository");
 */
function sidora_copy($copy_to_id, $pid, $show_output = TRUE){
  global $user;
  if (
       !sidora_allow($user, $pid, 'read') || 
       !sidora_allow($user, $copy_to_id, 'update')
      ){
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Logged in user does not have permissions for updating the target concept");
    $to_output['code'] = "sc1";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  //if the parent pids are locked, can't do it
  if (
       !sidora_obtain_lock($copy_to_id) 
     ){
    $to_output['error'] = TRUE;
    $to_output['description'] = t("The target concept is locked by another user.");
    $to_output['code'] = "sc2";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  module_load_include('inc', 'sidora', 'includes/utils');
  //determine if this is a resource or a concept
  $tuque = islandora_get_tuque_connection();
  $to_output = array();
  try{
    $copy_to = $tuque->repository->getObject($copy_to_id);
    $object = $tuque->repository->getObject($pid);
  }catch(Exception $exc){
    sidora_release_lock($copy_to_id);
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Object not found in the repository");
    $to_output['code'] = "copy1";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  if (empty($object)){
    sidora_release_lock($copy_to_id);
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Object not found in the repository");
    $to_output['code'] = "copy2";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  $is_concept = sidora_is_concept($object);
  $is_codebook = sidora_is_codebook($object);
  if ($is_concept){
    $existing_rels = $copy_to->relationships->get(FEDORA_RELS_EXT_URI,'hasConcept',$pid);
    if (sizeof($existing_rels) > 0){
      $to_output['error'] = TRUE;
      $to_output['description'] = t("Object already exists on target");
      $to_output['code'] = 'copy3';
    }else{
      $copy_to->relationships->add(FEDORA_RELS_EXT_URI, 'hasConcept', $pid);
    }
  }else if ($is_codebook){
    $copy_to->relationships->add(FEDORA_RELS_EXT_URI, 'hasCodebook', $pid);
  }else{
    $existing_rels = $copy_to->relationships->get(FEDORA_RELS_EXT_URI,'hasResource',$pid);
    if (sizeof($existing_rels) > 0){
      $to_output['error'] = TRUE;
      $to_output['description'] = t("Object already exists on target");
      $to_output['code'] = 'copy4';
    }else{
      $copy_to->relationships->add(FEDORA_RELS_EXT_URI, 'hasResource', $pid);
    }
  }
  sidora_release_lock($copy_to_id);
  if (!empty($to_output)){
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  sidora_clear_tree_cache($copy_to_id);
  if ($show_output){
    $to_output['error'] = FALSE;
    $to_output['description'] = t("Object copied");
    $to_output['code'] = 'copy5';
    print json_encode($to_output);
    exit();
  }else{
    return TRUE;
  }
}
/**
 * returns an array of this type:   $to_output = array('error'=>TRUE,'description'=>t('Unknown Error'));
 **/
function sidora_json_for_delete($pid, $show_output = TRUE){
  global $user;
  if ($show_output) header('Content-Type: application/json');
  $object = sidora_obj($pid);
  if (!sidora_is_admin($user) && $object->owner != $user->name){
    $to_output['error'] = TRUE;
    $to_output['description'] = t("This functionality is restricted to administrators or object owner.");
    $to_output['code'] = "sjfd0";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  module_load_include('inc', 'sidora', 'includes/utils');
  $to_output = array('error'=>TRUE,'description'=>t('Unknown Error'));

  //determine if this is a resource or a concept
  if (empty($object)){
    $to_output['error'] = TRUE;
    $to_output['description'] = t("Object not found in the repository");
    $to_output['code'] = "sjfd2";
    if ($show_output){
      print json_encode($to_output);
      exit();
    }else{
      return $to_output;
    }
  }
  $is_concept = sidora_is_concept($object);
  $is_codebook = sidora_is_codebook($object);
  if ($is_concept){
    $children_concepts = $object->relationships->get(FEDORA_RELS_EXT_URI, 'hasConcept');
    $children_resources = $object->relationships->get(FEDORA_RELS_EXT_URI, 'hasResource');
    $children_codebooks = $object->relationships->get(FEDORA_RELS_EXT_URI, 'hasCodebook');
    $child_count = count($children_concepts) + count($children_resources) + count($children_codebooks);
    if ($child_count > 0){
      $to_output['error'] = TRUE;
      $to_output['description'] = t("Cannot delete object with children.  It has @children_count concept(s) and @resource_count resource(s).", 
         array('@children_count'=> count($children_concepts), '@resource_count' => count($children_resources)));
      if ($show_output){
        print json_encode($to_output);
        exit();
      }else{
        return $to_output;
      }
    } 
  }

  //Set it to deleted and remove the links to it from its parents

  $parents = sidora_get_parent_concepts($object);
  foreach($parents as $parent_pid => $parent){
    $parent_obj = $tuque->repository->getObject($parent_pid);
    if ($is_concept){
      $removal_return = $parent_obj->relationships->remove(FEDORA_RELS_EXT_URI,'hasConcept',$object);
    }else if ($is_codebook){
      $removal_return = $parent_obj->relationships->remove(FEDORA_RELS_EXT_URI,'hasCodebook',$object);
    }else{
      $removal_return = $parent_obj->relationships->remove(FEDORA_RELS_EXT_URI,'hasResource',$object);
    }
  }
  $object->delete();
  $to_output['description'] = t("Object deleted");
  $to_output['error'] = FALSE;
  if ($show_output){
    print json_encode($to_output);
    exit();  
  }else{
    return $to_output;
  }
}

/*
 * returns a html tree for replacing the existing tree
 * Currently assumes everyone has full read access
 */
function sidora_html_tree_for_ajax($root_pid = ''){
  module_load_include('inc', 'sidora', 'includes/utils');
  if (empty($root_pid)) $root_pid = sidora_get_user_root_object();
  print sidora_html_string_tree($root_pid);
  exit();
}
function sidora_html_string_tree($root_pid = '', $root = NULL){
  module_load_include('inc', 'sidora', 'includes/utils');
  if (empty($root_pid)) $root_pid = sidora_get_user_root_object();
  if (empty($root)){
    $root= sidora_obj($root_pid);
  }
  $results = _sidora_get_child_results_cache($root_pid);
  $filled = sidora_fill_concepts_children($results); 
  $html_tree_from_query_result = sidora_html_tree($filled);
  $to_return = '';
  $to_return .= '<ul>';
  $to_return .= '<li><a href="'.base_path().'sidora/workbench/#'.$root_pid.'" pid="'.$root_pid.'" fullname="'.$root->label.'">';
  $to_return .= $root->label;
  $to_return .= '</a>';
  $to_return .= '<ul>';
  $to_return .= $html_tree_from_query_result;
  $to_return .= '</ul></li></ul>';
  return $to_return;
}
function sidora_block_content_navigation(){
  module_load_include('inc', 'sidora', 'includes/utils');
  $root_pid = sidora_get_user_root_object();
  $results = _sidora_get_child_results_cache($root_pid);
  $filled = sidora_fill_concepts_children($results); 
  $html_tree_from_query_result = sidora_html_tree($filled);
  $root = sidora_obj($root_pid);
  $to_return = '<div style="float:left;width:200px;">';
  $to_return .= '<div id="concept-create-menu">';
  $to_return .= '</div>';
  $to_return .= '<div id="forjstree">';
  $to_return .= sidora_html_string_tree($root_pid);
  $to_return .= '</div></div>';
  //jQuery UI L&F
  drupal_add_css(drupal_get_path('module','sidora').'/css/themes/smoothness/jquery-ui.min.css');
  //jMenu lib
  drupal_add_css(drupal_get_path('module','sidora').'/jslibs/jMenu/css/jmenu.css');
  drupal_add_js(drupal_get_path('module','sidora').'/jslibs/jMenu/js/jMenu.jquery.js');
  //jsTree lib
  drupal_add_css(drupal_get_path('module','sidora').'/jslibs/jstree/dist/themes/default/style.min.css');
  drupal_add_js(drupal_get_path('module','sidora').'/jslibs/jstree/dist/jstree.js');
  //dataTables lib
  drupal_add_js(drupal_get_path('module','sidora').'/jslibs/dataTables/js/jquery.dataTables.min.js');
  drupal_add_js(drupal_get_path('module','sidora').'/jslibs/dataTables/js/pipeline.js');
  drupal_add_css(drupal_get_path('module','sidora').'/jslibs/dataTables/css/jquery.dataTables.css');

  //Sidora specific
  drupal_add_css(drupal_get_path('module','sidora').'/css/workbench.css', array('weight' => 10000, 'group' => CSS_THEME));
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_sidora_queue.js');
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench.js');
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_util.js');
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_menus.js');
  drupal_add_js(drupal_get_path('module','sidora').'/js/workbench_sidora_request.js');
  drupal_add_js(drupal_get_path('module','sidora').'/js/paging.js'); // adds paging capability to resources
  return $to_return;
}
// For Ingestion
function sidora_islandora_ingest_steps_alter(array &$steps, array &$form_state) {
  module_load_include('inc', 'xml_form_builder', 'includes/associations');
  $shared_storage = islandora_ingest_form_get_shared_storage($form_state);
  $associations = xml_form_builder_get_associations(array(), $shared_storage['models'], array());
  // ... Find the association you want to use, iterate over the values and
  // choose the one you want.
  $form_name = drupal_static('form_of_interest'); 
  $association = NULL;
  foreach($associations as $curr_association){
    if ($curr_association['form_name'] == $form_name){
      $association = $curr_association;
    }
  }
  if (!empty($association)){
    $association_step_storage = &islandora_ingest_form_get_step_storage($form_state, 'xml_form_builder_metadata_step');
    // Make $association_step_storage have only the association you want to use.
    $association_step_storage['association'] = $association; 
    // Remove the selection step as we've already forced it's value above.
    unset($steps['xml_form_builder_association_step']);
    if (!empty($steps['xml_form_builder_metadata_step'])){
      $steps['xml_form_builder_metadata_step']['args'][0] = $association;
    }
  }
}
function sidora_get_plupload_html($elements, $button_text = 'Upload Files'){
  global $user;
  drupal_add_js(drupal_get_path('module', 'sidora') . '/plupload-2.1.2/js/plupload.full.min.js');
  ob_start();
  print '
  <div id="edit-0-wrapper">
  <div id="filelist" ></div>
  <br />
  <!--';
  //print_r($elements);
  //print implode(",",$elements['#extensions']);
  print '-->
  <div id="container" class="-uploader">
      <button class="islandora-repo-button" id="pickfiles" href="javascript:;">'.$button_text.'</button> 
      <a id="uploadfiles" style="display:none;" href="javascript:;">[Upload files]</a>
  </div>

  <br />
  <pre id="console"></pre>
  </div>


  <script type="text/javascript">
  function loadjscssfile(filename, filetype){
   if (filetype=="js"){ //if filename is a external JavaScript file
    var fileref=document.createElement("script")
    fileref.setAttribute("type","text/javascript")
    fileref.setAttribute("src", filename)
   }
   else if (filetype=="css"){ //if filename is an external CSS file
    var fileref=document.createElement("link")
    fileref.setAttribute("rel", "stylesheet")
    fileref.setAttribute("type", "text/css")
    fileref.setAttribute("href", filename)
   }
   if (typeof fileref!="undefined")
    document.getElementsByTagName("head")[0].appendChild(fileref)
  }
  runtimesBrowserSpecific = "flash,html5,html4";
  if (navigator.userAgent.match(/(Firefox)/i) != null){
    //Firefox gets weird with the flash version between http and https, sometimes http doesnt work
    runtimesBrowserSpecific = "html5,html4";
  }

  window.uploader = new plupload.Uploader({
    runtimes : runtimesBrowserSpecific, //No silverlight - gets bad if user does not allow it and it tries to use.
    browse_button : "pickfiles", // you can pass in id...
    container: document.getElementById("container"), // ... or DOM Element itself
    url : "';
  print base_path();
  print 'sidora/upload/';
  print $user->uid;
  print '"';

  //print '+jQuery("#content-model-viewer-ingest-resource-metadata-form").find("input[name=form_build_id]").val()';
  print ',
    flash_swf_url : "';
  print base_path();
  print 'sites/all/modules/sidora/plupload-2.1.2/js/Moxie.swf",
    silverlight_xap_url : "';
  print base_path();
  print 'sites/all/modules/sidora/plupload-2.1.2/js/Moxie.xap",
    
    filters : {
      max_file_size : "1000mb",
      mime_types: [
        {title : "';
  print implode(",",$elements['#extensions']) . ' files';
  print '", extensions : "';
  print implode(",",$elements['#extensions']);
  print '"}
      ]
    },

    init: {
      PostInit: function() {
        document.getElementById("filelist").innerHTML = "";

        document.getElementById("uploadfiles").onclick = function() {
          uploader.start();
          return false;
        };
      },

      FilesAdded: function(up, files) {
        plupload.each(files, function(file) {
                             //alert(file.id+" "+file.name+" "+file.size);
                             var item = jQuery("<div></div>");
                             item.attr("id",file.id);
                             item.html(file.name + "(" + plupload.formatSize(file.size) + ")<b></b>");
                             jQuery("#filelist").append(item);
        });
        uploader.start();
      },

      UploadProgress: function(up, file) {
        document.getElementById(file.id).getElementsByTagName("b")[0].innerHTML = "<span>" + file.percent + "%</span>";
      },

      Error: function(up, err) {
        document.getElementById("console").innerHTML += "\n" + err.file.name + ": " + err.message;
        if (err.code == -601) document.getElementById("console").innerHTML += "  Usable extensions are:';
  print implode(",",$elements['#extensions']);
  print '";
      }
    }
  });

  uploader.init();
  </script>
  ';
  $result = ob_get_clean();
  return $result;

}
function sidora_upload($form_id){

//upload for plupload
// Make sure file is not cached (as it happens for example on iOS devices)
header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
header("Last-Modified: " . gmdate("D, d M Y H:i:s") . " GMT");
header("Cache-Control: no-store, no-cache, must-revalidate");
header("Cache-Control: post-check=0, pre-check=0", false);
header("Pragma: no-cache");

/* 
// Support CORS
header("Access-Control-Allow-Origin: *");
// other CORS headers if any...
if ($_SERVER['REQUEST_METHOD'] == 'OPTIONS') {
  exit; // finish preflight CORS requests here
}
*/

// 5 minutes execution time
@set_time_limit(5 * 60);

// Uncomment this one to fake upload time
// usleep(5000);

// Settings
$targetDir = file_directory_temp();
//$targetDir = 'uploads';
$cleanupTargetDir = false; // Remove old files
$outputDebugCleanup = false;
$maxFileAge = 5 * 3600; // Temp file age in seconds


// Create target dir
if (!file_exists($targetDir)) {
  @mkdir($targetDir);
}

// Get a file name
$file_info = new stdClass();

if (isset($_REQUEST["name"])) {
//  $fileName = $_REQUEST["name"];
  $file_info->filename = $_REQUEST["name"];
} elseif (!empty($_FILES)) {
  $file_info->filename = $_FILES["file"]["name"];
} 


$fileName = uniqid("file_").$file_info->filename;
/*
print '----Session----';
print_r($_SESSION);
print '----Session END----';
global $base_path;
print $base_path;
*/
if (isset($_SESSION['file_uploads'])){
}else{
}
$filePath = $targetDir . DIRECTORY_SEPARATOR . $fileName;
$file_info->filepath = $filePath;//$base_path . 'sites/all' .$filePath;
$_SESSION['file_uploads'][$form_id][] = $file_info;
// Chunking might be enabled
$chunk = isset($_REQUEST["chunk"]) ? intval($_REQUEST["chunk"]) : 0;
$chunks = isset($_REQUEST["chunks"]) ? intval($_REQUEST["chunks"]) : 0;


// Remove old temp files
if ($cleanupTargetDir) {
      if ($outputDebugCleanup) print 'cleaning up'."\n";
        if (!is_dir($targetDir) || !$dir = opendir($targetDir)) {
                die('{"jsonrpc" : "2.0", "error" : {"code": 100, "message": "Failed to open temp directory."}, "id" : "id"}');
        }

        while (($file = readdir($dir)) !== false) {
                if ($outputDebugCleanup) print "\n".'checking on file:'.$file;
                $tmpfilePath = $targetDir . DIRECTORY_SEPARATOR . $file;

                // If temp file is current file proceed to the next
                if ($tmpfilePath == "{$filePath}.part") {
                        continue;
                }

                // Remove temp file if it is older than the max age and is not the current file
                if (preg_match('/\.part$/', $file) && (filemtime($tmpfilePath) < time() - $maxFileAge)) {
                        @unlink($tmpfilePath);
                }else{
                  if ($outputDebugCleanup) print "\nfilemtime:".filemtime($tmpfilePath).'ok';
                  if ($outputDebugCleanup) print "\n     time:".time().'ok';
                  if ($outputDebugCleanup) print "\ndel  time:".(time()-$maxFileAge);
                }
        }
        closedir($dir);
}

// Open temp file
if (!$out = @fopen("{$filePath}.part", $chunks ? "ab" : "wb")) {
        die('{"jsonrpc" : "2.0", "error" : {"code": 102, "message": "Failed to open output stream."}, "id" : "id"}');
}

if (!empty($_FILES)) {
        if ($_FILES["file"]["error"] || !is_uploaded_file($_FILES["file"]["tmp_name"])) {
                die('{"jsonrpc" : "2.0", "error" : {"code": 103, "message": "Failed to move uploaded file."}, "id" : "id"}');
        }

        // Read binary input stream and append it to temp file
        if (!$in = @fopen($_FILES["file"]["tmp_name"], "rb")) {
                die('{"jsonrpc" : "2.0", "error" : {"code": 101, "message": "Failed to open input stream."}, "id" : "id"}');
        }
} else {
        if (!$in = @fopen("php://input", "rb")) {
                die('{"jsonrpc" : "2.0", "error" : {"code": 101, "message": "Failed to open input stream."}, "id" : "id"}');
        }
}

while ($buff = fread($in, 4096)) {
        fwrite($out, $buff);
}

@fclose($out);
@fclose($in);






// Check if file has been uploaded
if (!$chunks || $chunk == $chunks - 1) {
        // Strip the temp .part suffix off
        rename("{$filePath}.part", $filePath);
}

// Return Success JSON-RPC response
//print_r ($_SESSION['file_uploads']);
//die('{"jsonrpc" : "2.0", "result" : null, "id" : "id"}');
if ($outputDebugCleanup) {
  print 'upload complete:'.$filePath;
  print "\n";
  print 'full list of files here:';
  print "\n";
  $files1 = scandir($targetDir);
  print_r($files1);
}else{
  print 'upload complete';
}
exit();
}
/*
 * Creates the html_tree.  
 * (This function should not be used to restrict view permissions, instead only pass in information that is allowed to be viewed.)
 */
function sidora_html_tree($query_result_tree, $input_path = ''){
  $to_return = '';
  foreach($query_result_tree as $t_index=>$t_element){
    $pid = $t_element['o']['value'];
    $current_path = $input_path;
    if ($input_path != '') $current_path .= ',';
    $current_path .= $pid;
    $to_return .= '<li><a href="'.base_path().'sidora/workbench/#'.$pid.'?path='.$input_path.'" pid="'.$pid.'" fullname="'.$t_element['t']['value'].'" conceptchildren="'.$t_element['k0']['value'].'">';
    $to_return .= $t_element['t']['value'];
    if ($t_element['k0']['value'] > 0) $to_return .= ' ('.$t_element['k0']['value'].')';
    $to_return .= '</a>';
    if (array_key_exists('children',$t_element)){
      $to_return .= '<ul>';
      $to_return .= sidora_html_tree($t_element['children'], $current_path);
      $to_return .= '</ul>';
    }
    if (array_key_exists('already_in_tree',$t_element) && $t_element['already_in_tree']){
      $to_return .= '<b>Already in tree!</b>';

    }
    $to_return .= '</li>'."\n";
  }
  return $to_return;
}
/*
 * Clears specific pids out of the tree cache 
 */
function sidora_clear_entire_tree_cache(){
  cache_clear_all('sidora:children_results:', 'cache', TRUE);
}
/*
 * Clears specific pids out of the tree cache 
 */
function sidora_clear_tree_cache($pid = ''){
  if (!empty($pid)){
    //dsm("clearing: $pid");
    cache_clear_all('sidora:children_results:'.$pid, 'cache', TRUE);
  }
}
/*
 * Very simply attempts to obtain a lock on the pid
 * returns true to say that the lock was obtained, false otherwise
 * to be used to check if someone can perform an action
 */
function sidora_obtain_lock($pid){
  global $user;
  $spsl = sidora_pid_set_locked($pid, '', true);
  return $user->name == $spsl;
}
/*
 * Convenience method to release a lock on the pid for the logged in user
 */
function sidora_release_lock($pid){
  sidora_pid_set_locked($pid, '', false, true);
}
/**
 * returns the user name that the pid is locked to
 * returns FALSE if item is not locked
 * 
 * convenience method for readability, simply calls sidora_pid_set_locked
 */
function sidora_pid_is_locked($pid){
  return sidora_pid_set_locked($pid);
}
/**
 * Set the pid to be locked.  If no user is sent, locks to currently logged in user
 * If $clear_lock is set to true, the lock MUST be for the user specified or the user sent
 * otherwise will not clear the lock.
 * Setting clear_lock and obtain_lock to true will refresh the time remaining on the lock
 *
 * returns the user that the pid is locked to or FALSE if not locked
 */
function sidora_pid_set_locked($pid, $set_locked_to_user = '', $obtain_lock = false, $clear_lock = false){
  $cache_name = "sidora:locking:".$pid;
  $pid_lock = cache_get($cache_name);
  if (!$obtain_lock && empty($pid_lock) && !$clear_lock) return FALSE; //Was a call to see who had the lock, and nobody has it

  $drupal_user = sidora_get_drupal_user($set_locked_to_user);
  if (!empty($drupal_user)){
    $drupal_user_name = $drupal_user->name;
  }else{
    $drupal_user_name = '';
    drupal_set_message(t('Attempted to lock a pid with an invalid drupal user name'), 'warning');
  }
  $currently_locked_to_name = '';
  if (!empty($pid_lock)){
    //See if it's expired:
    if (time() < $pid_lock->expire){
      //Not expired yet, so get the data
      $currently_locked_to_name = $pid_lock->data;
    }
  }
  if (empty($clear_lock) && empty($obtain_lock)){
    //just trying to see who has it
    return $currently_locked_to_name;
  }
  if ($clear_lock && $drupal_user_name == $currently_locked_to_name){
    cache_clear_all($cache_name, 'cache', TRUE);
    $currently_locked_to_name = '';
  }
  //In order to be able to set a lock on the pid, check that permissions exist that would allow the user
  //to be able to modify the object
  $can_obtain_lock = 
    sidora_allow($drupal_user,$pid,'create') || 
    sidora_allow($drupal_user,$pid,'update') ||
    sidora_allow($drupal_user,$pid,'delete') ||
    sidora_allow($drupal_user,$pid,'permission');

  if ($obtain_lock && !empty($drupal_user_name) && $can_obtain_lock){
    if (!empty($currently_locked_to_name) && $currently_locked_to_name != $drupal_user_name){
      //it's currently locked to someone and it's not the user you're interested in...
      return $currently_locked_to_name;
    }
    $lock_seconds = variable_get('sidora_record_lock_seconds',23);
    cache_set($cache_name,$drupal_user_name,'cache',time() + $lock_seconds);
  }
  $at_end = cache_get($cache_name);
  if (!empty($at_end)){
    return $at_end->data;
  }else{
    return FALSE;
  }
}
/*
 * Returns an array of the form:
Array(
    [0] => Array(
            [o] => Array([value] => si:user-projects  ,[uri] => info:fedora/si:user-projects ,[type] => pid )
            [t] => Array([type] => literal[value] => Researcher Projects )
            [k0] => Array([type] => literal[value] => 11 )
            [children] => Array(
                    [0] => Array(
                            [o] => Array([value] => si-user:99  ,[uri] => info:fedora/si-user:99 ,[type] => pid )
                            [t] => Array([type] => literal[value] => DingDJ Projects )
                            [k0] => Array([type] => literal[value] => 1 )
                            [children] => Array(
                                    [0] => Array(
                                            [o] => Array([value] => si:256795  ,[uri] => info:fedora/si:256795 ,[type] => pid )
                                            [t] => Array([type] => literal[value] => TestProject )
                                            [k0] => Array([type] => literal[value] => 0 )
                                            [children] => Array( ) ) ) )
                    [1] => Array(
                            [o] => Array([value] => si-user:57  ,[uri] => info:fedora/si-user:57 ,[type] => pid )
                            [t] => Array([type] => literal[value] => HuaD Projects )
                            [k0] => Array([type] => literal[value] => 2 )
                            [children] => Array(
                                    [0] => Array(
                                            [o] => Array([value] => si:257131  ,[uri] => info:fedora/si:257131 ,[type] => pid )
                                            [t] => Array([type] => literal[value] => Form Wizard )
                                            [k0] => Array([type] => literal[value] => 0 )
                                            [children] => Array( ) )
                                    [1] => Array(
                                            [o] => Array([value] => si:118010  ,[uri] => info:fedora/si:118010 ,[type] => pid )
                                            [t] => Array([type] => literal[value] => Tabular Dataset Project )
                                            [k0] => Array([type] => literal[value] => 0 )
                                            [children] => Array( ) ) ) )
                    [2] => Array(

 *  ...and so on.  k0 is the number of children
 */
function sidora_fill_concepts_children($query_result, $already_filled_pids = array()){
  if (is_array($query_result)){
    foreach ($query_result as $c_index=>$child){
      $child_pid = $child['o']['value'];
      if (!in_array($child_pid,$already_filled_pids)){
        $already_filled_pids[] = $child_pid;
        $results = _sidora_get_child_results_cache($child_pid);
        $query_result[$c_index]['children'] = sidora_fill_concepts_children($results, $already_filled_pids);
      }else{
        $query_result[$c_index]['already_in_tree'] = true;
      }
    }
  }
  return $query_result;
}
function _sidora_get_child_results_cache($child_pid){
  if (cache_get("sidora:children_results:".$child_pid) === FALSE){
    $tuque = islandora_get_tuque_connection();
    $grandchildren_query = wb_si_exhibition_generate_child_concept_query($child_pid);
    $ri = $tuque->repository->ri;
    $results = $ri->itqlQuery($grandchildren_query);
    cache_set("sidora:children_results:".$child_pid,$results);
  }else{
    $results = cache_get("sidora:children_results:".$child_pid)->data;
  }
  return $results;
}
function sidora_metadata_to_html_table_transform($xml, $xsl_file){
  $doc = new DOMDocument();
  $xsl = new XSLTProcessor();
  $xsl_string = sidora_xsl_string($xsl_file);
  $doc->loadXML($xsl_string);
  $xsl->importStyleSheet($doc);
  if (strpos($xml, "<?xml version") === FALSE){
    $docToLoad = ('<?xml version="1.0" encoding="UTF-8"?>'.$xml);
  }else{
    $docToLoad = $xml;
  }
  $doc->loadXML($docToLoad);
  $initialOutput = $xsl->transformToXML($doc);
  //now go through and add the even/odd classes
  $tableRows = explode("<tr>",$initialOutput);
  $properOutput = $tableRows[0];
  for ($trNum = 1; $trNum < count($tableRows); $trNum++){ //end one doesn't get a tr
    if ($trNum % 2 == 0){
      $properOutput .= '<tr class="even">'.$tableRows[$trNum];
    }else{
      $properOutput .= '<tr class="odd">'.$tableRows[$trNum];
    }
  }
  return $properOutput;

}
function sidora_xsl_string($xsl_file){
  if (empty($xsl_file)){
    return variable_get('sidora_metadata_xsl',sidora_xsl_string_default());
  }
  $directory_for_xsl = DRUPAL_ROOT.'/'.drupal_get_path('module','sidora').'/XSL';
  $file = $directory_for_xsl.'/'.$xsl_file;
  $content = file_get_contents($file);
  return $content;
 
}
function sidora_xsl_string_default(){
  return sidora_xsl_string_default_as_definition_list();
}

function sidora_xsl_string_default_as_definition_list(){
  return '<?xml version="1.0" encoding="UTF-8"?>

<xsl:stylesheet version="1.0" 
xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
xmlns:mods="http://www.loc.gov/mods/v3" 
xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output" 
xmlns:cpf="urn:isbn:1-931666-33-4" 
>

<xsl:template match="/">
  <html>
  <body>
  <dl class="metadata-table">
      <xsl:for-each select="xml_root/debug">
    <dt>Debug</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:for-each>
    <xsl:for-each select="//mods:abstract">
    <xsl:if test="current()!=\'\'">
    <dt>Description</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:subject/mods:topic">
    <xsl:if test="current()!=\'\'">
    <dt>Topic</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:subject/mods:geographic">
    <xsl:if test="current()!=\'\'">
    <dt>Geographic</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:name">
      <xsl:for-each select="mods:namePart">
        <xsl:if test="current()!=\'\'">
        <dt>Name</dt><dd><xsl:value-of select="current()"/></dd>
                </xsl:if>
      </xsl:for-each>
      <xsl:for-each select="mods:role/mods:roleTerm">
        <xsl:if test="current()!=\'\'">
        <dt>Role</dt><dd><xsl:value-of select="current()"/></dd>
                </xsl:if>
      </xsl:for-each>
    </xsl:for-each>
 <xsl:for-each select="//mods:identifier">
    <xsl:if test="current()!=\'\'">
    <dt>Identifier</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:genre">
    <xsl:if test="current()!=\'\'">
    <dt>Genre</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:note[not(@*)]">
    <xsl:if test="current()!=\'\'">
    <dt>Note</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:originInfo/mods:dateCaptured">
    <xsl:if test="current()!=\'\'">
    <dt>Date Captured</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:physicalLocation">
    <xsl:if test="current()!=\'\'">
    <dt>Physical Location</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:copyInformation/mods:subLocation">
    <xsl:if test="current()!=\'\'">
    <dt>Sub Location</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//fits:fileinfo/fits:created[@toolname=\'Exiftool\']">
    <xsl:if test="current()!=\'\'">
    <dt>Image Capture Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//citeinfo/title">
    <xsl:if test="current()!=\'\'">
    <dt>Camera Site Name</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//citeinfo/othercit">
    <xsl:if test="current()!=\'\'">
    <dt>Camera Deployment ID</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//citeinfo/origin">
    <xsl:if test="current()!=\'\'">
    <dt>Originator</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//citeinfo/geoform">
    <xsl:if test="current()!=\'\'">
    <dt>Format of Geospatial Data</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//descript/abstract">
    <xsl:if test="current()!=\'\'">
    <dt>Camera Deployment Note</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//descript/supplinf">
    <xsl:if test="current()!=\'\'">
    <dt>Purposed Lat and Long</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/latres">
    <xsl:if test="current()!=\'\'">
    <dt>Actual Latitude</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/longres">
    <xsl:if test="current()!=\'\'">
    <dt>Actual Longitude</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//dataqual/lineage/procstep[procdesc=\'Proposed Camera Deployment Begin Date\']/procdate">
    <xsl:if test="current()!=\'\'">
    <dt>Proposed Camera Deployment Begin Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//dataqual/lineage/procstep[procdesc=\'Proposed Camera Deployment End Date\']/procdate">
    <xsl:if test="current()!=\'\'">
    <dt>Proposed Camera Deployment End Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//timeinfo/rngdates/begdate">
    <xsl:if test="current()!=\'\'">
    <dt>Camera Deployment Begin Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//timeinfo/rngdates/enddate">
    <xsl:if test="current()!=\'\'">
    <dt>Camera Deployment End Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Camera ID\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <dt>Camera ID</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Image Resolution Setting\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <dt>Image Resolution Setting</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Detection Distance\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <dt>Detection Distance</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Sensitivity Setting\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <dt>Sensitivity Setting</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Quiet Period Setting\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <dt>Quiet Period Setting</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Camera Height\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <dt>Camera Height</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Habitat Type\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <dt>Habitat Type</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//theme/themekey">
    <xsl:if test="current()!=\'\'">
    <dt>Theme Keyword</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//place/placekey">
    <xsl:if test="current()!=\'\'">
    <dt>Place Keyword</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//keywtax/taxonkey">
    <xsl:if test="current()!=\'\'">
    <dt>Taxonomic Keyword</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//taxoncl/taxonrn">
    <xsl:if test="current()!=\'\'">
    <dt>Taxonomic Rank Name</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//taxoncl/taxonrv">
    <xsl:if test="current()!=\'\'">
    <dt>Taxonomic Rank Value</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//idinfo/accconst">
    <xsl:if test="current()!=\'\'">
    <dt>Access Constraints</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//idinfo/useconst">
    <xsl:if test="current()!=\'\'">
    <dt>Use Constraints</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//idinfo/datacred">
    <xsl:if test="current()!=\'\'">
    <dt>Data Set Credit</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//dataqual/complete">
    <xsl:if test="current()!=\'\'">
    <dt>Camera Failure Details</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//method[methtype=\'Bait\']/methodid/methkey">
    <xsl:if test="current()!=\'\'">
    <dt>Bait Type</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//method[methtype=\'Bait\']/methdesc">
    <xsl:if test="current()!=\'\'">
    <dt>Bait Methodology</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//method[methtype=\'feature\']/methodid/methkey">
    <xsl:if test="current()!=\'\'">
    <dt>Feature</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//method[methtype=\'feature\']/methodid/methdesc">
    <xsl:if test="current()!=\'\'">
    <dt>Feature Description</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/latres">
    <xsl:if test="current()!=\'\'">
    <dt>Actual Latitude</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/longres">
    <xsl:if test="current()!=\'\'">
    <dt>Actual Longitude</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/geogunit">
    <xsl:if test="current()!=\'\'">
    <dt>Geographic Coordinate Units</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/vertdef/altsys/altdatum">
    <xsl:if test="current()!=\'\'">
    <dt>Altitude Datum Name</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/vertdef/altsys/altres">
    <xsl:if test="current()!=\'\'">
    <dt>Elevation</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/vertdef/altsys/altunits">
    <xsl:if test="current()!=\'\'">
    <dt>Altitude Distace Units</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/vertdef/altsys/altenc">
    <xsl:if test="current()!=\'\'">
    <dt>Altitude Encoding Method</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metd">
    <xsl:if test="current()!=\'\'">
    <dt>Metadata Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metrd">
    <xsl:if test="current()!=\'\'">
    <dt>Metadata Review Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metfrd">
    <xsl:if test="current()!=\'\'">
    <dt>Metadata Future Review Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntperp/cntper">
    <xsl:if test="current()!=\'\'">
    <dt>Contact Person</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntperp/cntorg">
    <xsl:if test="current()!=\'\'">
    <dt>Organization Name</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntaddr/address">
    <xsl:if test="current()!=\'\'">
    <dt>Address</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntaddr/city">
    <xsl:if test="current()!=\'\'">
    <dt>City</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntaddr/state">
    <xsl:if test="current()!=\'\'">
    <dt>State</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntaddr/postal">
    <xsl:if test="current()!=\'\'">
    <dt>Postal Code</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntvoice">
    <xsl:if test="current()!=\'\'">
    <dt>Phone</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntemail">
    <xsl:if test="current()!=\'\'">
    <dt>Email</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metstdn">
    <xsl:if test="current()!=\'\'">
    <dt>Metadata Standard Name</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metstdv">
    <xsl:if test="current()!=\'\'">
    <dt>Metadata Standard Version</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <dt>Title</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'alternative\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <dt>Alternative Title</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'uniform\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <dt>Uniform Title</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'translated\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <dt>Translated Title</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'abbreviated\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <dt>Abbreviated Title</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:identifier[not(@type)]">
    <xsl:if test="current()!=\'\'">
    <dt>Item ID</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:identifier[@type=\'accessionNumber\']">
    <xsl:if test="current()!=\'\'">
    <dt>Accession / RU</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:role[mods:roleTerm = \'Creator\']/../../mods:name/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <dt>Creator</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:role[mods:roleTerm = \'Contributor\']/../../mods:name/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <dt>Contributor</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:typeOfResource">
    <xsl:if test="current()!=\'\'">
    <dt>Type of Resource</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:genre">
    <xsl:if test="current()!=\'\'">
    <dt>Genre</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:abstract">
    <xsl:if test="current()!=\'\'">
    <dt>Description</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:dateOther[@type=\'range\' and not(@point)]">
    <xsl:if test="current()!=\'\'">
    <dt>Date Range</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:dateOther[@point=\'start\']">
    <xsl:if test="current()!=\'\'">
    <dt>Start Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:dateOther[@point=\'end\']">
    <xsl:if test="current()!=\'\'">
    <dt>End Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:dateOther/@qualifier">
    <xsl:if test="current()!=\'\'">
    <dt>Date Qualifier</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:location/mods:physicalLocation">
    <xsl:if test="current()!=\'\'">
    <dt>Location</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:shelfLocator">
    <xsl:if test="current()!=\'\'">
    <dt>Shelf Locator</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:url">
    <xsl:if test="current()!=\'\'">
    <dt>URL</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subLocation">
    <xsl:if test="current()!=\'\'">
    <dt>Sub Location</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:physicalDescription/mods:form">
    <xsl:if test="current()!=\'\'">
    <dt>Physical Description</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:recordInfo/mods:recordOrigin">
    <xsl:if test="current()!=\'\'">
    <dt>Record Creator</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:recordInfo/mods:recordContentSource">
    <xsl:if test="current()!=\'\'">
    <dt>Institute Creator</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:recordInfo/mods:recordCreationDate">
    <xsl:if test="current()!=\'\'">
    <dt>Creation Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:recordInfo/mods:recordChangeDate">
    <xsl:if test="current()!=\'\'">
    <dt>Change Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:accessCondition">
    <xsl:if test="current()!=\'\'">
    <dt>Access Condition</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:note">
    <xsl:if test="current()!=\'\'">
    <dt>Note</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:topic">
    <xsl:if test="current()!=\'\'">
    <dt>Topic</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:geographic">
    <xsl:if test="current()!=\'\'">
    <dt>Geographic Subject</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:continent">
    <xsl:if test="current()!=\'\'">
    <dt>Continent</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:country">
    <xsl:if test="current()!=\'\'">
    <dt>Country</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:province">
    <xsl:if test="current()!=\'\'">
    <dt>State</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:region">
    <xsl:if test="current()!=\'\'">
    <dt>Region</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:county">
    <xsl:if test="current()!=\'\'">
    <dt>County</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:city">
    <xsl:if test="current()!=\'\'">
    <dt>City</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:citySection">
    <xsl:if test="current()!=\'\'">
    <dt>City Section</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:cartographics/mods:coordinates">
    <xsl:if test="current()!=\'\'">
    <dt>Coordinates</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:name[@type=\'conference\']/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <dt>Expedition Name</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:name[@type=\'corporate\' and @displayLabel=\'Vessel\']/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <dt>Vessel Name</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:name[@type=\'corporate\' and @displayLabel=\'Organization\']/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <dt>Organization Name</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:name[@type=\'personal\']/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <dt>Person Name</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:relatedItem/mods:titleInfo/mods:title">
    <xsl:if test="current()!=\'\'">
    <dt>Related Collection Name</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:relatedItem/mods:identifier">
    <xsl:if test="current()!=\'\'">
    <dt>Related Collection ID</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:language/mods:languageTerm[@type=\'text\']">
    <xsl:if test="current()!=\'\'">
    <dt>Language</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:language/mods:scriptTerm[@type=\'text\']">
    <xsl:if test="current()!=\'\'">
    <dt>Script</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:nameEntry[@localType=\'primary\']/cpf:part">
    <xsl:if test="current()!=\'\'">
    <dt>Project Name (Full)</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:nameEntry[@localType=\'abbreviation\']/cpf:part">
    <xsl:if test="current()!=\'\'">
    <dt>Project Name (Abbreviation)</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:function/cpf:descriptiveNote/cpf:p">
    <xsl:if test="current()!=\'\'">
    <dt>Project Data Access and Use Constraints</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:existDates/cpf:dateRange/cpf:fromDate">
    <xsl:if test="current()!=\'\'">
    <dt>Begin Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:existDates/cpf:dateRange/cpf:toDate">
    <xsl:if test="current()!=\'\'">
    <dt>End Date</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:place/cpf:placeEntry[@localType=\'address\']">
    <xsl:if test="current()!=\'\'">
    <dt>Project Location</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:place/cpf:placeEntry[@localType=\'region\']">
    <xsl:if test="current()!=\'\'">
    <dt>Region</dt><dd><xsl:value-of select="current()"/></dd>
        </xsl:if>
    </xsl:for-each>








  </dl>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet> 
';
}

/**
 * Query for fetching the Child Resources given what type of data they disseminate.
 *
 * @param string $pid
 *   The object to query for.
 * @param string array $resource_types
 *   The types of resource to look for, defined as a list of content models, if empty all resources will be returned.
 * @param string $search
 *   A string to search for the title
 * @param string $sort
 *   The sort to apply to the resources label either ('' for ascending or 'DESC' for descending).
 * @param string $sort_by
 *   The sort by option choose from ('created' - the default, 'title', 'model', or 'object') 
 * @param int $limit
 *   The number of results to limit this query to.
 * @param int $offset
 *   The offset into the number of results to truncate from the results.
 *
 * @return string
 *   A sparql query string
 */
function sidora_generate_child_resource_sparql_query($pid, array $resource_types, $search = '', $sort = '', $sort_by = 'created', $limit = NULL, $offset = NULL) {
  $limit_types = '';
  if (!empty($resource_types)) {
    $limit_type_expression = function($o) {
      return "sameTerm(?model, <info:fedora/$o>)";
    };
    $limit_types = array_map($limit_type_expression, $resource_types);
    $limit_types = implode(' || ', $limit_types);
    $limit_types = "({$limit_types}) && ";
  }
  $limit = isset($limit) ? " $limit" : '1000000';
  $offset = isset($offset) ? " $offset" : '0';
  $search_filter = '';
  if (isset($search) && $search != '') {
    $search_filter =  "                FILTER(regex(?title, '{$search}', 'i'))";
  }

      $query = "select ?object ?title ?model ?created from <#ri> where {
          <info:fedora/{$pid}> <fedora-rels-ext:hasResource> ?object .
          ?object <fedora-model:state> <fedora-model:Active>;
          <fedora-model:label> ?title;
          <fedora-model:hasModel> ?model;
                <fedora-model:createdDate> ?created;
          ".$search_filter."
          FILTER(
          ".$limit_types."
              !sameTerm(?model, <info:fedora/fedora-system:FedoraObject-3.0>) &&
              !sameTerm(?model, <info:fedora/si:resourceCModel>))
        }
                ORDER BY {$sort}(?{$sort_by})
        OFFSET {$offset}
        LIMIT {$limit}";
  return $query;
}
// All functions below this line are direct copies from exhibition.  If you change them, rename it and move above this line
// ***********************************************************
// ***********************************************************
// ***********************************************************
// ***********************************************************
// ***********************************************************
// ***********************************************************
/**
 * Query for fetching the Child Resources given what type of data they disseminate.
 *
 * @param string $pid
 *   The object to query for.
 * @param string $resource_types
 *   The types of resource to look for, defined as a list of content models, if empty all resources will be returned.
 * @param string $sort
 *   The sort to apply to the resources label either ('asc', 'desc').
 * @param int $limit
 *   The number of results to limit this query to.
 * @param int $offset
 *   The offset into the number of results to truncate from the results.
 *
 * @return string
 *   An itql query string
 */
function wb_si_exhibition_generate_child_resource_query($pid, array $resource_types, $sort = 'asc', $limit = NULL, $offset = NULL) {
  $limit_types = '';
  if (!empty($resource_types)) {
    $limit_type_expression = function($o) {
      return "\$m <mulgara:is> <info:fedora/$o>";
    };
    $limit_types = array_map($limit_type_expression, $resource_types);
    $limit_types = implode(' or ', $limit_types);
    $limit_types = "({$limit_types}) and";
  }
  $limit = isset($limit) ? "limit $limit" : '';
  $offset = isset($offset) ? "offset $offset" : '';
  return 'select $o $t $m from <#ri> where
    $o <fedora-model:state> <fedora-model:Active> and
    $o <fedora-model:label> $t and
    <info:fedora/' . $pid . '> <fedora-rels-ext:hasResource> $o and
    ' . $limit_types . '
    $o <fedora-model:hasModel> $m
    minus $m <mulgara:is> <info:fedora/si:resourceCModel>
    minus $m <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
    order by $t ' . $sort . '
    ' . $limit . '
    ' . $offset;
}

function wb_si_exhibition_generate_child_concept_query($pid) {
  $count = 'count(select $c from <#ri> where
    $o <fedora-rels-ext:hasConcept> $c and
    $c <fedora-model:state> <fedora-model:Active>)';
  return 'select $o $t ' . $count . ' from <#ri> where
     $o <fedora-model:state> <fedora-model:Active> and
     $o <fedora-model:label> $t and
     <info:fedora/' . $pid . '> <fedora-rels-ext:hasConcept> $o
     order by $t';
}
function wb_si_exhibition_xsl_string_default(){
  return '<?xml version="1.0" encoding="UTF-8"?>

<xsl:stylesheet version="1.0" 
xmlns:xsl="http://www.w3.org/1999/XSL/Transform" 
xmlns:mods="http://www.loc.gov/mods/v3" 
xmlns:fits="http://hul.harvard.edu/ois/xml/ns/fits/fits_output" 
xmlns:cpf="urn:isbn:1-931666-33-4" 
>

<xsl:template match="/">
  <html>
  <body>
  <table class="metadata-table">
      <tbody>
      <xsl:for-each select="xml_root/debug">
    <tr>
      <td>Debug</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:for-each>
    <xsl:for-each select="//mods:abstract">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Description</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:subject/mods:topic">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Topic</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:subject/mods:geographic">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Geographic</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:name">
      <xsl:for-each select="mods:namePart">
        <xsl:if test="current()!=\'\'">
        <tr>
          <td>Name</td>
          <td><xsl:value-of select="current()"/></td>
        </tr>
        </xsl:if>
      </xsl:for-each>
      <xsl:for-each select="mods:role/mods:roleTerm">
        <xsl:if test="current()!=\'\'">
        <tr>
          <td>Role</td>
          <td><xsl:value-of select="current()"/></td>
        </tr>
        </xsl:if>
      </xsl:for-each>
    </xsl:for-each>
 <xsl:for-each select="//mods:identifier">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Identifier</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:genre">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Genre</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:note[not(@*)]">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Note</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:originInfo/mods:dateCaptured">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Date Captured</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:physicalLocation">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Physical Location</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
 <xsl:for-each select="//mods:copyInformation/mods:subLocation">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Sub Location</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//fits:fileinfo/fits:created[@toolname=\'Exiftool\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Image Capture Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//citeinfo/title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Site Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//citeinfo/othercit">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Deployment ID</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//citeinfo/origin">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Originator</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//citeinfo/geoform">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Format of Geospatial Data</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//descript/abstract">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Deployment Note</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//descript/supplinf">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Purposed Lat and Long</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/latres">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Actual Latitude</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/longres">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Actual Longitude</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//dataqual/lineage/procstep[procdesc=\'Proposed Camera Deployment Begin Date\']/procdate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Proposed Camera Deployment Begin Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//dataqual/lineage/procstep[procdesc=\'Proposed Camera Deployment End Date\']/procdate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Proposed Camera Deployment End Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//timeinfo/rngdates/begdate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Deployment Begin Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//timeinfo/rngdates/enddate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Deployment End Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Camera ID\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera ID</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Image Resolution Setting\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Image Resolution Setting</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Detection Distance\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Detection Distance</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Sensitivity Setting\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Sensitivity Setting</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Quiet Period Setting\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Quiet Period Setting</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Camera Height\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Height</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//detailed/attr[attrlabl=\'Habitat Type\']/attrdomv/edom/edomv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Habitat Type</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//theme/themekey">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Theme Keyword</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//place/placekey">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Place Keyword</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//keywtax/taxonkey">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Taxonomic Keyword</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//taxoncl/taxonrn">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Taxonomic Rank Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//taxoncl/taxonrv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Taxonomic Rank Value</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//idinfo/accconst">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Access Constraints</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//idinfo/useconst">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Use Constraints</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//idinfo/datacred">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Data Set Credit</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//dataqual/complete">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Camera Failure Details</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//method[methtype=\'Bait\']/methodid/methkey">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Bait Type</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//method[methtype=\'Bait\']/methdesc">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Bait Methodology</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//method[methtype=\'feature\']/methodid/methkey">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Feature</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//method[methtype=\'feature\']/methodid/methdesc">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Feature Description</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/latres">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Actual Latitude</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/longres">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Actual Longitude</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/horizsys/geograph/geogunit">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Geographic Coordinate Units</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/vertdef/altsys/altdatum">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Altitude Datum Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/vertdef/altsys/altres">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Elevation</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/vertdef/altsys/altunits">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Altitude Distace Units</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//spref/vertdef/altsys/altenc">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Altitude Encoding Method</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metd">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Metadata Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metrd">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Metadata Review Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metfrd">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Metadata Future Review Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntperp/cntper">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Contact Person</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntperp/cntorg">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Organization Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntaddr/address">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Address</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntaddr/city">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>City</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntaddr/state">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>State</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntaddr/postal">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Postal Code</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntvoice">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Phone</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metc/cntinfo/cntemail">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Email</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metstdn">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Metadata Standard Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//metainfo/metstdv">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Metadata Standard Version</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Title</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'alternative\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Alternative Title</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'uniform\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Uniform Title</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'translated\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Translated Title</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:titleInfo[@type=\'abbreviated\']/mods:title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Abbreviated Title</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:identifier[not(@type)]">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Item ID</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:identifier[@type=\'accessionNumber\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Accession / RU</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:role[mods:roleTerm = \'Creator\']/../../mods:name/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Creator</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:role[mods:roleTerm = \'Contributor\']/../../mods:name/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Contributor</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:typeOfResource">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Type of Resource</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:genre">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Genre</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:mods/mods:abstract">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Description</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:dateOther[@type=\'range\' and not(@point)]">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Date Range</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:dateOther[@point=\'start\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Start Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:dateOther[@point=\'end\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>End Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:dateOther/@qualifier">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Date Qualifier</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:location/mods:physicalLocation">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Location</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:shelfLocator">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Shelf Locator</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:url">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>URL</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subLocation">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Sub Location</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:physicalDescription/mods:form">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Physical Description</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:recordInfo/mods:recordOrigin">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Record Creator</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:recordInfo/mods:recordContentSource">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Institute Creator</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:recordInfo/mods:recordCreationDate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Creation Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:recordInfo/mods:recordChangeDate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Change Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:accessCondition">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Access Condition</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:note">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Note</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:topic">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Topic</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:geographic">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Geographic Subject</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:continent">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Continent</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:country">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Country</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:province">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>State</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:region">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Region</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:county">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>County</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:city">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>City</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:hierarchicalGeographic/mods:citySection">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>City Section</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:cartographics/mods:coordinates">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Coordinates</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:name[@type=\'conference\']/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Expedition Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:name[@type=\'corporate\' and @displayLabel=\'Vessel\']/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Vessel Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:name[@type=\'corporate\' and @displayLabel=\'Organization\']/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Organization Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:subject/mods:name[@type=\'personal\']/mods:namePart">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Person Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:relatedItem/mods:titleInfo/mods:title">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Related Collection Name</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:relatedItem/mods:identifier">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Related Collection ID</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:language/mods:languageTerm[@type=\'text\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Language</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//mods:language/mods:scriptTerm[@type=\'text\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Script</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:nameEntry[@localType=\'primary\']/cpf:part">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Project Name (Full)</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:nameEntry[@localType=\'abbreviation\']/cpf:part">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Project Name (Abbreviation)</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:function/cpf:descriptiveNote/cpf:p">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Project Data Access and Use Constraints</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:existDates/cpf:dateRange/cpf:fromDate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Begin Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:existDates/cpf:dateRange/cpf:toDate">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>End Date</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:place/cpf:placeEntry[@localType=\'address\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Project Location</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="//cpf:place/cpf:placeEntry[@localType=\'region\']">
    <xsl:if test="current()!=\'\'">
    <tr>
      <td>Region</td>
      <td><xsl:value-of select="current()"/></td>
    </tr>
    </xsl:if>
    </xsl:for-each>








   </tbody>
  </table>
  </body>
  </html>
</xsl:template>

</xsl:stylesheet> 
';
}


function sidora_startsWith($haystack, $needle) {
    // search backwards starting from haystack length characters from the end
    return $needle === "" || strrpos($haystack, $needle, -strlen($haystack)) !== FALSE;
}
function sidora_endsWith($haystack, $needle) {
    // search forward starting from end minus needle length characters
    return $needle === "" || strpos($haystack, $needle, strlen($haystack) - strlen($needle)) !== FALSE;
}
function sidora_remove_xsl($param1, $param2, $param3){
 // error_log("in the sidora remove xsl function for ".$param1,3,DRUPAL_ROOT.'/'.drupal_get_path('module','sidora')."/errorlog.txt");
    $curr_item = array();
    if (sidora_endsWith(strtolower($param1),'.xsl')){
      $directory_to_list_for_xsl = DRUPAL_ROOT.'/'.drupal_get_path('module','sidora').'/XSL/';
			if (file_exists($directory_to_list_for_xsl.$param1)){
        $rename_worked = rename(DRUPAL_ROOT.'/'.drupal_get_path('module','sidora').'/XSL/'.$param1,$directory_to_list_for_xsl.'backups/'.'Deleted_on_'.date('Ymd_His').'_'.$param1);
        $curr_item['existing_moved'] = $rename_worked;
        $curr_item['description'] = t('Attempted file write');
        $curr_item['success'] = $rename_worked;
     }else{
       $curr_item['success'] = FALSE;
       $curr_item['description'] = t('XSL File not found');
    }
    }else{
       $curr_item['success'] = FALSE;
       $curr_item['description'] = t('Wrong file extension for xsl delete');
    }
		$return_when_encoded['files'][] = $curr_item;
    print json_encode($return_when_encoded);
    exit();
}
