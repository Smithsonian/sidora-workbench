<?php
/*
 * Copyright 2015 Smithsonian Institution.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.You may obtain a copy of
 * the License at: http://www.apache.org/licenses/
 *
 * This software and accompanying documentation is supplied without
 * warranty of any kind. The copyright holder and the Smithsonian Institution:
 * (1) expressly disclaim any warranties, express or implied, including but not
 * limited to any implied warranties of merchantability, fitness for a
 * particular purpose, title or non-infringement; (2) do not assume any legal
 * liability or responsibility for the accuracy, completeness, or usefulness of
 * the software; (3) do not represent that use of the software would not
 * infringe privately owned rights; (4) do not warrant that the software
 * is error-free or will be maintained, supported, updated or enhanced;
 * (5) will not be liable for any indirect, incidental, consequential special
 * or punitive damages of any kind or nature, including but not limited to lost
 * profits or loss of data, on any basis arising from contract, tort or
 * otherwise, even if any of the parties has been warned of the possibility of
 * such loss or damage.
 *
 *
 * This distribution includes several third-party libraries, each with their own
 * license terms. For a complete copy of all copyright and license terms, including
 * those of third-party libraries, please see the product release notes.
 */
/*
 * hook menu
 */
function exhibition_config_menu(){
  $items['admin/exhibition_config/configure'] = array(
      'title' => 'Exhibition Configuration',
      'description' => 'Configure the Exhibition Configuration Module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('exhibition_config_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'exhibition_config.admin.inc',
      'type' => MENU_NORMAL_ITEM,
  );
  $items['exhibition_config/config'] = array(
    'title' => t('Exhibition Configuration for Individual Fedora Concept'),
    'page callback' => 'exhibition_config_main_form',
    'page arguments' => array(2),
    'access callback' => 'user_is_logged_in',
    'description' => t('Allows configuration for the exhibition display for the Fedora Concept'),
    'type' => MENU_CALLBACK,
  );
  $items['exhibition_config/visibility'] = array(
    'title' => t('Exhibition Visibility Settings for Individual Fedora Concept'),
    'page callback' => 'exhibition_permission_main_form',
    'page arguments' => array(2),
    'access arguments' => array('access content'),
    'description' => t('Allows visibility configuration for the exhibition display for the Fedora Concept'),
    'type' => MENU_CALLBACK,
  );
  $items['exhibition_config/info/custom_url'] = array(
    'title' => t('JSON data'),
    'page callback' => 'exhibition_config_custom_url',
    'page arguments' => array(3),
    'access callback' => TRUE, 
    'description' => t('Delivers the actual URL from the custom url'),
    'type' => MENU_CALLBACK,
  );
  $items['exhibition_config/info'] = array(
    'title' => t('JSON data'),
    'page callback' => 'exhibition_config_json_data',
    'page arguments' => array(2),
    'access callback' => TRUE, 
    'description' => t('JSON data'),
    'type' => MENU_CALLBACK,
  );
  $items['exhibition_config/json_visibility'] = array(
    'title' => t('JSON data'),
    'page callback' => 'exhibition_config_json_visibility',
    'page arguments' => array(2),
    'access callback' => TRUE, 
    'description' => t('JSON Visibility data'),
    'type' => MENU_CALLBACK,
  );
  $items['exhibition_config/preview_warning'] = array(
    'title' => t('Visibility Settings Info'),
    'page callback' => 'exhibition_config_info',
    'access callback' => TRUE,
    'description' => t('Visibility Preview Warning'),
    'type' => MENU_CALLBACK,
  );	
  $items['admin/exhibition_config/delete'] = array(
    'title' => t('Exhibition Deletion'),
    'page callback' => 'exhibition_config_delete',
    'access arguments' => array('administer site configuration'),
    'description' => t('Exhibition Delete'),
    'type' => MENU_CALLBACK,
  );	
  return $items;
}
/*
 * Returns an array of exhibition information for the input user (or all users if empty string
 * The array has elements which are arrays of the form:
 *  'pid' => pid
 *  'label' => label
 *  'custom_url' => custom url
 *  'is_available' => 0 if not available to public, 1 if available
 */
function exhibition_config_get_exhibition_pids_for_user($user_id){
  require_once ( dirname(__FILE__) . '/exhibition_config.util.inc');
  $repo = si_exhibition_get_repo();

  $exhibition_pids = array();
  $result = db_query("select pid, last_edited, last_published, is_available from {exhibition_config}");
  foreach ($result as $records){
    $pid_to_test = $records->pid;
    $curr_label = '';
    try{
      $exist = si_exhibition_check_object_info_accessible(array('pid' => $pid_to_test));
      if ($exist){
        $object = $repo->getObject($pid_to_test); 
        $curr_label = $object->label;
        $last_saved = unserialize($records->last_edited);
				$to_add = array('pid'=>$pid_to_test, 'label'=>$curr_label, 'custom_url'=>$last_saved['custom_url'], 'is_available'=>(!(is_null($records->last_published)) && ($records->last_published != ''))? '1' : $records->is_available);
        if (strtolower($object->owner) == strtolower($user_id) || $user_id === '') $exhibition_pids[] = $to_add;
      }
    }catch(Exception $hce){
      dsm('exception trying to get:'.$pid_to_test);
    }

  }
  return $exhibition_pids;
}
/*
 * Returns an html table with a line for each exhibition owned by the user
 */
function exhibition_config_get_exhibition_html_table_for_user($user_name){
  global $user;
  $enable_deletes = in_array('administrator', array_values($user->roles)); 
  drupal_add_library('system', 'ui.dialog');
  $epids = exhibition_config_get_exhibition_pids_for_user($user_name);
  $epid_html = '<table>';
  $epid_html .= '<tr>';
  $epid_html .= '<th>ID</th><th>Label</th><th>Configure</th><th>Public</th><th>Link</th><th>Friendly Link</th>';
  if ($enable_deletes) {
    $epid_html .= '<th>Delete</th>';
  }
  $epid_html .= '</tr>';
  foreach($epids as $epid){
    $epid_html .= '<tr>';
    $epid_html .= '<td>'.$epid['pid'].'</td>';
    $epid_html .= '<td><a target="_blank" href="">'.$epid['label'].'</a></td>';
    $epid_html .= '<td><a target="_blank" href ="'.base_path().'exhibition_config/config/'.$epid['pid'].'">Configure</a></td>';
    $epid_html .= '<td>';
    if ($epid['is_available']) $epid_html .= 'Shared';
    else $epid_html .= 'Not Shared';
    $epid_html .= '</td>';
    $epid_html .= '<td><a target="_blank" href ="'.variable_get('si_exhibition_website_location', '').''.$epid['pid'].'">'.variable_get('si_exhibition_website_location', '').$epid['pid'].'</a></td>';
    if ($epid['custom_url']){
      $epid_html .= '<td><a target="_blank" href ="'.
                  variable_get('si_exhibition_friendly_website_location', '').
                  $epid['custom_url'].'">'.
                  variable_get('si_exhibition_friendly_website_location', '').
                  $epid['custom_url'].'</a></td>';
    }else{
      $epid_html .= '<td>None set</td>';
    }
    if ($enable_deletes) {
      $epid_html .= '<td>
<input class="form-submit" value="Delete" style="width:48px" onclick="exhibitionDeleteConfirm(\''.$epid['pid'].'\', \'' . $epid['label'] . '\');"/>
    </td>';
    }
    $epid_html .= '</tr>';
  }
  $epid_html .= '</table>';
  if ($enable_deletes) {
    $epid_html .= '<script>
window.exhibitionDeleteConfirm = function(pid, label){
jQuery("#deleteExhibitionDialog").remove();
var deletionWarning = "Are you sure you want to delete this exhibition: <br/><br/>"+pid+" <br/>"+label+"";
jQuery("body").append("<div id=\'deleteExhibitionDialog\' style=\'display:none;\' title=\'Delete Exhibition\'><p>"+deletionWarning+"</p></div>");
    jQuery("#deleteExhibitionDialog").dialog({
      resizable: false,
      height:250,
      width: 400,
      modal: true,
      buttons: {
        "Delete": function() {
          jQuery.ajax({
            url: Drupal.settings.basePath + "admin/exhibition_config/delete/"+pid,
            success : function (checkFeedback) {
              try{
                checkItem = jQuery.parseJSON(checkFeedback);
                jQuery("#deleteExhibitionDialogConfirmed").remove();
                if (checkItem.error) {
                  jQuery("body").append("<div id=\'deleteExhibitionDialogConfirmed\' style=\'display:none\' title=\'Deletion Complete with Error\'><p>Errors:"+checkItem.error+"<br/>Deleted:"+checkItem.num_deleted+"</p></div>");
                  jQuery("#deleteExhibitionDialogConfirmed").dialog({ modal:true }).on(\'dialogclose\',function(event){ });
                } else if (checkItem.num_deleted === 0) {
                  jQuery("body").append("<div id=\'deleteExhibitionDialogConfirmed\' style=\'display:none\' title=\'Deletion Complete\'><p>Pid not found, deleted:"+checkItem.num_deleted+"</p></div>");
                  jQuery("#deleteExhibitionDialogConfirmed").dialog({ modal:true }).on(\'dialogclose\',function(event){ });
                } else {
                  jQuery("body").append("<div id=\'deleteExhibitionDialogConfirmed\' style=\'display:none\' title=\'Deletion Complete\'><p>Deleted:"+checkItem.num_deleted+"<br/>Window will reload on close</p></div>");
                  jQuery("#deleteExhibitionDialogConfirmed").dialog({ modal:true }).on(\'dialogclose\',function(event){ window.location.reload(); });
                }
              } catch (err) {
                jQuery("#deleteExhibitionDialogError").remove();
                var dNode = document.createElement(\'div\');
                dNode.textContent = checkFeedback;
                jQuery("body").append("<div id=\'deleteExhibitionDialogError\' style=\'display:none\' title=\'Error on Deletion\'></div>");
                jQuery("#deleteExhibitionDialogError").append(dNode);
                jQuery("#deleteExhibitionDialogError").dialog({width:800});
              }
              console.log(checkFeedback);
            }
          })
        },
        "Close": function() {
          jQuery( "#deleteExhibitionDialog" ).dialog( "close" );
        }
      }
    });
};
</script>
';
  }
  return $epid_html;
}
/*
 * hook_user_view
 * Adds the table of the exhibitions they own to their user page
 */
function exhibition_config_user_view($account, $view_mode, $langcode){
  global $user;
  $is_logged_in_as_admin = FALSE;
  module_load_include('inc', 'sidora', 'includes/utils');
  $account_data = ($account->data);

  $codebook_pid = '';
  $codebook_html = '';
  $user_pid = sidora_get_user_object($account);
  $members = array();
  if ($user_pid) {
    //$epid_html = exhibition_config_get_exhibition_html_table_for_user($user->name);
    $epid_html = exhibition_config_get_exhibition_html_table_for_user($account->name);
    $account->content[] = array(//['Wexhibition_config_pids'] = array(
      '#title' => 'Exhibitions',
      '#markup' => $epid_html,
      '#type' => 'user_profile_item',
    );
  }
}
/*
 * Pulls all info from the database for this pid
 */
function exhibition_config_get_config_data($pid){
  $result = db_query("Select". //SELECT
" pid, last_edited, last_published" .
" FROM {exhibition_config} where pid = :pid", array(':pid'=>$pid));
  $row = array();
  foreach ($result as $input){
    foreach($input as $name=>$value){
      $row[$name] = $value;
    }
  }
  return $row;
}

function exhibition_config_load_last_published($pid){
  $result = db_query("Select ". //SELECT
" last_published "   .
" FROM {exhibition_config} where pid = :pid", array(':pid'=>$pid));
  $row = array();
  foreach ($result as $input){
    foreach($input as $name=>$value){
      $row[$name] = $value;
    }
  }
  return (isset($row['last_published'])?$row['last_published']:'');
}
/*
 * Returns nothing, does an exit
 * prints out each pid that has the input custom_url, should only be one if input configuration checked properly
 */
function exhibition_config_custom_url($custom_url){
  $result = db_query("Select pid, last_edited FROM {exhibition_config} where last_edited like :custom_url", array(':custom_url'=> '%' . $custom_url . '%'));
  $row = null;
  foreach ($result as $row){
    $last_saved = unserialize($row->last_edited);
		if ($last_saved['custom_url'] == $custom_url) print($row->pid);
  }
  exit();
}
/*
 * Returns nothing, does not perform exit, but prints to output
 * prints a JSON object of the configuration for this pid
 */
function exhibition_config_json_data($pid){
  //if (!empty($_GET['BBB'])) return exhibition_config_json_visibility($pid);
  $pid = urldecode($pid);
  $row = exhibition_config_get_config_data($pid);
  if (!empty($row)) {
    if (is_null($row['pid'])){
      print '{ "error": true, "error_message" : "Exhibition not available" }';
    } else if ($row['last_published'] != ''){
      $row = unserialize($row['last_published']);
			$row['pid'] = $pid;
			$my_css = $row['css_script'];
      $links = $row['link_bar_links'];
      print '
{
      "error": false,
      "pid":'.json_encode($row['pid']).',
      "logo":'.json_encode($row['logo']).',
      "logo_width":'.json_encode($row['logo_width']).',
      "logo_height":'.json_encode($row['logo_height']).',
      "title":'.json_encode($row['title']).',
      "extra_css":'.json_encode($my_css['actual']).',
      "seu_h":'.json_encode($row['header_html']).',
      "seu_f":'.json_encode($row['footer_html']).',
      "seu_pre":'.json_encode($row['precontent_html']).',
      "seu_post":'.json_encode($row['postcontent_html']).',
      "seu_sf":'.json_encode($row['sidebar_left_html']).',
      "seu_sl":'.json_encode($row['sidebar_right_html']).',
      "nav_location":'.json_encode($row['nav_location']).',
      "nav_type":'.json_encode($row['nav_type']).',
      "custom_url":'.json_encode($row['custom_url']).',
      "xslt":'.json_encode($row['xslt']).',
			"links":[';
      for($currLinkNum = 0; $currLinkNum < count($links['names']); $currLinkNum++){
        print '
        { "name":'.json_encode($links['names'][$currLinkNum]).',"link":'.json_encode($links['urls'][$currLinkNum]).'}';
        if ($currLinkNum < count($links['names'])-1){
          print ',';
        }else{
          print "\n";
        }
      }
      print ']

}';
    }else{
      //not set to publicly viewable, is in DB
      print '{ "error": true, "error_message" : "Exhibition for this item not available" }';
    }
  }else{
    print '{ "error": true, "error_message" : "database problem" }';
  }
}
/*
 * helper function to give easy PHP startsWith
 */
function startsWith($haystack, $needle)
{
    return $needle === "" || strpos($haystack, $needle) === 0;
}
/*
 * Validates the exhibition_config_form
 */
function exhibition_config_form_validate($form, &$form_state){
    $pid = $form['pid']['#value'];
    $check_url =  $form['custom_url']['#value'];
    if (!empty($check_url)){
     $url_in_use_result = db_query("select pid, last_edited from {exhibition_config} where pid <> :pid and last_edited like :cus_url", 
        array(
          ':pid' => $pid, 
          ':cus_url' => '%' . $form['custom_url']['#value'] . '%',
        )
      );
      $first_hit = $url_in_use_result->fetchAssoc();
      if (!empty($first_hit)){
        $unserialized_first_hit = unserialize($first_hit['last_edited']);
	if ($unserialized_first_hit['custom_url'] == $form['custom_url']['#value']) form_set_error('custom_url',t('Custom URL already in use.'));
      }
      $stripped = preg_replace("/[^A-Za-z0-9]/", "", $check_url );
      if ($stripped != $check_url){
        form_set_error('custom_url',t('Custom URL must be alphanumeric, no symbols or spaces.'));
      }
    }
    $lh = $form['top']['logo_height']['#value'];
    if (!empty($lh)){
       if (!filter_var($lh, FILTER_VALIDATE_INT)){
         form_set_error("top']['logo_height",t('Logo Height must be positive integer, zero, or blank.  Zero and blank leave the default size of the image.'));
       }
    }
    $lw = $form['top']['logo_width']['#value'];
    if (!empty($lw)){
       if (!filter_var($lw, FILTER_VALIDATE_INT)){
         form_set_error("top']['logo_width",t('Logo Width must be positive integer, zero, or blank.  Zero and blank leave the default size of the image.'));
       }
    }
    //The new links are not located in the form, pull them from the POST data
    $link_names = $_POST['link_name'];
    $link_urls = $_POST['link_url'];
    foreach ($link_names as $currLinkNum => $link_name){
      $link_url = $link_urls[$currLinkNum];
      if (strpos($link_url, "://") === FALSE && !empty($link_url)){
        $link_url = 'http://' . $link_url;
        $_POST['link_url'][$currLinkNum] = $link_url;
      }
      $curr_link_url = filter_var($link_url, FILTER_VALIDATE_URL, FILTER_SANITIZE_STRING);
      if ($link_url && $curr_link_url != $link_url){
        form_set_error("top']['new_links",t('Invalid new link URL submitted.'));
      }
      $curr_link_name = filter_var($link_name, FILTER_SANITIZE_STRING);
      if ($link_name && $curr_link_name != $link_name){
        form_set_error("top']['new_links",t('Invalid new link name submitted.'));
      }
      if (!empty($link_name) && empty($link_url)){
        form_set_error("top']['new_links",t('Must set a URL when submitting a link name.'));
      }
      /* Removing the title is removing the link...
      if (empty($link_name) && !empty($link_url)){
        form_set_error("top']['new_links",t('Must set a link name when submitting a URL.'));
      }
      */
    }

    if (isset($_FILES['files']['name']['xslt_upload'])){
       $dir = dirname(__FILE__) . '/files/';
       $dir = drupal_tempnam($dir,'');
       $name = $_FILES['files']['name']['xslt_upload'];
       $size = $_FILES['files']['size']['xslt_upload'];
       $type = $_FILES['files']['type']['xslt_upload'];
       if (!empty($name)){
         $file = file_save_upload('xslt_upload', array('file_validate_extensions' => array('xsl xslt')), 'public://');
         if($file){
	   $form_state['values']['xslt_upload'] = $file;
         }else{
           form_set_error('XSLT for the exhibition',t('Could not save uploaded XSLT file. Only XSL and XSLT files are accepted'));
         }
       }
    }
    if (isset($_FILES['files']['name']['logo_upload'])){
       $dir = dirname(__FILE__) . '/files/';
       $dir = drupal_tempnam($dir,'');
       $name = $_FILES['files']['name']['logo_upload'];
       $size = $_FILES['files']['size']['logo_upload'];
       $type = $_FILES['files']['type']['logo_upload'];
       if (!empty($name)){
         $file = file_save_upload('logo_upload', array('file_validate_is_image' => array(),'file_validate_extensions' => array('png gif jpg jpeg tiff'),), 'public://');
         if($file){
            $form_state['values']['logo_upload'] = $file;
         }else{
           form_set_error('Logo for the exhibition',t("Could not save upload: $name"));
         }
       }
    }
}
/*
 * hook_form_submit for exhibition_config
 */
function exhibition_config_form_submit($form, &$form_state) {
    $pid = $form['pid']['#value'];
    $allowed = exhibition_config_allowed_to_edit($pid);
    if (!$allowed){
      drupal_set_message(t('Your user is not allowed to change the configuration of this object.  To change the configuration, the object must be viewable in Fedora by your user, and you must either be the owner of the object or have the "Exhibition Configuration Administrator" role.'), 'error');
      return;
    }
    if (!empty($form_state['values']['logo_upload'])){
     $form['top']['logo']['#value'] = file_create_url($form_state['values']['logo_upload']->destination);
     $form_state['values']['logo_upload']->status = FILE_STATUS_PERMANENT;
     file_save($form_state['values']['logo_upload']);
    }

    if (!empty($form_state['values']['xslt_upload'])){
      $xslt_to_use = $form_state['values']['xslt_upload'];
      $form['xslt']['existing_xslt']['#value'] = drupal_realpath('public://') . '/' . $xslt_to_use->filename;
      $xslt_to_use->status = FILE_STATUS_PERMANENT;
      file_save($xslt_to_use);
    }	
    if (($form['xslt']['existing_xslt']['#value'] == 'none') || ($form['xslt']['existing_xslt']['#value'] == 'direct')) {
     $form['xslt']['existing_xslt']['#value'] = '';
    }	
    $my_css = array();
    foreach($form['colors'] as $ffname => $formField){
      if (startsWith($ffname, 'color-') || startsWith($ffname,'font')){
        $my_css[$ffname] = $formField['#value'];
      }
    }
    $my_css['actual'] = $form['css']['#value'];
    $css_serialized = $my_css;
    $check_url =  $form['custom_url']['#value'];
    if (!empty($check_url)){
      $url_in_use_result = db_query("select pid, last_edited from {exhibition_config} where pid <> :pid and last_edited like :cus_url", 
        array(
          ':pid' => $pid, 
          ':cus_url' => '%' . $form['custom_url']['#value'] . '%',
        )
      );
      $first_hit = $url_in_use_result->fetchAssoc();
      if (!empty($first_hit)){
        $unserialized_first_hit = unserialize($first_hit['last_edited']);
	if ($unserialized_first_hit['custom_url'] == $form['custom_url']['#value']){ 
	 drupal_set_message('Custom URL already in use, all other information saved.', 'warning');
         $form['custom_url']['#value'] = '';
	} 
      }
    }
    
    //The new links are not located in the form, pull them from the POST data
    $link_names_orig = $_POST['link_name'];
    $link_urls_orig = $_POST['link_url'];
    //Reorder them as indicated by the weight
    $weights = '';
    if (!empty($_POST['weight'])) $weights = $_POST['weight'];
    $link_names = array();
    $link_urls = array();
    if ($weights){
      asort($weights);
      foreach($weights as $index => $weight){
        $link_names[] = $link_names_orig[$index];
        $link_urls[] = $link_urls_orig[$index];
      }
      for ($leftover = count($weights); $leftover < count($link_names_orig); $leftover++){
        $link_names[] = $link_names_orig[$leftover];
        $link_urls[] = $link_urls_orig[$leftover];
      }
    }else{
      $link_names = $link_names_orig;
      $link_urls = $link_urls_orig;
    }
    if (empty($link_names)) $link_names = array();
    if (empty($link_urls)) $link_urls = array();
    //Remove the items if user cleared it out
    foreach ($link_names as $currLinkNum => $unused){
      if ($link_names[$currLinkNum] == ''){
        //Clearing link title is removing link, don't put into array
        unset($link_names[$currLinkNum]);
        unset($link_urls[$currLinkNum]);
      }
    }
    $link_names = array_values($link_names); //Remove empty slots if any were there
    $link_urls = array_values($link_urls);

    $fullLinkSet = array('names'=>$link_names, 'urls'=>$link_urls);  //validate already said these were okay
    $fls_serialized = $fullLinkSet;
    $existing_visibility_obj = exhibition_config_load_visibility($pid); 
    if ($form['publish_status']['#value'] != '1'){
      $last_published_config = exhibition_config_load_last_published($pid);
    } 
    $delete_result = db_delete("{exhibition_config}")->condition('pid', $pid)->execute();
	$last_edited_values = array(
        'logo' => $form['top']['logo']['#value'],
        'logo_width' => $form['top']['logo_width']['#value'],
        'logo_height' => $form['top']['logo_height']['#value'],
        'title' => $form['top']['title']['#value'],
        'header_html' => $form['top']['header']['value']['#value'],
        'css_script' => $my_css,
        'footer_html' => $form['bottom']['footer']['value']['#value'],
        'precontent_html' => $form['content_area']['precontent']['value']['#value'],
        'postcontent_html' => $form['content_area']['postcontent']['value']['#value'],
        'sidebar_left_html' => $form['content_area']['sidebar_left']['value']['#value'],
        'sidebar_right_html' => $form['content_area']['sidebar_right']['value']['#value'],
        'nav_location' => $form['content_area']['nav_location']['#value'],
        'nav_type' => $form['content_area']['nav_type']['#value'],
        'custom_url' => $form['custom_url']['#value'],
        'link_bar_links' => $fullLinkSet,
        'use_parent_config' => empty($form['use_parent_config']['#value'])?'0':$form['use_parent_config']['#value'],
	'xslt' => $form['xslt']['existing_xslt']['#value'],
      );
     $fields = 
      array(
        'pid', 
	'is_available',
        'last_edited',
	'last_published',
	);
      if ($form['publish_status']['#value'] == '1'){
	  $last_published_config = serialize($last_edited_values);
      } 
    $insert_query = db_insert('exhibition_config')->fields($fields);
    $insert_query->values( 
      array(
        'pid' => $pid,
	'is_available' => (!empty($last_published_config)?'1':'0'),
        'last_edited' => serialize($last_edited_values),
	'last_published' => $last_published_config,
	)
     );
     $output = $insert_query->execute();
     exhibition_config_save_visibility($pid,$existing_visibility_obj);
    if ($output !== FALSE) {
      if ($form['publish_status']['#value'] == '1') {
        exhibition_config_clear_exhibition_cache();
	drupal_set_message(t('Configuration saved and published.'));
      }
      else {
        drupal_set_message(t('Configuration saved but not published.'),'warning');
      }
    }
    else {
      drupal_set_message(t('Database Error.'), 'error');
    }
}



/*
Returns an array 
array( 'pid' -> $pid
       'children' -> array(
          [0] -> array (
                   'pid' -> 'child_pid1',
                   'children' -> ...
                 )
          [1] -> array (
                   'pid' -> 'child_pid2',
                   'children' -> ...
                 )
            
*/
function get_pid_tree_ec($pid, $owner_id, &$pid_list = array()){
  require_once ( dirname(__FILE__) . '/exhibition_config.util.inc');
  $to_return = array();
  $to_return['pid'] = $pid;
  if (in_array($pid, $pid_list)){
    //already did this, duplicate found:
    $to_return['already_in_tree'] = TRUE;
    return $to_return;
  }
  $repo = si_exhibition_get_repo();
  try{
    $exist = si_exhibition_check_object_info_accessible(array('pid' => $pid));
    if ($exist){
      $object = $repo->getObject($pid); 
      $to_return['object'] = $object;
      $to_return['children'] = array();
      $pid_list[] = $pid;
      $children = si_exhibition_get_child_concept_info($object);
      //Get the children
      foreach($children as $child){
        //Build the tree from all the children
        //for each child, get their sub-tree
        $to_return['children'][] = get_pid_tree_ec($child['pid'],$owner_id,$pid_list); 
      }
      return $to_return;
    }else{
      dsm('doesnt exist:'.$pid);
      return null;
    }
  }catch(Exception $hce){
    dsm('exception trying to get:'.$pid);
    return null;
  }
}




function exhibition_config_main_form($pid){
  $pid = urldecode($pid);
  return drupal_get_form('exhibition_config_form',$pid);
}
/*
 * Returns TRUE if the logged in user should be able to edit
 * $owner_id - null or empty indicates the current logged in user
 */
function exhibition_config_allowed_to_edit($pid, $user_id = null){
  global $user;
  require_once ( dirname(__FILE__) . '/exhibition_config.util.inc');
  $user_profile = null;
  if (empty($user_id)){
    $user_id = $user->name;
    $user_profile = $user;
  }else{
    $user_profile = user_load(array('name' => $user_id));
  }
  if (in_array('Exhibition Configuration Administrator', array_values($user_profile->roles))){
    $exist = si_exhibition_check_object_info_accessible(array('pid' => $pid));
    return $exist;
  }else{
    $repo = si_exhibition_get_repo();
    try{
      $exist = si_exhibition_check_object_info_accessible(array('pid' => $pid));
      if ($exist){
        $object = $repo->getObject($pid);
        return (strtolower($object->owner) == strtolower($user_id));
      }
    }catch(Exception $hce){
    }
  }
  return false;
}

/*
 * Get the object if the user is allowed to see it
 */
function _exhibition_config_get_object($pid){
  require_once ( dirname(__FILE__) . '/exhibition_config.util.inc');
  $repo = si_exhibition_get_repo();
  $exist = si_exhibition_check_object_info_accessible(array('pid' => $pid));
  if ($exist){
    $object = $repo->getObject($pid);
    return $object;
  }
  return null;
}
/*
 * Testing Permissions Visibilty UI
 */
/*
 * Main form for configuring the exhibition
 */
function exhibition_config_form($form, $form_state){
  $pid = $form_state['build_info']['args'][0];
  $allowed = exhibition_config_allowed_to_edit($pid);
  if (!$allowed){
    drupal_set_message(t('Your user is not allowed to change the configuration of this object.  To change the configuration, the object must be viewable in Fedora by your user, and you must either be the owner of the object or have the "Exhibition Configuration Administrator" role.'), 'error');
    return;
  }
  $object = _exhibition_config_get_object($pid);
  $new_row = exhibition_config_get_config_data($pid);
  $row = array();
  if (!empty($new_row)) $row = unserialize($new_row['last_edited']);
  drupal_add_library('system', 'ui.resizable');
  drupal_add_library('system','ui.dialog');
  if (empty($row)) {
    $row = array();
    $row['css_script'] = '';
    $row['link_bar_links'] = array('names' => array(),'urls' => array());
    $row['logo'] = '';
    $row['header_html'] = '';
    $row['title'] = '';
    $row['sidebar_left_html'] = '';
    $row['precontent_html'] = '';
    $row['postcontent_html'] = '';
    $row['sidebar_right_html'] = '';
    $row['footer_html'] = '';
    //$row['is_available'] = '';
    $row['custom_url'] = '';
    $row['logo_width'] = '';
    $row['logo_height'] = '';
    $row['nav_location'] = '';
    $row['nav_type'] = '';
    $row['xslt'] = '';
  }
  $my_css = $row['css_script'];
  $links = $row['link_bar_links'];
  $row['is_published'] = FALSE; // this exhibition has been published at all
  $row['last_published'] = FALSE; // the last changes made to this exhibition have been published
  if ((isset($new_row['last_published'])) && ($new_row['last_published'] != '')) {
    $row['is_published'] = TRUE;
    if ($new_row['last_published'] == $new_row['last_edited']){
      $row['last_published'] = TRUE;
    }
  }	
  $full = '
<a href="javascript:void(0);" onclick="togglePreviewLocation();" title="Moves the sample between the top and side of the page.  You can also move your mouse between the sections and drag to change the sizes when the sample is on the right.">Toggle Sample Location</a><br/>
<a href="javascript:void(0);" onclick="togglePreviewEditLinks();" title="Turns off the \'Edit\' quick links to get a better view of the sample, or turns them back on to quickly jump to a section to edit">Toggle Placeholder Text and Links</a><br/>';
  if ($row['is_published']) {
    $full .= '
<a href="javascript:void(0);" onclick="window.open(\''.
variable_get('si_exhibition_website_location', '').
$pid.'\')" title="Opens the current exhibit in a new window">Direct Link to Exhibition</a>';
  }
  $full .= '
<script>
window.sidora = {
  "exhibitionServerMain" : "'.variable_get('si_exhibition_website_location', '').'",
  "exhibitionServerFriendly" : "'.variable_get('si_exhibition_friendly_website_location', '').'"
}
function setScheme(schemeName){
  if (schemeName == "Blue_Orange"){
    jQuery.farbtastic("#cp-edit-color-page-background").setColor("#fbf5ed");
    jQuery.farbtastic("#cp-edit-color-background").setColor("#025167");
    jQuery.farbtastic("#cp-edit-color-inner-background").setColor("#216477");
    jQuery.farbtastic("#cp-edit-color-link").setColor("#fcbf81");
    jQuery.farbtastic("#cp-edit-color-active-link").setColor("#39aecf");
    jQuery.farbtastic("#cp-edit-color-text").setColor("#d67d23");
    jQuery.farbtastic("#cp-edit-color-table-main").setColor("#ffba73");
    jQuery.farbtastic("#cp-edit-color-table-color-1").setColor("#cde8f0");
    jQuery.farbtastic("#cp-edit-color-table-color-2").setColor("#f0f8fa");
  }
  if (schemeName == "Yellow_Black"){
    jQuery.farbtastic("#cp-edit-color-page-background") .setColor("#ffffff");
    jQuery.farbtastic("#cp-edit-color-background")      .setColor("#cccccc");
    jQuery.farbtastic("#cp-edit-color-inner-background").setColor("#dddddd");
    jQuery.farbtastic("#cp-edit-color-link")            .setColor("#777744");
    jQuery.farbtastic("#cp-edit-color-active-link")     .setColor("#555533");
    jQuery.farbtastic("#cp-edit-color-text")            .setColor("#111111");
    jQuery.farbtastic("#cp-edit-color-table-main")      .setColor("#ffff55");
    jQuery.farbtastic("#cp-edit-color-table-color-1")   .setColor("#ffffff");
    jQuery.farbtastic("#cp-edit-color-table-color-2")   .setColor("#ffffcc");
  }
  if (schemeName == "Greens"){
    jQuery.farbtastic("#cp-edit-color-page-background") .setColor("#ffffff");
    jQuery.farbtastic("#cp-edit-color-background")      .setColor("#dbf26d");
    jQuery.farbtastic("#cp-edit-color-inner-background").setColor("#effab5");
    jQuery.farbtastic("#cp-edit-color-link")            .setColor("#88a30e");
    jQuery.farbtastic("#cp-edit-color-active-link")     .setColor("#7c950d");
    jQuery.farbtastic("#cp-edit-color-text")            .setColor("#005533");
    jQuery.farbtastic("#cp-edit-color-table-main")      .setColor("#ffffbb");
    jQuery.farbtastic("#cp-edit-color-table-color-1")   .setColor("#ffffff");
    jQuery.farbtastic("#cp-edit-color-table-color-2")   .setColor("#ffffbb");
  }
  if (schemeName == "Plum_Sea"){
    jQuery.farbtastic("#cp-edit-color-page-background") .setColor("#f5f2ee");
    jQuery.farbtastic("#cp-edit-color-background")      .setColor("#603642");
    jQuery.farbtastic("#cp-edit-color-inner-background").setColor("#7d1935");
    jQuery.farbtastic("#cp-edit-color-link")            .setColor("#4a96ad");
    jQuery.farbtastic("#cp-edit-color-active-link")     .setColor("#4a96ad");
    jQuery.farbtastic("#cp-edit-color-text")            .setColor("#929292");
    jQuery.farbtastic("#cp-edit-color-table-main")      .setColor("#254853");
    jQuery.farbtastic("#cp-edit-color-table-color-1")   .setColor("#ffffff");
    jQuery.farbtastic("#cp-edit-color-table-color-2")   .setColor("#d6e8ed");
  }
  if (schemeName == "Default"){
    jQuery.farbtastic("#cp-edit-color-page-background") .setColor("#f5f2ee");
    jQuery.farbtastic("#cp-edit-color-background")      .setColor("#f5f2ee");
    jQuery.farbtastic("#cp-edit-color-inner-background").setColor("#ffffff");
    jQuery.farbtastic("#cp-edit-color-link")            .setColor("#006ca8");
    jQuery.farbtastic("#cp-edit-color-active-link")     .setColor("#006ca8");
    jQuery.farbtastic("#cp-edit-color-text")            .setColor("#323232");
    jQuery.farbtastic("#cp-edit-color-table-main")      .setColor("#ffffff");
    jQuery.farbtastic("#cp-edit-color-table-color-1")   .setColor("#ffffff");
    jQuery.farbtastic("#cp-edit-color-table-color-2")   .setColor("#ececec");
  }
  performRecolor(true);
}
</script>
<div id="originalHolderShowExample">
<div id="ShowExample" class="show-example" style="background:#EEEEEE;padding:10px;">
<style scoped>
  @import "'. file_create_url(
  drupal_get_path('module','exhibition_config').'/css/fusion-typography.css'
  ).'";
  @import "'. file_create_url(
  drupal_get_path('module','exhibition_config').'/css/fusion-style.css'
  ).'";
  @import "'. file_create_url(
  drupal_get_path('module','exhibition_config').'/css/grid16-fluid.css'
  ).'";
  @import "'. file_create_url(
  drupal_get_path('module','exhibition_config').'/css/si-exhibition.css'
  ).'";
  @import "'. file_create_url(
  drupal_get_path('module','exhibition_config').'/css/smithsonian.css'
  ).'";
</style>
<div class="page-inner page-inner-sample" id="page-inner">
      <div class="header-group-wrapper full-width" id="header-group-wrapper">
        <div class="header-group row grid16-16" id="header-group">
          <div class="header-group-inner inner clearfix" id="header-group-inner">
            <div class="header-site-info block" id="header-site-info">
              <div class="header-site-info-inner inner" id="header-site-info-inner">
                <div id="logo">
                  <a title="Home" href="#"><div id="actualLogoImageHolder" class="resizable" style="resize:both; overflow: hidden; padding: 0px 0px 10px; height:10px; width:10px;"><img alt="Home" id="actualLogoImage" style="height:100%;width:100%;" src="'.$row['logo'].'"></div></a>
                  <a href="#edit-logo" class="previewEditLink">Edit Logo</a>
                </div>
   
              <div class="clearfix" id="site-name-value">
                <span id="site-name">
       <span id="preview-title"><span>'.$row['title'].'</span><span class="previewEditLink"> Placeholder Title<br/></span></span>
               </span>
       <a href="#edit-title-value" class="previewEditLink">Edit Title</a>
              </div>
            </div>
          </div>
            
            
<div class="block block-si_exhibition odd first last grid16-16" id="block-si_exhibition-seu_h">
  <div class="inner clearfix">
     <div class="content clearfix">
       <span id="preview-header-value"><span>'.$row['header_html'].'</span><span class="previewEditLink"> Placeholder Header<br/></span></span>
       <a href="#edit-header-value" class="previewEditLink">Edit Header</a>
     </div>
  </div><!-- /block-inner -->
</div><!-- /block -->
            <div class="primary-menu block" id="primary-menu">
<div class="primary-menu-inner inner clearfix" id="primary-menu-inner">
<ul class="menu sf-menu sf-js-enabled" style="width:90%"><li class="leaf first last"><a title="" href="#" style="color:#ffffff">Smithsonian</a></li>
</ul></div><!-- /primary-menu-inner -->
</div><!-- /primary-menu -->
            <div class="breadcrumbs block" id="breadcrumbs">
<div class="breadcrumbs-inner inner clearfix" id="breadcrumbs-inner">
<div class="breadcrumb"><a href="#">Home</a></div></div><!-- /breadcrumbs-inner -->
</div><!-- /breadcrumbs -->

          </div><!-- /header-group-inner -->
        </div><!-- /header-group -->
      </div><!-- /header-group-wrapper -->

      
      <!-- preface-top row: width = grid_width -->
      
      <!-- main row: width = grid_width -->
      <div class="main-wrapper full-width" id="main-wrapper">
        <div class="main row grid16-16" id="main">
          <div class="main-inner inner clearfix" id="main-inner">
            <div style="display:none;" class="inivisitree" id="invisitree"><ul class="menu"><li class="collapsed first"><a href="#">123</a></li>
<li class="expanded last"><a href="#">_123</a><ul class="menu"><li class="collapsed first last"><a href="#">123</a></li>
</ul></li>
</ul></div>
<div class="sidebar-first row nested grid16-3" id="preview-sidebar-first">
<div class="sidebar-first-inner inner clearfix" id="sidebar-first-inner">

<div class="block block-si_exhibition odd first last grid16-16" id="block-si_exhibition-seu_sf" style="margin-bottom: 0px;">
  <div class="inner clearfix">
    <div class="content clearfix">
       <div class="preview-sidebar-left-holder">
         <span id="preview-sidebar-left-value"><span>'.$row['sidebar_left_html'].'</span><span class="previewEditLink"> Placeholder Sidebar Left Text<br/></span></span>
         <a href="#edit-sidebar-left-value" class="previewEditLink">Edit Sidebar Left</a>
       </div>
    </div>
  </div><!-- /block-inner -->
</div><!-- /block -->
</div><!-- /sidebar-first-inner -->
</div><!-- /sidebar-first -->
            
            <!-- main group: width = grid_width - sidebar_first_width -->
            <div class="main-group row nested grid16-13" id="preview-main-group">
              <div class="main-group-inner inner" id="main-group-inner">
                
                <div class="main-content row nested" id="preview-main-content">
                  <div class="main-content-inner inner" id="main-content-inner" style="position:relative">
                    <!-- content group: width = grid_width - (sidebar_first_width + sidebar_last_width) -->
                    <div class="content-group row nested " id="content-group">
                      <div class="content-group-inner inner" id="content-group-inner">
                        

                                                <div class="content-top row nested" id="content-top">
                          <div class="content-top-inner inner" id="content-top-inner">
                                                                                    
<div class="block block-si_exhibition odd first last grid16-16" id="block-si_exhibition-seu_pre">
  <div class="inner clearfix">
     <div class="content clearfix">
       <span id="preview-precontent-value"><span>'.$row['precontent_html'].'</span><span class="previewEditLink"> Placeholder Precontent Text<br/></span></span>
       <a href="#edit-precontent-value" class="previewEditLink">Edit Precontent</a>
     </div>
  </div><!-- /block-inner -->
</div><!-- /block -->
                          </div><!-- /content-top-inner -->
                        </div><!-- /content-top -->
                        
                        <div class="content-region row nested" id="content-region">
                          <div class="content-region-inner inner" id="content-region-inner">
                            <a id="main-content-area" name="main-content-area"></a>
                                                        <div class="content-inner block" id="content-inner">
                              <div class="content-inner-inner inner" id="content-inner-inner">
                                                                                                <div class="content-content" id="content-content">
                                  <div class="si-exhibition-full-width" id="si-exhibition">
      <div id="si-content">
     <h2 class="object-title">Sample Project Title</h2>
     <span class="si-icon si-projectcmodel si-conceptcmodel fedora-system-fedoraobject-3-0"></span>
     <div id="si-content-inner">
      <table class="metadata-table">
<tbody>
 <tr class="odd"><td>Project Name (Full)</td><td>Sample Project Name</td> </tr>
</tbody>
</table>
     </div>
   </div>
   <div id="si-resources">
    <h2>Resources</h2>
    <div id="si-resources-inner">
<div action="/fedora/repository/si:277545" method="get" id="exhibition-resources-form" accept-charset="UTF-8"><div><div class="form-item form-type-select form-item-show">
  <label for="edit-show">Limit by type </label>
 <select id="edit-show" name="show" class="form-select"><option value="all">All</option><option value="images">Images</option><option value="pdf">Digitized Text (pdf)</option><option value="csv">Tabular Datasets</option></select>
</div>
<div class="form-item form-type-select form-item-limit">
  <label for="edit-limit">Results per page </label>
 <select id="edit-limit" name="limit" class="form-select"><option value="10">10</option><option value="15">15</option><option value="20">20</option><option value="25">25</option><option value="30">30</option></select>
</div>
<input type="submit" id="edit-submit" name="op" value="Go" class="form-submit"><input type="hidden" name="form_build_id" value="form-lATDymYKMdI9aWWA7e073XhlbJj7j7UC7bwugWdR_co">
<input type="hidden" name="form_id" value="exhibition_resources_form">
</div></div>
<div class="showing">
   Showing 1 - 3 of 3</div>
<table class="resources-table sticky-enabled sticky-table">
 <thead class="tableHeader-processed"><tr><th></th><th sort="asc">Title</th><th>Options</th> </tr></thead>
<tbody>
 <tr class="odd"><td><a href="#" rel="shadowbox[si:257965]" title="Sample Image 1"><img class="resource-tn" src="'.
$GLOBALS['base_url'].'/'.drupal_get_path('module','exhibition_config').'/images/sample1.jpg'.
'"></a></td><td><span class="table-label">Sample Image 1<span></span></span></td><td><div class="exhibition_js_dropdown" style="display:none;">
</div><div class="regular-options"><a href="#">Download</a> <a href="#" rel="shadowbox" title="Sample Image 1" onclick="return false;">View&nbsp;Metadata</a> <a href="#" rel="shadowbox[si:257965]" title="Sample Image 1" onclick="return false;">Preview</a></div>
</td> </tr>
 <tr class="even"><td><a href="#" rel="shadowbox[si:257964]" title="Sample Image 2">
<img class="resource-tn" src="'.
$GLOBALS['base_url'].'/'.drupal_get_path('module','exhibition_config').'/images/sample2.jpg'.
'"></a></td><td><span class="table-label">Sample Image 2<span></span></span></td><td><div class="exhibition_js_dropdown" style="display:none;">
</div><div class="regular-options"><a href="#">Download</a> <a href="#" rel="shadowbox" title="Sample Image 2" onclick="return false;">View&nbsp;Metadata</a> <a href="#" rel="shadowbox[si:257964]" title="Sample Image 2" onclick="return false;">Preview</a></div>
</td> </tr>
 <tr class="odd"><td><a href="#" rel="shadowbox[si:257963]" title="Sample Image 3"><img class="resource-tn" src="'.
$GLOBALS['base_url'].'/'.drupal_get_path('module','exhibition_config').'/images/sample1.jpg'.
'"></a></td><td><span class="table-label">Sample Image 3<span></span></span></td><td><div class="exhibition_js_dropdown" style="display:none;">
</div><div class="regular-options"><a href="#">Download</a> <a href="#" rel="shadowbox" title="Sample Image 3" onclick="return false;">View&nbsp;Metadata</a> <a href="#" rel="shadowbox[si:257963]" title="Sample Image 3" onclick="return false;">Preview</a></div>
</td> </tr>
</tbody>
</table>
    </div>
  </div>
</div>
                                                                  </div><!-- /content-content -->
                                                              </div><!-- /content-inner-inner -->
                            </div><!-- /content-inner -->
                          </div><!-- /content-region-inner -->
                        </div><!-- /content-region -->

                        <div class="content-bottom row nested " id="content-bottom">
<div class="content-bottom-inner inner clearfix" id="content-bottom-inner">

<div class="block block-si_exhibition odd first last grid16-16" id="block-si_exhibition-seu_post">
  <div class="inner clearfix">
    <div class="content clearfix">
       <span id="preview-postcontent-value"><span>'.$row['postcontent_html'].'</span><span class="previewEditLink"> Placeholder Postcontent Text<br/></span></span>
       <a href="#edit-postcontent-value" class="previewEditLink">Edit Postcontent</a>
    </div>
  </div><!-- /block-inner -->
</div><!-- /block -->
</div><!-- /content-bottom-inner -->
</div><!-- /content-bottom -->
                      </div><!-- /content-group-inner -->
                    </div><!-- /content-group -->

                  </div><!-- /main-content-inner -->
                </div><!-- /main-content -->

                              </div><!-- /main-group-inner -->
            </div><!-- /main-group -->
<div style="" class="sidebar-last row nested grid16-3" id="sidebar-last">
  <div class="sidebar-last-inner inner clearfix" id="sidebar-last-inner">
    <div class="block block-si_exhibition odd first grid16-16" id="block-si_exhibition-seu_sl">
      <div class="inner clearfix">
        <div class="content clearfix">
          <div class="preview-sidebar-right-holder">
            <span id="preview-sidebar-right-value"><span>'.$row['sidebar_right_html'].'</span><span class="previewEditLink"> Placeholder Sidebar Right Text<br/></span></span>
            <a href="#edit-sidebar-right-value" class="previewEditLink">Edit Sidebar Right Content</a>
          </div>
         </div>
      </div><!-- /block-inner -->
    </div><!-- /block -->
    <div class="block block-si_exhibition even  last grid16-16" id="block-si_exhibition-0">
      <div class="inner clearfix">
        <div id="pc_nav">
          <h2 class="title block-title">SI Navigation</h2>
          <div class="content clearfix">
            <div id="si-navigation">
              <div id="si-navigation-inner">
                <h3>Parent concepts</h3>
                <div class="item-list">
                  <ul class="parent-concepts">
                    <li class="first last"><a href="#">123</a></li>
                  </ul>
                </div>
                <h3>Child concepts</h3>
                This item has no child concepts.
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="inner clearfix">
        <div id="tree_nav">
          <div class="content clearfix">
    '.
    /*
    Active JStree (need js and css)

    <div id="forjstree" style="overflow:auto;" class="" role="">
      <ul><li>
        <a href="#">Exhibition Tester</a>
        <ul><li><a href="#">Sample Child 1</a></li><li><a href="#">Sample Child 2</a></li></ul>
      </li></ul>
    </div>
    */
    /*
    Inactive JStree (just css)
    */
    '
        <div id="forjstree" style="overflow: auto; display: block;" class="jstree jstree-1 jstree-default jstree-default-responsive" role="tree" aria-activedescendant="j1_1"><ul class="jstree-container-ul"><li role="treeitem" aria-expanded="true" id="j1_1" class="jstree-node  jstree-open jstree-last" aria-selected="false"><i class="jstree-icon jstree-ocl"></i><a class="jstree-anchor" href="/fedora/repository/si:256534?path="><i class="jstree-icon jstree-themeicon"></i>asdf2</a><ul role="group" class="jstree-children" style=""><li role="treeitem" id="j1_2" class="jstree-node  jstree-leaf" aria-selected="false"><i class="jstree-icon jstree-ocl"></i><a class="jstree-anchor" href="/fedora/repository/si:257074?path=si:256534"><i class="jstree-icon jstree-themeicon"></i>asdf10</a></li><li role="treeitem" id="j1_3" class="jstree-node  jstree-leaf jstree-last" aria-selected="false"><i class="jstree-icon jstree-ocl"></i><a class="jstree-anchor" href="/fedora/repository/si:256809?path=si:256534"><i class="jstree-icon jstree-themeicon"></i>ghjk</a></li></ul></li></ul></div>
    '.
    /*js tree stuff end */'
          </div>
        </div><!-- /tree_nav -->
      </div>
    </div>
  </div><!-- /sidebar-last-inner -->
</div><!-- /sidebar-last -->
          </div><!-- /main-inner -->
        </div><!-- /main -->
      </div><!-- /main-wrapper -->

      <!-- postscript-bottom row: width = grid_width -->
      
      <!-- bottom row: width = grid_width -->
      
      <div class="footer-wrapper full-width" id="footer-wrapper">
<div class="footer row grid16-16" id="footer">
<div class="footer-inner inner clearfix" id="footer-inner">

<div class="block block-si_exhibition odd first grid16-8" id="block-si_exhibition-seu_f">
  <div class="inner clearfix">
    <div class="content clearfix">
       <span id="preview-footer-value"><span>'.$row['footer_html'].'</span><span class="previewEditLink"> Placeholder Footer Text<br/></span></span>
       <a href="#edit-footer-value" class="previewEditLink">Edit Footer</a>
    </div>
  </div><!-- /block-inner -->
</div><!-- /block -->

<div class="block block-system even  last grid16-8" id="block-system-0">
  <div class="inner clearfix">
  </div><!-- /block-inner -->
</div><!-- /block -->
</div><!-- /footer-inner -->
</div><!-- /footer -->
</div><!-- /footer-wrapper -->


    </div>
</div>
</div>
<script type="text/javascript">
(function( $ ){
$(function(){
  submit = false;
  $("body").css("padding-top","0px");
  jQuery("#confirm-publish").unbind(\'click\').click(function(e){
    e.preventDefault();
		var info = 
 ' . variable_get('si_exhibition_agree_before_allowed_public_json', '{}') . '
    jQuery("body").append("<div id=\'AcceptThis\' style=\'display:none;\' title=\'Publishing to public\'></div>");
    var popupHtml = info.htmlStart;
    for (questionIndex = 0; questionIndex < info.questions.length; questionIndex++) {
      var currQuestion = info.questions[questionIndex];
      popupHtml += "<p>"+currQuestion.html;
      for (answerIndex = 0; answerIndex < currQuestion.answers.length; answerIndex++) {
        popupHtml += "<br><input type=\'radio\' name=\'Q"+questionIndex+"\' value=\'"+currQuestion.answers[answerIndex].text+"\'> "+currQuestion.answers[answerIndex].text;
      }
      popupHtml += "</p>";
    }
    jQuery("#AcceptThis").html(popupHtml);
    jQuery("#AcceptThis").dialog({
         height: Math.max(300,jQuery(window).height()-150),
         width: Math.max(400,jQuery(window).width()-100),
         modal: true,
         resizable: true,
         buttons: {
          "Accept": function() {
            var numUnanswered = 0;
            for(questionIndex=0;questionIndex<info.questions.length;questionIndex++){
              jQuery("#AcceptThis").find("input[name=\'Q"+questionIndex+"\']").parent().css("border","");
              if (jQuery("#AcceptThis").find("input[name=\'Q"+questionIndex+"\']:checked").length == 0){
                jQuery("#AcceptThis").find("input[name=\'Q"+questionIndex+"\']").parent().css("border","3px solid #AA0000");
                numUnanswered++;
              }
            }
            if (numUnanswered == 0) {
              var afterPostHtml = "";
              var canContinue = true;
              for(questionIndex=0;questionIndex<info.questions.length;questionIndex++){
                var userAnswer = jQuery("#AcceptThis").find("input[name=\'Q"+questionIndex+"\']:checked").val();
                for (possibleAnswerIndex = 0; possibleAnswerIndex < info.questions[questionIndex].answers.length; possibleAnswerIndex++){
                  if (info.questions[questionIndex].answers[possibleAnswerIndex].text == userAnswer){
                     var feedback = info.questions[questionIndex].answers[possibleAnswerIndex][\'htmlFeedbackOnThisSelection\'];
                     var currCanContinue = info.questions[questionIndex].answers[possibleAnswerIndex][\'canContinue\'];
                     canContinue = currCanContinue && canContinue;
                     if (typeof feedback != \'undefined\') {
                       //if it already exists with the exact wording, do not put it again
                       var toAppend = "<p>"+feedback+"</p>";
                       if (afterPostHtml.indexOf(toAppend) == -1){
                         afterPostHtml += toAppend;
                       }
                     }
                  }
                }
              }
              if (canContinue) {
                afterPostHtml += "<p>"+info.htmlAllowedContinue+"</p>";
              }
              jQuery("<div title=\'Feedback\'>"+afterPostHtml+"</div>").dialog({
                //Smaller than the main window so do not accidentally X them both with too many clicks
                height: Math.max(300,jQuery(window).height()-190),
                width: Math.max(400,jQuery(window).width()-160),
                modal: true,
                resizable: true
              });
              if (canContinue) {
                //jQuery("#edit-is-available").prop("checked",true);
                jQuery( this ).dialog("close");
								jQuery("#publish-exhibition").val("1");
								submit = true;
                jQuery("#exhibition-config-form").submit();
              }
            }
            else {
              jQuery("<div title=\'Answer all questions\'>Please answer all questions.  The number of unanswered questions:"+numUnanswered+" </div>").dialog({
                modal: true,
                resizable: true
              });
            }
          },
          Cancel: function() {
            $("#publish-exhibition").val("0");
						jQuery( this ).dialog("close");
          }
       }
    });
});
  $("#confirm-save").click(function(e){
      if ($("#publish-exhibition").val() != "1") {
        e.preventDefault();
        $("#saveExhibitionConfirm").remove();
        $("body").append("<div id=\'saveExhibitionConfirm\' style=\'display:none;\' title=\'Exhibition changes not set to publish.\'><p>To save this configuration without publishing click \"Confirm\".<br/><br/>To set the exhibition changes to be saved and published, click \"Publish & Save\".<br/><br/>Click on \"Cancel\" to do nothing.</p></div>");
        $("#saveExhibitionConfirm").dialog({
         height: 300,
         width: 350,
         modal: true,
         resizable: false,
         buttons: {
          "Confirm": function() {
           $( this ).dialog("close");
           submit = true;
					 $("#publish-exhibition").val("0");
           $("#exhibition-config-form").submit();
          },
          "Publish & Save": function() {
					  $(this).dialog("close");
						$("#publish-exhibition").val("1");
            $("#confirm-publish").trigger("click");
						return false;
					},	
					Cancel: function() {
          $( this ).dialog( "close" );
          }
         }
        });
      }
  });
  $("#exhibition-config-form").submit(function() {
    if (submit) {
      return true;
    } 
  });
  $("input.form-text").blur(function(){
    $("#preview-title").children().first().text($("#edit-title").val());
    $("#actualLogoImage").attr("src",$("#edit-logo").val());
  });
  $("#edit-logo-width").blur(function(){
    resizeLogo();
  });
  $("#edit-logo-height").blur(function(){
    resizeLogo();
  });
  $("#edit-nav-location").change(function(){
    setNavLocationFromDropdown();
  });
  setNavLocationFromDropdown();
  resizeLogo();
  prepForDraggedLogo();
  buildMenuLinks();
  createTargetsForEditLinks();
});
jQuery(window).load(function(){
  CKEDITOR.on("instanceReady",function(e){
    var previewId = "preview" + e.editor.name.substr(4);
    CKEDITOR.instances[e.editor.name].on("change",function(){
      jQuery("#"+previewId).children().first().html(this.getData());
      resizeProperly();
    });
  });
});
window.createTargetsForEditLinks = function(){
  var allLabels = jQuery("label");
  for (i=0; i<allLabels.length; i++){
    var newId = jQuery(allLabels[i]).attr("for");
    if (jQuery("#"+newId).length == 0){
      jQuery(allLabels[i]).prepend("<span id=\'"+newId+"\'></span>");
    }
  }
}
window.addRowToLinksTable = function(){
  var newRow = $("#newLinksTable tr:last").clone();
  var newInputs = $(newRow).find("input");
  for (i = 0; i < newInputs.length; i++){
    $(newInputs[i]).val("");
    var currName = ($(newInputs[i]).attr("name"));
    var currNameNum = currName.substring(
        currName.indexOf("[")+1,
        currName.indexOf("]")
    );
    var newNameNum = parseInt(currNameNum) + 1;
    var newName = currName.replace("["+currNameNum+"]", "["+newNameNum+"]");
    $(newInputs[i]).attr("name", newName);
  }
  $("#newLinksTable").append(newRow);
}
window.prepForDraggedLogo = function(){
  $("#actualLogoImageHolder").mousedown(function(){
    window.dragLogo = new Object();
    window.dragLogo.width = $("#actualLogoImageHolder").css("width");
    window.dragLogo.height = $("#actualLogoImageHolder").css("height");
  });
  $("#actualLogoImageHolder").mouseleave(function(){
    if (!window.dragLogo) return;
    if ($("#actualLogoImageHolder").css("width") != window.dragLogo.width){
      $("#edit-logo-width").val($("#actualLogoImage").width());
    }
    if ($("#actualLogoImageHolder").css("height") != window.dragLogo.height){
      $("#edit-logo-height").val($("#actualLogoImage").height());
    }
  });
}
function resizeLogo(){
  if (isNaN(parseInt($("#edit-logo-width").val())) || parseInt($("#edit-logo-width").val()) == 0){
    $("#actualLogoImageHolder").css("width","auto");
  }else{
    $("#actualLogoImageHolder").css("width","10px");
    $("#actualLogoImageHolder").css("width",$("#edit-logo-width").val()+"px");
  }
  if (isNaN(parseInt($("#edit-logo-height").val())) || parseInt($("#edit-logo-height").val()) == 0){
    $("#actualLogoImageHolder").css("height","auto");
  }else{
    $("#actualLogoImageHolder").css("height","10px");
    $("#actualLogoImageHolder").css("height",(10+parseInt($("#edit-logo-height").val()))+"px"); //10 is the buffer room given for the dragger
  }
}
function setNavLocationFromDropdown(){
  if($("#edit-nav-location").val() == "bleft"){
    $("#block-si_exhibition-0").show();
    $(".preview-sidebar-left-holder").append(
      $("#block-si_exhibition-0")
    );
  }else if($("#edit-nav-location").val() == "left"){
    $("#block-si_exhibition-0").show();
    $(".preview-sidebar-left-holder").prepend(
      $("#block-si_exhibition-0")
    );
  }else if($("#edit-nav-location").val() == "bright"){
    $("#block-si_exhibition-0").show();
    $(".preview-sidebar-right-holder").append(
      $("#block-si_exhibition-0")
    );
  }else if($("#edit-nav-location").val() == "right"){
    $("#block-si_exhibition-0").show();
    $(".preview-sidebar-right-holder").prepend(
      $("#block-si_exhibition-0")
    );
  }else{
    $("#block-si_exhibition-0").hide();
  }
  resizeProperly()
};
window.togglePreviewEditLinks = function(){
  jQuery(".previewEditLink").toggle();
  resizeProperly();
}
function resizeProperly(){
  var howManySidebars = 0;
  if (
      jQuery(".preview-sidebar-left-holder").height() == 0 &&
      jQuery(".preview-sidebar-left-holder").has(jQuery("#tree_nav:visible")).length == 0
  ){
    jQuery("#preview-sidebar-first").removeClass("grid16-3");
  }else{
    jQuery("#preview-sidebar-first").addClass("grid16-3");
    howManySidebars++;
  }
  if (
      jQuery(".preview-sidebar-right-holder").height() == 0 &&
      jQuery(".preview-sidebar-right-holder").has(jQuery("#tree_nav:visible")).length == 0
  ){
    jQuery("#preview-sidebar-last").removeClass("grid16-3");
  }else{
    jQuery("#preview-sidebar-last").addClass("grid16-3");
    howManySidebars++;
  }
  if (howManySidebars == 0 ){  
    jQuery("#preview-main-group").removeClass("grid16-13");
    jQuery("#preview-main-group").removeClass("grid16-10");
  }
  if (howManySidebars == 1 ){  
    jQuery("#preview-main-group").addClass("grid16-13");
    jQuery("#preview-main-group").removeClass("grid16-10");
  }
  if (howManySidebars == 2 ){  
    jQuery("#preview-main-group").removeClass("grid16-13");
    jQuery("#preview-main-group").addClass("grid16-10");
  }

}
window.togglePreviewLocation = function(){
  if (jQuery("#righter").length == 0){
    putOnSide();
  }else{
    putBack();
  }
}
function buildMenuLinks(){
  //Draggable table hook
  if (Drupal && Drupal.tableDrag){
    Drupal.tableDrag.prototype.onDrop = function() {
      buildMenuLinks();
      return null;
    };
  }else{
    console.log("table drag not properly included in Drupal configuration");
  }
  $(".userCreated").remove();
  $( "input[name*=\'link_name\']" ).each(function(){
    $(this).unbind("blur");
    $(this).blur(function(){
      buildMenuLinks();
    });
    if ($(this).val() == "") return;
    $("#ShowExample .header-group-wrapper .menu").append("<li class=\'userCreated\'><a href=\'#\'>"+$(this).val()+"</a></li>")
  });
}
function putOnSide(){
  if (jQuery("#righter").length == 0) 
  {
    jQuery("#content").append("<div id=\'righter\' class=\'resizable resizable2\' style=\'display:inline-block;width:60%;float:right;\'></div>");
  }
  var toChange = jQuery("#righter").prev();
  toChange.css("min-width","0");
  toChange.css("float","left");
  toChange.css("width","38%");
  toChange.css("margin-left","0");
  toChange.css("margin-right","0");
  toChange.css("display","inline-block");
  toChange.css("overflow","auto");
  toChange.css("height","710px");
  $(".page-inner-sample").css("height","710px");
  $(".page-inner-sample").css("overflow","auto");
  jQuery("#righter").append(jQuery("#ShowExample"));
  setTimeout(mr,1000);
}
function putBack(){
  $("#originalHolderShowExample").append(jQuery("#ShowExample"));
  var toChange = jQuery("#righter").prev();
  toChange.css("min-width","0");
  toChange.css("float","");
  toChange.css("width","");
  toChange.css("margin-left","");
  toChange.css("margin-right","");
  toChange.css("display","");
  toChange.css("overflow","");
  toChange.css("height","");
  $(".page-inner-sample").css("height","");
  $(".page-inner-sample").css("overflow","");
  $("#righter").remove(); 
}
window.constantCheck = function(){
  performRecolor(true); 
  setTimeout(constantCheck,1000);
}
window.addCss = function(cssCode) {
  if (cssCode == window.currentCssCode){
     return;
  }
  var styleElement = document.createElement("style");
  if (window.recentStyle){
    $(window.recentStyle).remove();
  }
  styleElement.type = "text/css";
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = cssCode;
  } else {
    styleElement.appendChild(document.createTextNode(cssCode));
  }
  window.recentStyle = styleElement;
  document.getElementsByTagName("head")[0].appendChild(styleElement);
  window.currentCssCode = cssCode;
}
window.setFieldsetsToUncollapseWhenPreviewEditLinksClicked = function(){
  $(".previewEditLink").each( function() {
    var $this = jQuery(this), 
        target = this.hash;
    jQuery(this).click(function (e) { 
        if( $this.length > 0 ) {
            if($this.attr("href") == "#" ) {
                // Do nothing   
            } else {
                var fieldset = $($(target).closest("fieldset"));
                if ($(fieldset).is(".collapsed"))
                    Drupal.toggleFieldset(fieldset);
               setTimeout(function(){
                    location.hash = $this.attr("href")
                },500);
            }  
        }
    });
  });  
}
window.addHighlightsOnSectionMouseovers = function(){
 $("a:contains(\'Top\')").mouseout(function(){
  $("#ShowExample .header-group-inner").css("border","");
 })
 $("a:contains(\'Top\')").mouseover(function(){
  $("#ShowExample .header-group-inner").css("border-right","5px solid black");
  $("#ShowExample .header-group-inner").css("border-left","5px solid black");
 })

 $("a:contains(\'Content Area\')").mouseout(function(){
  $("#ShowExample .main-wrapper").css("border","");
 })
 $("a:contains(\'Content Area\')").mouseover(function(){
  $("#ShowExample .main-wrapper").css("border-right","5px solid black");
  $("#ShowExample .main-wrapper").css("border-left","5px solid black");
 })

 $("a:contains(\'Bottom\')").mouseout(function(){
  $("#ShowExample .footer-wrapper").css("border","");
 })
 $("a:contains(\'Bottom\')").mouseover(function(){
  $("#ShowExample .footer-wrapper").css("border-right","5px solid black");
  $("#ShowExample .footer-wrapper").css("border-left","5px solid black");
 })
}
mr = function(){
    jQuery("#righter").resizable(
    {
        autoHide: true,
        handles: \'w\',
        resize: function(e, ui) 
        {
            var parent = ui.element.parent();
            var remainingSpace = parent.width() - ui.element.outerWidth() - 10,
                divTwo = ui.element.prev(),
                divTwoWidth = (remainingSpace - (divTwo.outerWidth() - divTwo.width()))/parent.width()*100+"%";
                divTwo.width(divTwoWidth);
            jQuery(ui.element).css("left",0);
        },
        stop: function(e, ui) 
        {
            var parent = ui.element.parent();
            ui.element.css(
            {
                width: ui.element.width()/parent.width()*100+"%",
            });
        }
    });
}

})( jQuery );

//Next section is due to Chrome being unable to shrink an item past original size with css resize (FF works with css resize shrinking)
function contains(container, maybe) {
    return container.contains ? container.contains(maybe) :
        !!(container.compareDocumentPosition(maybe) & 16);
}
function mouseEnterLeave(elem, type, method) {
    var mouseEnter = type === \'mouseenter\',
        ie = mouseEnter ? \'fromElement\' : \'toElement\';
    return function (e) {
        e = e || window.event;
        var target = e.target || e.srcElement,
            related = e.relatedTarget || e[ie];
        if ((elem === target || contains(elem, target)) &&
            !contains(elem, related)) {
            method.call(elem, e);
        }
    };
}
function resizableStart(e){
    this.originalW = this.clientWidth;
    this.originalH = this.clientHeight;
    this.onmousemove = resizableCheck;
    this.onmouseup = resizableEnd;
    this.onmouseout = mouseEnterLeave(this, \'mouseleave\', resizableEnd);
}
function resizableCheck(e){
    if(this.clientWidth !== this.originalW || this.clientHeight !== this.originalH) {
        this.originalX = e.clientX;
        this.originalY = e.clientY;
        this.onmousemove = resizableMove;
    }
}
function resizableMove(e){
    var newW = this.originalW + e.clientX - this.originalX,
        newH = this.originalH + e.clientY - this.originalY;
    if(newW < this.originalW){
        this.style.width = newW + \'px\';
    }
    if(newH < this.originalH){
        this.style.height = newH + \'px\';
    }
}
function resizableEnd(){
    this.onmousemove = this.onmouseout = this.onmouseup = null;
}
jQuery(document).ready(function(){

var els = document.getElementsByClassName(\'resizable\');
for(var i=0, len=els.length; i<len; ++i){
    els[i].onmouseover = mouseEnterLeave(els[i], \'mouseenter\', resizableStart);
}
});
</script>
';
  $form['#attributes'] = array('enctype' => "multipart/form-data");
  $form['pid'] = array(
    '#prefix' => $full,
    '#type' => 'hidden',
    '#title' => t('Islandora PID'),
    '#default_value' => $pid,
  );
  $form['is_published'] = array(
    '#type' => 'hidden',
    '#title' => t('Has this exhibition been published with the latest changes?'),
    '#default_value' => $row['is_published'],
    '#description' => t('Has this exhibition been published at all or with the latest changes?'),
  );
  $form['publish_status'] = array(
    '#type' => 'hidden',
    '#title' => t('Publish the changes'),
    '#default_value' => '0',
    '#attributes' => array("id" => "publish-exhibition"), 
    '#description' => t('This must be true to push the last edited state to last published state'),
  );
  $form['visibility_link'] = array(
   '#markup' => t('<p> <a target="_blank" href="'.base_path().'exhibition_config/visibility/'.$pid.'">Configure Visibility</a> (which concepts and resources are shown)</p>'),
  );
  $customUrl = '';
  if ($row['is_published']) {
    $customUrl = $row['custom_url'];
    if (!empty($customUrl)){
      $savedUrlFullPath = variable_get('si_exhibition_friendly_website_location','').$customUrl;
      $customUrl = 'Current Saved Custom Url:<br/> <a target="_blank" href="'.$savedUrlFullPath.'">'.$savedUrlFullPath.'</a>';
    }else{
      $savedUrlFullPath = variable_get('si_exhibition_website_location', '').$pid;
      $customUrl = 'Current Url: <div id="highlight-to-copy-exhibition-url"><a target="_blank" href="'.$savedUrlFullPath.'">'.$savedUrlFullPath.'</a></div>';
    }
  }
  $form['custom_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Custom URL'),
    '#prefix' => $customUrl,
    '#default_value' => $row['custom_url'],
    '#description' => t('The custom URL will be "/exhibition/public/" plus your entry. The URL entered must be alphanumeric: no slashes or special characters.'),
  );
  $form['top'] = array(
    '#type' => 'fieldset',
    '#title' => t('Top'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE, 
  );
  $form['top']['logo_upload'] = array(
    '#type' => 'file',
    '#title' => t('New Logo Upload'),
    '#attributes' => array('accept' => 'image/*'),
  );
  $form['top']['logo'] = array(
    '#type' => 'textfield',
    '#title' => t('Logo'),
    '#maxlength' => 1024, 
    '#default_value' => $row['logo'],
    '#description' => t('This can be a URL or an uploaded image.'),
  );
  $form['top']['logo_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Logo Width'),
    '#description' => t('Width of the logo (leave blank for default width, based on height)'),
    '#default_value' => $row['logo_width'],
  );
  $form['top']['logo_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Logo Height'),
    '#description' => t('Height of the logo (leave blank for default height, based on width'),
    '#default_value' => $row['logo_height'],
  );
  $form['top']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#default_value' => $row['title'],
  );
  $form['top']['header'] = array(
    '#type' => 'text_format',
    '#format' => 'full_html',
    '#title' => t('Header'),
    '#default_value' => $row['header_html'],
  );
  $form['top']['link_order'] = array(
    '#type' => 'item',
    '#title' => t('Link Ordering'),
    '#description' => t('Clear the Link Title from a row to remove that entry'),
  );
  //The design here is going to be that the links are all written out, then saved on submit.  It will not use the standard Drupal methodology instead relying on POST data directly for these
  // Build form
  $existingCount = count($links['names']);
  for($currLinkNum = 0; $currLinkNum < $existingCount; $currLinkNum++){
    $cl_name = '<input type="textfield" name="link_name['.$currLinkNum.']" value="'.($links['names'][$currLinkNum]).'" />';
    $cl_url = '<input type="textfield" name="link_url['.$currLinkNum.']" value="'.($links['urls'][$currLinkNum]).'" size="47"/>';

    $form['rows'][$currLinkNum]['data'] = array ('#type' => 'value', '#value' => array(0=>$cl_name, 1=>$cl_url));
    $form['rows'][$currLinkNum]['weight['.$currLinkNum.']'] = array(
      '#type' => 'hidden',
      '#name' => 'weight['.$currLinkNum.']',
      '#size' => 5,
      '#default_value' => $currLinkNum,
      '#attributes' => array('class' => 'weight'),
    );
  }
    if (!empty($form['rows']) && is_array($form['rows'])){
      $table_rows = array();
      //loop through each "row" in the table array
      foreach($form['rows'] as $id => $table_row){
        //we are only interested in numeric keys
        if (is_numeric($id)){  
          $this_row = $table_row['data']['#value'];

          //Add the weight field to the row
          $this_row[] = drupal_render($form['rows'][$id]['weight['.$id.']']);
   
          //Add the row to the array of rows
          $table_rows[] = array('data'=>$this_row, 'class'=>array('draggable'));
        }
      }
    
      //Make sure the header count matches the column count
      $header=array(
        "Link Title", "URL", '',
      );
      $to_table_theme = array('header'=>$header,'rows'=>$table_rows, 'attributes'=>array('id'=>array('link-order-table')));
      $myTable = theme('table',$to_table_theme);
      //$myTable .= theme_table(array('header'=>$header,'rows'=>$table_rows,'attributes'=>array('id'=>'link-order-table')));
      $form['top']['link_order']['#markup'] = $myTable;
    }else{
      $form['top']['link_order']['#markup'] = '<div>'.t('This area is used for reordering links.  No links have been saved for this exhibition.').'</div>';
    }

    // Call add_tabledrag to add and setup the JS for us
    // The key thing here is the first param - the table ID
    // and the 4th param, the class of the form item which holds the weight
  $existingCount = count($links['names']);
  $form['top']['new_links'] = array(
    '#type' => 'textfield',
    '#attributes' => array('style' => 'display:none;'),
    '#title' => t('Add Links'),
    '#field_suffix' => '<table id="newLinksTable"><tr><th>Link Text</th><th>Link URL</th></tr><tr><td><input type="text" name="link_name['.$existingCount.']" size="20"/></td><td><input type="text" name="link_url['.$existingCount.']" size="57"/></td></tr></table><div><a href="#" id="addLink" onclick="addRowToLinksTable(); return false;">Add another link</a></div>',
    '#description' => 'Links can be reordered once they are saved.  By default the links are added to the end of the ordering. If a link does not start with a protocol such as "http://" or "https://" then "http://" is assumed.',
  );
  $form['content_area'] = array(
    '#type' => 'fieldset',
    '#title' => t('Content Area'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE, 
  );
  $form['bottom'] = array(
    '#type' => 'fieldset',
    '#title' => t('Bottom'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE, 
  );
  $form['colors'] = array(
    '#type' => 'fieldset',
    '#title' => t('Colors and Font'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE, 
  );
  $form['xslt'] = array(
    '#type' => 'fieldset',
    '#title' => t('XSLT'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );	
  
  $form['css'] = array(
    '#type' => 'hidden',
    '#title' => t('CSS'),
    '#default_value' => isset($my_css['actual']) ? $my_css['actual'] : '',
  );
  $form['bottom']['footer'] = array(
    '#type' => 'text_format',
    '#format' => 'full_html',
    '#title' => t('Footer'),
    '#default_value' => $row['footer_html'],
  );
  $form['content_area']['precontent'] = array(
    '#type' => 'text_format',
    '#format' => 'full_html',
    '#title' => t('Precontent'),
    '#default_value' => $row['precontent_html'],
  );
  $form['content_area']['postcontent'] = array(
    '#type' => 'text_format',
    '#format' => 'full_html',
    '#title' => t('Postcontent'),
    '#default_value' => $row['postcontent_html'],
  );
  $form['content_area']['sidebar_left'] = array(
    '#type' => 'text_format',
    '#format' => 'full_html',
    '#title' => t('Sidebar Left'),
    '#default_value' => $row['sidebar_left_html'],
  );
  $form['content_area']['sidebar_right'] = array(
    '#type' => 'text_format',
    '#format' => 'full_html',
    '#title' => t('Sidebar Right'),
    '#default_value' => $row['sidebar_right_html'],
  );
  $form['content_area']['nav_location'] = array(
    '#type' => 'select',
    '#title' => t('Navigation Location'),
    '#default_value' => $row['nav_location'],
    '#options' => array(
      'left' => t('Above Sidebar Left Text'),
      'bleft' => t('Under Sidebar Left Text'),
      'right' => t('Above Sidebar Right Text'),
      'bright' => t('Under Sidebar Right Text'),
      'none' => t('None'),
    ),
  );
  $form['content_area']['nav_type'] = array(
    '#type' => 'select',
    '#title' => t('Navigation Type'),
    '#default_value' => $row['nav_type'],
    '#options' => array(
      'parents_children' => t('Only Parents and Children'),
      'tree' => t('Tree'),
    ),
  );
  drupal_add_css('misc/farbtastic/farbtastic.css');
  drupal_add_js('misc/farbtastic/farbtastic.js');
  drupal_add_css(drupal_get_path('module', 'exhibition_config') . '/css/exhibition_config.css', array('group' => CSS_THEME, 'weight' => 111));
  drupal_add_css(drupal_get_path('module', 'exhibition_config') . '/css/jstree_static/style.min.css');
  //drupal_add_js(drupal_get_path('module', 'exhibition_config') . '/js/jQuery-Scoped-CSS-plugin/jquery.scoped.js');
  $form['colors']['colorpicker_scripts'] = array(
    '#type' => 'item',
    '#prefix' => '<div id="cp-holder"></div>
<div title="Choose or reset to a base set and then use the color selectors below with the color chooser to customize">
Color Set:
<select id="color_sets" class="form-select" name="color_sets">
<option value="Custom" selected="selected">Custom</option>
<option value="Default">Default</option>
<option value="Blue_Orange">Blue/Orange</option>
<option value="Yellow_Black">Yellows</option>
<option value="Greens">Greens</option>
<option value="Plum_Sea">Plum Sea</option>
</select></div>',
    '#description' => "<script type='text/javascript'>
(function( $ ){

    $(document).ready(function() {
      $('#color_sets').change(function(){
        setScheme($(this).val());
      });
      var setDefaults = false;
      $('input[id^=\"edit-color\"]').each(function(){
          if ($(this).val() == ''){
            setDefaults = true;
            $(this).val('#000000');
          }
          $('#cp-holder').append('<div class=\"cp\" id=\"cp-'+this.id+'\"></div>');
          $('#'+this.id).focus(function(){
            cpClick(this);
          });
          $('#'+this.id).blur(function(){
            performRecolor(true);
          });
          $('#cp-'+this.id).farbtastic('#'+this.id);
      });
      if (setDefaults){
         
        setScheme('Default');
      }
      $('.cp').hide();
      $('#cp-edit-color-background').show(); //Show initial one
      constantCheck();
      displayCorrectNav();
      togglePreviewLocation();
      $('#edit-nav-type').change(displayCorrectNav);
      setFieldsetsToUncollapseWhenPreviewEditLinksClicked();
      addHighlightsOnSectionMouseovers();
    });
    function displayCorrectNav(){
      $('#pc_nav').hide();
      $('#tree_nav').hide();
      if ($('#edit-nav-type').val() == 'parents_children'){
        $('#pc_nav').show();
      }else{
        $('#tree_nav').show();
      }
    }
    function cpClick(clickedOn){
      $('.cp').hide();
      $('#cp-'+clickedOn.id).show();
    }
    window.performRecolor = function(previewOnly){
      //Create a css from this set
      //'save' the css in the form
      //add the css to the page
      var previewPrefix = '#ShowExample ';
      if (!previewOnly) previewPrefix = '';
      var totalCss = previewPrefix + '.main-inner { background:';
      totalCss += $('#edit-color-background').val();
      totalCss += '}';
      totalCss += previewPrefix + 'a, '+previewPrefix+'a:link, '+previewPrefix+'a:visited { color:';
      totalCss += $('#edit-color-link').val();
      totalCss += '}';
      totalCss += previewPrefix + '#si-resources-inner .controls ul li a.active { color:';
      totalCss += $('#edit-color-active-link').val();
      totalCss += '}';
      totalCss += previewPrefix + 'div, '+previewPrefix+'h1, '+previewPrefix+'h2, #si-resources-inner .controls h3, #si-resources .showing { color:';
      totalCss += $('#edit-color-text').val();
      totalCss += '}';
      totalCss += previewPrefix + '.main-wrapper a, .jstree-anchor:link, .jstree-anchor:hover, .jstree-clicked, .jstree-anchor:visited { color:';
      totalCss += $('#edit-color-background-link').val();
      totalCss += '}';
      totalCss += previewPrefix + '.content-group-inner a { color:';
      totalCss += $('#edit-color-inner-background-link').val();
      totalCss += '}';
      totalCss += previewPrefix + '.content-group-inner { background:';
      totalCss += $('#edit-color-inner-background').val();
      totalCss += '}';
      totalCss += previewPrefix + 'table, '+previewPrefix+'.content-group-inner table a  { background:';
      totalCss += $('#edit-color-table-main').val();
      totalCss += '}';
      totalCss += previewPrefix + '.content-group-inner table a { color:';
      totalCss += $('#edit-color-table-link').val();
      totalCss += '}';
      totalCss += previewPrefix + 'tr.odd td{ background:';
      totalCss += $('#edit-color-table-color-1').val();
      totalCss += '}';
      totalCss += previewPrefix + 'tr.even td{ background:';
      totalCss += $('#edit-color-table-color-2').val();
      totalCss += '}';
      totalCss += previewPrefix + '.page-inner{ background-color:';
      totalCss += $('#edit-color-page-background').val();
      totalCss += '}';
      totalCss += previewPrefix + '.page-inner, '+previewPrefix+'.page-inner h1, '+previewPrefix+'.page-inner h2{ font-family:';
      totalCss += $('#edit-font').val();
      totalCss += '}';
      if (previewOnly){
        totalCss += previewPrefix + '#primary-menu ul.sf-menu a { color: #ffffff }';
        jQuery(\"input[name='css']\").val(performRecolor());
        addCss(totalCss);
      }
      return totalCss;
    }
})( jQuery );

    </script>",
  );
  $form['colors']['color-page-background'] = array(
    '#type' => 'textfield',
    '#title' => t('Page Background'),
    '#default_value' => isset($my_css['color-page-background']) ? $my_css['color-page-background'] : '',
  );
  $form['colors']['color-link'] = array(
    '#type' => 'textfield',
    '#title' => t('Main Page Links'),
    '#default_value' => isset($my_css['color-link']) ? $my_css['color-link'] : '',
  );
  $form['colors']['color-background'] = array(
    '#type' => 'textfield',
    '#title' => t('Sidebar Background'),
    '#default_value' => isset($my_css['color-background']) ? $my_css['color-background'] : '',
  );
  $form['colors']['color-background-link'] = array(
    '#type' => 'textfield',
    '#title' => t('Sidebar Links'),
    '#default_value' => isset($my_css['color-background-link']) ? $my_css['color-background-link'] : '',
  );
  $form['colors']['color-inner-background'] = array(
    '#type' => 'textfield',
    '#title' => t('Interior Background'),
    '#default_value' => isset($my_css['color-inner-background']) ? $my_css['color-inner-background'] : '',
  );
  $form['colors']['color-inner-background-link'] = array(
    '#type' => 'textfield',
    '#title' => t('Interior Links'),
    '#default_value' => isset($my_css['color-inner-background-link']) ? $my_css['color-inner-background-link'] : '',
  );
  $form['colors']['color-active-link'] = array(
    '#type' => 'textfield',
    '#title' => t('"Active" Links'),
    '#default_value' => isset($my_css['color-active-link']) ? $my_css['color-active-link'] : '',
  );
  $form['colors']['color-text'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
    '#default_value' => isset($my_css['color-text']) ? $my_css['color-text'] : '',
  );
  $form['colors']['color-table-main'] = array(
    '#type' => 'textfield',
    '#title' => t('Table Accent Color'),
    '#default_value' => isset($my_css['color-table-main']) ? $my_css['color-table-main'] : '',
  );
  $form['colors']['color-table-color-1'] = array(
    '#type' => 'textfield',
    '#title' => t('Table Color 1'),
    '#default_value' => isset($my_css['color-table-color-1']) ? $my_css['color-table-color-1'] : '',
  );
  $form['colors']['color-table-color-2'] = array(
    '#type' => 'textfield',
    '#title' => t('Table Color 2'),
    '#default_value' => isset($my_css['color-table-color-2']) ? $my_css['color-table-color-2'] : '',
  );
  $form['colors']['color-table-link'] = array(
    '#type' => 'textfield',
    '#title' => t('Table Links'),
    '#default_value' => isset($my_css['color-table-link']) ? $my_css['color-table-link'] : '',
  );
  $form['colors']['font'] = array(
    '#type' => 'select',
    '#title' => t('Font Family'),
    '#default_value' => isset($my_css['font']) ? $my_css['font'] : '',
    '#options' => array(
      'Georgia' => t('Georgia'),
      'Arial' => t('Arial'),
      'Tahoma' => t('Tahoma'),
      'Verdana' => t('Verdana'),
    ),
  );
  $directory_to_list_for_xsl = DRUPAL_ROOT.'/'.drupal_get_path('module','sidora').'/XSL';
  $xsl_filenames = array_diff(scandir($directory_to_list_for_xsl), array('..', '.', '.htaccess'));
  $custom_xslt_added = FALSE;
  $xsl_names_dd['none'] = '';
  $xsl_names_dd['direct'] = 'None - Direct metadata to browser';
  $directory_to_list_for_xsl = DRUPAL_ROOT.'/'.drupal_get_path('module','sidora').'/XSL/';
  foreach($xsl_filenames as $name) { 
    if (strpos(strtolower($name), ".xsl", strlen(strtolower($name)) - strlen(".xsl")) !== FALSE){
      $xsl_names_dd[$directory_to_list_for_xsl.$name] = $name; 
     	if (isset($row['xslt']) && ($row['xslt'] == $name)) {
          $custom_xslt_added = TRUE;
	}	
    }
  }
  if ((isset($row['xslt'])) && (!empty($row['xslt'])) && ($row['xslt'] != 'none') && ($row['xslt'] != 'direct') && !($custom_xslt_added)) {
    $custom_xslt = $row['xslt'];
    $xsl_names_dd[$custom_xslt] = basename($custom_xslt);
  }	
  $form['xslt']['existing_xslt'] = array(
    '#type' => 'select',
    '#title' => 'Select from existing:',
    '#options' => $xsl_names_dd,
    '#default_value' => isset($row['xslt'])?$row['xslt']:'none',
  );
  $form['xslt']['xslt_upload'] = array(
    '#type' => 'file',
    '#title' => t('or Upload new XSLT:'),
    '#attributes' => array('accept' => '.xsl,.xslt'),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
    '#attributes' => array("id" => "confirm-save"),
  );
  $form['publish'] = array(
    '#type' => 'button',
    '#value' => 'Publish',
    '#attributes' => array('id' => 'confirm-publish','class' => array('element-invisible')),
  );	
  if (!($row['last_published']) || !($row['is_published'])){
    unset($form['publish']['#attributes']['class']);
  }
  return $form;
}
function theme_exhibition_config_form($form){
    drupal_add_tabledrag('link-order-table', 'order', 'sibling', 'weight');      
}
function exhibition_config_theme(){
  return array(
    'exhibition_config_form' => array(
      'variables' => array('form' => NULL),
    ),
  );
}
function exhibition_config_get_pid_tree($pid,&$pid_list = array(),$parent = '',$parent_pid = '',$initial_settings = array()){
  require_once ( dirname(__FILE__) . '/exhibition_config.util.inc');
  $to_return = array();
  if (in_array($pid, $pid_list)){
    return $to_return;
  }
  $to_return['pid'] = $pid;
  $repo = si_exhibition_get_repo();
  $object = $repo->getObject($pid);
  $to_return['type'] = 'Concept';
  $to_return['title'] = $object->label;
  if ($parent == '') {
    $to_return['relationship'] = $object->label;
    $to_return['relationship_pid'] = $to_return['pid'];
  }else{
    $to_return['relationship'] = $parent . "\\" . $object->label;
    $to_return['relationship_pid'] = $parent_pid . "/" . $to_return['pid'];
  } 
  $relationship = $to_return['relationship'];
  $relationship_pid = $to_return['relationship_pid'];
  $to_return['show_name'] = False;
  $to_return['show_meta'] = False;
  $to_return['future_children_show_name'] = False;
  $to_return['future_children_show_meta'] = False;
  $to_return['future_children_show_preview'] = False;
  $to_return['future_children_allow_download'] = False;
  $to_return['children'] = array();
  $pid_list[] = $pid;
  $children = si_exhibition_get_children_info($object);
  foreach($children as $child){
    $child['relationship'] = $relationship . "\\" . $child['title'];
    $child['relationship_pid'] = $relationship_pid . "/" . $child['pid'];
    if ($child['type'] == 'Concept') {
      if (!(in_array($child['pid'],$pid_list))){
        $to_return['children'][] = exhibition_config_get_pid_tree($child['pid'],$pid_list,$relationship,$relationship_pid);
      }
    }else{
    $child['show_name'] = False;
    $child['show_meta'] = False;
    $child['show_preview'] = False;
    $child['allow_download'] = False;
    $to_return['children'][]= $child;
    }
  }
  return $to_return;
}
function exhibition_config_generate_checkboxes($branch,&$rows,$visibility_settings,$path){
  if (isset($branch) && sizeof($branch)) {
    foreach ($branch as $child_array) {
      $tree_depth = substr_count($path,'/');
      $indent = '';
      for ($ctr=0;$ctr < $tree_depth; $ctr++) {
        $indent .= '<span class="tree-indent ui-selectee"></span>';
      } 
      if ($child_array['type'] == 'Resource') {
        //$indent .= '<span class="tree-indent ui-selectee"></span>';
      }
      if ($path == '') {
        $array_index = $child_array['pid'];
      }else{  
        $array_index = $path;
      } 
      if ($tree_depth > 0) $array_index = $path.$child_array['pid'];
      $html = '<li class="visibility-row full-browser" id="' . $child_array['pid'] . '" depth="' . $array_index . '" name="' . $child_array['title'] . '">';
      $html .= '<div class="visibility-name">'.$indent;
      $html .= '<span class ="' . $child_array['type'] . ' ui-selectee"></span>';
      $html .=  $child_array['title'].'</div>';
      $html .= '<div class="visibility-type">'.$child_array['type'].'</div>';
      $html .= '<div class="visibility-path">'.$child_array['relationship'].'</div>';
      $checkboxes_array = array();
      foreach ($visibility_settings as $setting => $name) {
        $checkboxes_array[$setting] = '';
      } 
      $rows[$array_index] = array(
        'pid' => $child_array['pid'],
        'type' => $child_array['type'],
        'label' => $child_array['title'],
        'model' =>  (($child_array['type'] == 'Resource')?$child_array['model']:''),
        'prefix' => $html,
        'suffix' => '</li>',
        'checkboxes' => $checkboxes_array);
      if ((isset($child_array['children'])) && (sizeof($child_array['children']) > 0)) {
        $rows[$array_index]['suffix'] .= '<ul class="visibility-list-table" id="' . $array_index . '">';
        exhibition_config_generate_checkboxes($child_array['children'],$rows,$visibility_settings,$array_index.'/');
        $all_keys = array_keys($rows);
        $key = end($all_keys);
        $rows[$key]['suffix'] .= '</ul>';
      }
    } 
  } 
}
function exhibition_config_flatten_tree($branch, &$rows,$visibility_settings,$path) {
  if (isset($branch) && sizeof($branch) && !empty($branch)) {
    $resource_visibility_settings = array('show_name','show_meta','show_preview','allow_download');
    $concept_visibility_settings = array('show_name','show_meta','future_children_show_name','future_children_show_meta','future_children_show_preview','future_children_allow_download');
    foreach ($branch as $child_array) {
      if (sizeof($child_array)) {
        $tree_depth = substr_count($path,'/');
        if ($path == '') {
          $array_index = $child_array['pid'];
        }else{  
          $array_index = $path;
        } 
        if ($tree_depth > 0) $array_index = $path.$child_array['pid'];
        $rows[$array_index] = array(
           'pid' => $child_array['pid'],
           'type' => $child_array['type']);
        foreach ($visibility_settings as $setting => $name) {
          if (($child_array['type'] == 'Concept') && (in_array($setting,$concept_visibility_settings))) {
            $visibility_value = (isset($child_array[$setting]))?($child_array[$setting]):'';
            $rows[$array_index][$setting] = $visibility_value;
          }
          if (($child_array['type'] == 'Resource') && (in_array($setting,$resource_visibility_settings))) {
            $visibility_value = (isset($child_array[$setting]))?($child_array[$setting]):'';
            $rows[$array_index][$setting] = $visibility_value;
          }
        } 
      } 
      if ((isset($child_array['children'])) && (sizeof($child_array['children']) > 0)) {
        exhibition_config_flatten_tree($child_array['children'],$rows,$visibility_settings,$array_index.'/');
      }
    }
  }
} 
function exhibition_permission_main_form($pid){
  $pid = urldecode($pid);
  return drupal_get_form('exhibition_permission_form',$pid);
}
function exhibition_permission_form($form, $form_state){
  $pid = $form_state['build_info']['args'][0];
  $allowed = exhibition_config_allowed_to_edit($pid);
  if (!$allowed){
    drupal_set_message(t('Your user is not allowed to change the visibility of this object.  To change the visibility, the object must be viewable in Fedora by your user, and you must either be the owner of the object or have the "Exhibition Configuration Administrator" role.'), 'error');
    return;
  }
  $visibility_settings = array(
  'show_name' => 'Show Name',
  'show_meta' => 'Show Meta',
  'show_preview' => 'Show Preview',
  'allow_download' => 'Show Download',
  'future_children_show_name' => 'Show Name',
  'future_children_show_meta' => 'Show Meta',
  'future_children_show_preview' => 'Show Preview',
  'future_children_allow_download' => 'Show Download');
  $saved_visibility = exhibition_config_load_visibility($pid);

	$existing_visibility = array();
  //flatten_tree takes an array of children, but the root object is not a child of anything, so pop it in an array
  exhibition_config_flatten_tree(array($saved_visibility),$existing_visibility,$visibility_settings,$pid);
  $modulepath = drupal_get_path('module', 'exhibition_config');
  drupal_add_library('system', 'ui.resizable');
  drupal_add_library('system', 'ui.selectable');
  drupal_add_library('system', 'ui.accordion');
  drupal_add_library('system', 'ui.dialog');
  drupal_add_css($modulepath . '/css/exhibition_visibility.css',array('weight' => '1000000', 'group' => CSS_THEME));
  $pid_tree = array(
    '0' => exhibition_config_get_pid_tree($pid)
  );
  $tree_html = '<div id="concept_tree">';
  $tree_html .= '<div id="selectable" class="full-browser"><ul class="visibility-list-table"><li id="header"><div class="visibility-name">Name</div><div class="visibility-type">Type</div><div class="visibility-path">Full Path</div><div class="visibility-setting">Show Name</div><div class="visibility-setting">Show Metadata</div><div class="visibility-setting">Show Preview</div><div class="visibility-setting">Show Download</div></li>';
  $resource_visibility_only = array('show_preview','allow_download');
  $concept_visibility_only = array('future_children_show_name','future_children_show_meta','future_children_show_preview','future_children_allow_download');
  $checkbox_rows = array();
  exhibition_config_generate_checkboxes($pid_tree,$checkbox_rows,$visibility_settings,$pid);
  $form['visibility']['#tree'] = 'TRUE';
  foreach($checkbox_rows as $key => $row) {
    $form['visibility'][$key]['#tree'] = 'TRUE';
    $depth = $key;
    foreach($row['checkboxes'] as $checkbox_id => $checkbox_value) {
      if ($row['type'] == 'Concept') {
        if (in_array($checkbox_id,$resource_visibility_only)) {
          $form['visibility'][$key][$checkbox_id] = array(
           '#type' => 'markup',
           '#prefix' => $tree_html.$row['prefix'].'<div class="empty-visibility-setting">',
           '#suffix' => '</div>',
           '#access' => 'FALSE',
            '#attributes' => array(
              'class' => array($checkbox_id),
            ),
          );
        }elseif (in_array($checkbox_id,$concept_visibility_only)) { 
          $form['visibility'][$depth][$checkbox_id] = array(
            '#type' => 'checkbox',
            '#prefix' => $tree_html.$row['prefix'].'<div class="hidden-visibility-setting">',
            '#default_value' => (isset($existing_visibility[$depth][$checkbox_id]))?($existing_visibility[$depth][$checkbox_id]):'',
            '#suffix' => '</div>',
            '#attributes' => array(
              'class' => array($checkbox_id),
            ),
          );
        }else{  
          $form['visibility'][$depth][$checkbox_id] = array(
            '#type' => 'checkbox',
            '#prefix' => $tree_html.$row['prefix'].'<div class="visibility-setting">',
            '#default_value' => (isset($existing_visibility[$depth][$checkbox_id]))?($existing_visibility[$depth][$checkbox_id]):'',
            '#suffix' => '</div>',
            '#attributes' => array(
              'class' => array($checkbox_id),
              'label' => $row['label'],
              'pid' => $row['pid'],
              'path' => $depth,
              'model' => $row['model'],
              'type' => $row['type']
            ),
          );
        } 
      }else{
        if (in_array($checkbox_id,$concept_visibility_only)) {
          $form['visibility'][$key][$checkbox_id] = array(
           '#type' => 'markup',
           '#prefix' => $tree_html.$row['prefix'].'<div class="empty-visibility-setting">',
           '#suffix' => '</div>',
           '#access' => 'FALSE',
            '#attributes' => array(
              'class' => array($checkbox_id),
            ),
          );
        }else{
          $form['visibility'][$depth][$checkbox_id] = array(
            '#type' => 'checkbox',
            '#prefix' => $tree_html.$row['prefix'].'<div class="visibility-setting">',
            '#default_value' => (isset($existing_visibility[$depth][$checkbox_id]))?($existing_visibility[$depth][$checkbox_id]):'',
            '#suffix' => '</div>',
            '#attributes' => array(
              'label' => $row['label'],
              'pid' => $row['pid'],
              'path' => $depth,
              'model' => $row['model'],
              'type' => $row['type'],
              'class' => array($checkbox_id),
            ),
          );
        }
      }  
      $tree_html = '';
      $row['prefix'] = '';
    }
    $tree_html = $row['suffix'];
  }   
  $tree_html = '</ul></div>';
  $tree_html .= '<div id="action-bar"><div class="action-button"><a href="javascript:void(0);" class="button" id="change_all">Change All Selected</a></div><div class="action-button"><a href="javascript:void(0);" class="button" id="open-advanced">Advanced</a></div><div class="action-button">';
  $post_html = '</div><div class="action-button"><a href="javascript:void(0);" class="button" id="cancel-button">Cancel</a></div></div>';
  $post_html .= '<div id="advanced_hidden"></div></td>'; 
  $post_html .= "<script>
jQuery(document).ready(function(){
jQuery(\"#exhibition-permission-form\").submit(function(){
var packed = '';
jQuery('#selectable .visibility-list-table input').each(function(){if(jQuery(this).prop('checked')){packed+='1'}else{packed+='0'};});
jQuery(\"[name='packed']\").val(packed);
jQuery('body').append('<div id=\"fsOverlay\" style=\"position:fixed;top:0;left:0;width:100%;height:100%;background-color:#ddd;z-index:10000;\"><div style=\"width:170px;margin:200px auto;height:100px;font-size:48px;\">Saving...</div>');
jQuery('#selectable .visibility-list-table input').prop('checked', false);
return true;});
});
</script>";
  //$post_html .= '</td></tr></table></div></td></tr></table>';
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save',
    '#prefix' => $tree_html,
    '#suffix' => $post_html,
  ); 
	$form['holder'] = array(
    '#prefix' => '<div class="scroller-holder">',
    '#suffix' => '</div>',
    'shown' => array(
      'fieldset' => array(
        '#id' => 'main_shown',
        '#type' => 'fieldset',
        '#title' => 'Shown',
        '#description' => t(''),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      ),
    ),
    'hidden' => array(
      'fieldset' => array(
        '#id' => 'main_hidden',
        '#type' => 'fieldset',
        '#title' => 'Hidden',
        '#description' => t(''),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      ),
    ),
    'metadata' => array(
      'fieldset' => array(
        '#type' => 'fieldset',
        '#title' => 'Metadata',
        '#description' => t(''),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        'shown' => array(
          '#id' => 'meta_shown',
          '#type' => 'fieldset',
          '#title' => 'Metadata Shown',
          '#description' => t(''),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        ),
        'hidden' => array(
          '#id' => 'meta_hidden',
          '#type' => 'fieldset',
          '#title' => 'Visible items with Metadata Hidden',
          '#description' => t(''),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
        ),
      ),
    ),
    'previews' => array(
      'fieldset' => array(
        '#type' => 'fieldset',
        '#title' => 'Previews',
        '#description' => t(''),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        'shown' => array(
          '#id' => 'preview_shown',
          '#type' => 'fieldset',
          '#title' => 'Preview Shown',
          '#description' => t(''),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        ),
        'hidden' => array(
          '#id' => 'preview_hidden',
          '#type' => 'fieldset',
          '#type' => 'fieldset',
          '#title' => 'Visible items with no preview',
          '#description' => t(''),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
        ),
      ),
    ),
    'downloads' => array(
      'fieldset' => array(
        '#type' => 'fieldset',
        '#title' => 'Downloads',
        '#description' => t(''),
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
        'shown' => array(
          '#id' => 'downloads_shown',
          '#type' => 'fieldset',
          '#title' => 'Download Shown',
          '#description' => t(''),
          '#collapsible' => TRUE,
          '#collapsed' => TRUE,
        ),
        'hidden' => array(
          '#id' => 'downloads_hidden',
          '#type' => 'fieldset',
          '#title' => 'Visible items with no download',
          '#description' => t(''),
          '#collapsible' => TRUE,
          '#collapsed' => FALSE,
        ),
      ),
    ),
  );
  $form['pid'] = array(
    '#type' => 'hidden', 
    '#value' => $pid, 
  );
  $form['packed'] = array(
    '#type' => 'hidden', 
    '#default_value' => '', 
  );
  drupal_add_js(drupal_get_path('module', 'exhibition_config') . '/js/exhibition_config_visibility.js');
  return $form;
}
/*
 * Saves the visibility tree in the database
 */
function exhibition_config_save_visibility($pid, $visibility_obj_tree) {
  if (!exhibition_config_allowed_to_edit($pid)) {
    drupal_not_found();
    drupal_exit();
  }
  //if the tree is a child array, just take the first element
  if (empty($visibility_obj_tree['pid']) && !empty($visibility_obj_tree[0])){
    $visibility_obj_tree = $visibility_obj_tree[0];
  }
  $exists = db_query('SELECT 1 FROM {exhibition_config} WHERE pid = :pid', array(':pid' => $pid))->fetchField();
  if ($exists) {
    $query = db_update('exhibition_config')
      ->fields(array(
        'visibility' => json_encode($visibility_obj_tree),
      ))
      ->condition('pid', $pid, '=');
    $num_updated = $query->execute();
    $new_entry = NULL;
  }
  else {
    $fields = 
      array(
        'pid', 
        'visibility', 
      );
    $insert_query = db_insert('exhibition_config')->fields($fields);
    $insert_query->values( 
      array(
        'pid' => $pid,
        'visibility' => json_encode($visibility_obj_tree),
      )
    );
    $new_entry = $insert_query->execute();
  }
  return TRUE; 
}
/*
 * Retrieves the visibility tree from the database or the default show nothing visibility
 */
function exhibition_config_load_visibility($pid) {
  $result = db_query("Select ". //SELECT
"visibility ". 
"FROM {exhibition_config} where pid = :pid", array(':pid'=>$pid));
  $row = array();
  foreach ($result as $input){
    foreach($input as $name=>$value){
      if ($name == 'visibility'){
        $json_decoded_visibility = json_decode($value, TRUE);
        if ($json_decoded_visibility !== NULL) return $json_decoded_visibility;
        $unserialized_visibility = unserialize($value); 
        return $unserialized_visibility;
      }
    }
  }
  return array(
    "pid" => $pid,
    "type" => 'Concept',
    "show_name" => FALSE,
    "show_meta" => FALSE,
  );
}

/*
 * Prints the JSON of the visibility tree for exhibition
 */
function exhibition_config_json_visibility($pid) {
  $pid = urldecode($pid);
/*
  $hard_coded = 
array(
  "pid" => "si:365717",
  "label" => "randerson6",
  "type" => "concept",
  "show_meta" => TRUE,
  "show_name" => TRUE,
  "children" => array (array(
    "pid" => "si:386769",
    "label" => "Image 1",
    "type" => "concept",
    "show_meta" => TRUE,
    "show_name" => TRUE,
    "children" => array (array(
      "pid" => "si:386976",
      "type" => "concept",
      "show_meta" => TRUE,
      "show_name" => TRUE,
      "children" => array (array(
        "pid" => "si:389039",
        "label" => "1400 Pachelbel - Canon in D Major",
        "type" => "resource",
        "show_meta" => FALSE,
        "show_name" => TRUE,
        "show_preview" => TRUE,
        "allow_download" => TRUE,
        "models" => array(
          "islandora:sp-audioCModel"
        )
      ),array(
        "pid" => "si:389041",
        "type" => "resource",
        "label" => "not shown",
        "show_meta" => TRUE,
        "show_name" => FALSE,
        "show_preview" => TRUE,
        "allow_download" => TRUE
      ),array(
        "pid" => "si:389043",
        "label" => "not shown",
        "type" => "resource",
        "show_meta" => TRUE,
        "show_name" => FALSE,
        "show_preview" => TRUE,
        "allow_download" => TRUE
      ),array(
        "pid" => "si:388548",
        "label" => "Fake name for Book1.xls",
        "type" => "resource",
        "show_meta" => TRUE,
        "show_name" => TRUE,
        "show_preview" => FALSE,
        "allow_download" => TRUE,
        "models" => array(
          "si:datasetCModel"
        )
      ),array(
        "pid" => "si:389449",
        "label" => "HAS A PROXY_MP3 Datastream",
        "type" => "resource",
        "show_meta" => TRUE,
        "show_name" => TRUE,
        "show_preview" => TRUE,
        "allow_download" => FALSE,
        "models" => array(
          "islandora:sp-audioCModel"
        )
      ),array(
        "pid" => "si:389037",
        "label" => "Pachelbel - Canon in D Major JSON name",
        "type" => "resource",
        "show_meta" => TRUE,
        "show_name" => TRUE,
        "show_preview" => TRUE,
        "allow_download" => FALSE,
        "models" => array(
          "islandora:sp-audioCModel"
        )
      ),array(
        "pid" => "si:388546",
        "label" => "Talent Skills and Capabilities.xslx JSON name",
        "type" => "resource",
        "show_meta" => TRUE,
        "show_name" => TRUE,
        "show_preview" => TRUE,
        "allow_download" => TRUE,
        "models" => array(
          "si:datasetCModel"
        )
      ))
    ))
  ),array(
    "pid" => "si:386002",
    "label" => "Chrysanthemum.jpg JSON name",
    "type" => "resource",
    "show_meta" => TRUE,
    "show_name" => TRUE,
    "show_preview" => TRUE,
    "allow_download" => TRUE,
    "models" => array(
      "si:generalImageCModel"
    )
  ),array(
    "pid" => "si:12346",
    "label" => "Incomplete folder, will hold more info later",
    "type" => "concept",
    "show_meta" => FALSE,
    "show_name" => TRUE,
    "children" => array (array(
      "pid" => "si:12347",
      "label" => "CSV filled with data",
      "type" => "resource",
      "show_meta" => TRUE,
      "show_name" => TRUE,
      "show_preview" => TRUE,
      "allow_download" => TRUE
    ))
  ))
);
  exhibition_config_save_visibility($pid,$hard_coded);
*/
  $visibility_obj = exhibition_config_load_visibility($pid);
  //Anything with show_name as false we do not want the outside world knowing about
  return drupal_json_output(exhibition_config_filter_visibility_show_name($visibility_obj));
}
/*
 * Implements hook_islandora_datastream_modified().
 *
 * Updates exhibition visibility based on the new children (if needed)
 * 
 * Whenever a child is added or removed the parents' RELS-EXT is modified. Look for these cases
 * and update the supporting visibility entries
 */
function exhibition_config_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
}
/*
 * Implements hook_islandora_datastream_modified().
 *
 * Updates exhibition visibility based on the new children (if needed)
 * 
 * Whenever a child is added or removed the parents' RELS-EXT is modified. Look for these cases
 * and update the supporting visibility entries
 */
function exhibition_config_islandora_datastream_modified(AbstractObject $object, AbstractDatastream $datastream) {
  if (($datastream->id == 'RELS-EXT') || ((strpos($datastream->mimetype,'xml') !== false) && $datastream->id != 'SIDORA' && $datastream->id != 'DC')) {
    $pid_that_changed = $object->id;
    $ec_query = db_select('exhibition_config', 'ec')
      ->fields('ec');
    $ec_db_or = db_or();
    $ec_db_or->condition('ec.visibility', '%' . db_like('"pid":"'.$pid_that_changed.'"') . '%', 'LIKE'); //json_encoded
    $ec_db_or->condition('ec.visibility', '%' . db_like('"pid";s:'.strlen($pid_that_changed).':"'.$pid_that_changed.'"') . '%', 'LIKE'); //serialized
    $ec_query->condition($ec_db_or);

    $result = $ec_query
      ->execute()
      ->fetchAll();
    foreach ($result as $exhibition_root_line){
      //Load this visibility
      //Go through the entire visibility
       
      //dsm('This is in the visibility for:'.$exhibition_root_line->pid);
      $existing_visibility_obj = exhibition_config_load_visibility($exhibition_root_line->pid); 
			if ($datastream->id == 'RELS-EXT'){
        $new_visibility = exhibition_config_reset_visibility($existing_visibility_obj, $pid_that_changed);
			}else{
			  $new_visibility = exhibition_config_update_label($pid_that_changed,$object->label,$existing_visibility_obj);	
			}	
      exhibition_config_save_visibility($exhibition_root_line->pid,$new_visibility);
    }
  }
}

/*
 * returns a visibility object with only objects that have show_name as TRUE
 */
function exhibition_config_reset_visibility($vis_obj, $pid_that_requires_update, $current_path = array()) {
  
  $incoming = array('vis_obj'=>$vis_obj,'ptru'=>$pid_that_requires_update,'cp'=>$current_path);

  $to_return = $vis_obj;
  //Basic approach to this function:
  //For each of my children
  //  Send in each child for checking, adding their visibility to my child list
  //Send back the visibility object with the updated children

  $current_pid = (string)$vis_obj['pid'];
  //Cut out if there is looping
  if (in_array($current_pid, $current_path)){
    return $vis_obj;
  }

  //If it is a resource doesn't need to be checked for children
  if (strtolower($vis_obj['type']) != 'concept'){
    return $vis_obj;
  }

  //If I AM a pid that needs updating
  if ($current_pid == (string)$pid_that_requires_update) {
    require_once ( dirname(__FILE__) . '/exhibition_config.util.inc');
    $repo = si_exhibition_get_repo();
    $object = $repo->getObject($pid_that_requires_update); 
    $children_info = si_exhibition_get_children_info($object);
    //There are certainly more optimized ways to produce what we want
    //This circuitous route is for ease of entering debugging code in when needed
    $children_of_object = array();
    foreach($children_info as $child){
      $children_of_object[] = $child['pid'];
    }
    $children_of_visibility = array();
    foreach($vis_obj['children'] as $child){
      $children_of_visibility[] = $child['pid'];
    }
    $added_child_pids = array_diff($children_of_object, $children_of_visibility);
    $deleted_child_pids = array_diff($children_of_visibility, $children_of_object);

    $to_return_children = array();
    //Add each of the current visibility children that is still a child
    foreach($vis_obj['children'] as $vis_obj_child) {
      if (!in_array($vis_obj_child['pid'],$deleted_child_pids)) {
        $to_return_children[] = exhibition_config_reset_visibility(
          $vis_obj_child, 
          $pid_that_requires_update, 
          array_merge($current_path,(array)$current_pid)
        );
      }
    }

    //Add new children to the end of the visibility children array
    foreach($added_child_pids as $curr_child_pid) {
      $curr_child_info = array();
      foreach($children_info as $q_loop_child_info){ 
        if ($curr_child_pid == $q_loop_child_info['pid']) $curr_child_info = $q_loop_child_info;
      }
      $repo = si_exhibition_get_repo();
      $curr_child_object = $repo->getObject($curr_child_pid);
      $models_to_remove = array("fedora-system:FedoraObject-3.0","si:resourceCModel","si:collectionCModel");
      $model_array = array_diff($curr_child_object->models,$models_to_remove);
      $new_vis_obj = array(
        "pid" => $curr_child_info['pid'],
        "label" => $curr_child_info['title'],
        "type" => $curr_child_info['type'],
        "model" => array_pop($model_array),
      );
      if ($curr_child_info['type'] == 'Resource'){
        $new_vis_obj['show_name'] = !(empty($vis_obj['future_children_show_name']));
        $new_vis_obj['show_meta'] = !(empty($vis_obj['future_children_show_meta']));
        $new_vis_obj['show_preview'] = !(empty($vis_obj['future_children_show_preview']));
        $new_vis_obj['allow_download'] = !(empty($vis_obj['future_children_allow_download']));
      }
      if ($curr_child_info['type'] == 'Concept'){
        $new_vis_obj['show_name'] = !(empty($vis_obj['future_children_show_name']));
        $new_vis_obj['show_meta'] = !(empty($vis_obj['future_children_show_meta']));
        $new_vis_obj['future_children_show_name'] = !(empty($vis_obj['future_children_show_name']));
        $new_vis_obj['future_children_show_meta'] = !(empty($vis_obj['future_children_show_meta']));
        $new_vis_obj['future_children_show_preview'] = !(empty($vis_obj['future_children_show_preview']));
        $new_vis_obj['future_children_allow_download'] = !(empty($vis_obj['future_children_allow_download']));
        $new_vis_obj['children'] = array();
      }

      $to_return_children[] = exhibition_config_reset_visibility(
        $new_vis_obj,
        $curr_child_pid, //Since it's new it will need to be filled in
        array_merge($current_path,(array)$current_pid)
      );
    }
    //Set the new children and allow return
    $to_return['children'] = $to_return_children;
  }
  //If I AM NOT the pid that changed
  else {
    $to_return_children = array();
    if (!empty($vis_obj['children'])){
      foreach($vis_obj['children'] as $curr_child) {
        $to_return_children[] = exhibition_config_reset_visibility(
          $curr_child, 
          $pid_that_requires_update, 
          array_merge($current_path,(array)$current_pid)
        );
      }
      $to_return['children'] = $to_return_children; 
    }
  }
  return $to_return;
}

/*
 * returns a visibility object with only objects that have show_name as TRUE
 */
function exhibition_config_filter_visibility_show_name($vis_obj) {
  $to_return = $vis_obj;
  if (empty($to_return['show_name'])){ return FALSE; }
  $new_children = array();
  if (!empty($vis_obj['children'])){
    foreach($vis_obj['children'] as $curr_child) {
      $check_item = exhibition_config_filter_visibility_show_name($curr_child);
      if (!empty($check_item)){
        $new_children[] = $check_item;
      }
    }
    $to_return['children'] = $new_children; 
  }
  return $to_return;
}
function exhibition_permission_form_submit($form, &$form_state) {
  $root_pid = $form['pid']['#value'];
  $post_array = array();
  $resource_visibility_only = array('show_preview','allow_download');
  $concept_visibility_only = array('future_children_show_name','future_children_show_meta','future_children_show_preview','future_children_allow_download');
  $packed = $form['packed']['#value'];
  $packed_index = 0;
  foreach($form['visibility'] as $object_key => $object_visibility) {
    if ((is_array($object_visibility)) && (array_key_exists('show_name',$object_visibility))) {
      $pid = $object_visibility['show_name']['#attributes']['pid'];
      $depth = $object_visibility['show_name']['#attributes']['path'];
      $pid_result = array(
         'pid' => $pid,
         'label' => $object_visibility['show_name']['#attributes']['label'],
         'model' => $object_visibility['show_name']['#attributes']['model'],
         'type' => $object_visibility['show_name']['#attributes']['type'],
      );
      foreach($object_visibility as $visibility_key => $visibility_value) {
        if ((is_array($visibility_value)) && ((array_key_exists('#type',$visibility_value)) && ($visibility_value['#type'] == 'checkbox'))) {
          $pid_result[$visibility_key] = ($packed[$packed_index++] == "1"); //$visibility_value['#value'];
        }
      }
     $post_array[$depth] = $pid_result; 
    }   
  }
  $visibility_settings_array = array();
  foreach($post_array as $key => $value) {
    update_visibility_pid($visibility_settings_array,$key,$value);
  }
  exhibition_config_save_visibility($root_pid,$visibility_settings_array);
}
function update_visibility_pid(&$visibility_array,$object_pid,$visibility_value) {
  if (substr_count($object_pid,'/') > 0) {
    $key_array = explode('/',$object_pid,-1);
    $object_pid = implode('/',$key_array);
    $children_branch = &return_branch_by_address($visibility_array,$object_pid,'/');
    array_push($children_branch,$visibility_value);
  }else{
    $visibility_value['children'] = array();
    $visibility_array[] = $visibility_value;
  }
}  
function &return_branch_by_address (&$parent_array, $child_address, $addressSeparator = '/') {
  $parts = explode($addressSeparator, $child_address);
  $thisLevel = array_shift($parts);
  foreach ($parent_array as &$branch) {
    if ((isset($branch['pid'])) && ($branch['pid'] == $thisLevel)) {
      if ($parts) {
        $child_branch_address = &return_branch_by_address($branch['children'], implode($addressSeparator, $parts));
        return $child_branch_address;
      } else {
        if (!(isset($branch['children']))) {
          $branch['children'] = array();
        }
        return $branch['children'];
      }
    }
  }
}
function exhibition_config_info () {
  return drupal_json_output(variable_get('si_exhibition_preview_warning',''));
}
/**
 * Deletes a configuration from the database.  There is no undo.
 * 
 */
function exhibition_config_delete($pid = '') {
  if (empty($pid)){
    return "No valid pid";
  }
 $num_deleted = db_delete('exhibition_config')->condition('pid', $pid)->execute();
 print '{ "error": false, "num_deleted": ' . $num_deleted . '}';
 drupal_exit();
}
function exhibition_config_update_label($pid_to_update,$new_label,$visibility_array){
  if ($visibility_array['pid'] == $pid_to_update) {
	  $visibility_array['label'] = $new_label;
	}
	if (isset($visibility_array['children']) && is_array($visibility_array['children']) && (count($visibility_array['children']) >0)){
	  foreach ($visibility_array['children'] as $key=>$child){
		  $visibility_array['children'][$key] = exhibition_config_update_label($pid_to_update,$new_label,$child);
		}
	}
	return $visibility_array;
}		
function exhibition_config_clear_exhibition_cache(){
  $url_to_get = variable_get('si_exhibition_clear_cache_url', '');
  $ch = curl_init();
  curl_setopt($ch, CURLOPT_URL, $url_to_get);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
  curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
	$data = curl_exec($ch);
	curl_close($ch);
	return;
}
