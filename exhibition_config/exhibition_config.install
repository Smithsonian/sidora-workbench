<?php
function exhibition_config_install() {
  drupal_set_message(t("Exhibition Config Install starting"));
  _exhibition_config_install_roles();
  drupal_set_message(t("Exhibition Config Install complete"));
}
function exhibition_config_schema(){
  $schema['exhibition_config'] = array(
    'description' => t('Stores information for exhibitions'),
    'fields' => array(
      'pid' => array(
        'type' => 'varchar',
        'length' => '256',
        'not null' => TRUE,
        'default' => '',
      ),
      'logo' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'title' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'header_html' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'css_script' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'footer_html' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'precontent_html' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'postcontent_html' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'sidebar_left_html' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'sidebar_right_html' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'nav_location' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'logo_width' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'logo_height' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'nav_type' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'custom_url' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'link_bar_links' => array(
        'type' => 'text',
        'size' => 'normal',
      ),
      'use_parent_config' => array(
        'type' => 'int',
      ),
      'is_available' => array(
        'type' => 'int',
      ),
      'visibility' => array(
        'type' => 'text',
        'size' => 'big',
      ),
    ),
  );
  return $schema;
}
/**
 * Update from the original Exhibition config, enable the ability to hold visibility information
 */
function exhibition_config_update_7100() {
  $spec = array(
    'type' => 'text',
    'description' => 'Visibility of all items within this exhibition',
    'size' => 'big',
  );
  db_add_field('exhibition_config', 'visibility', $spec);
}
/**
 * Update to database to hold 2 states of exhibition config, last edited and last published
 */
function exhibition_config_update_7200() {
	if (!db_table_exists('exhibition_config_unserialized')){
		$schema['exhibition_config_7200'] = array(
    'description' => t('Stores information for exhibitions'),
    'fields' => array(
      'pid' => array(
        'type' => 'varchar',
        'length' => '256',
        'not null' => TRUE,
        'default' => '',
      ),
      'is_available' => array(
        'type' => 'int',
      ),
			'last_edited' => array(
			  'type' => 'text',
				'size' => 'big',
			),
			'last_published' => array(
			  'type' => 'text',
				'size' => 'big',
			),		
      'visibility' => array(
        'type' => 'text',
        'size' => 'big',
      ),
    ),
  );
	db_rename_table('exhibition_config','exhibition_config_unserialized');  
	db_create_table('exhibition_config', $schema['exhibition_config_7200']);
  $select_query = db_query("select * from {exhibition_config_unserialized}");
	$query = db_insert('exhibition_config')->fields(array('pid','is_available','last_edited','last_published','visibility'));
	while($input = $select_query->fetchAssoc()){
		$last_edited_values = array(
      'logo' => $input['logo'],
      'logo_width' => $input['logo_width'],
      'logo_height' => $input['logo_height'],
      'title' => $input['title'],
      'header_html' => $input['header_html'],
      'css_script' => unserialize($input['css_script']),
      'footer_html' => $input['footer_html'],
      'precontent_html' => $input['precontent_html'],
      'postcontent_html' => $input['postcontent_html'],
      'sidebar_left_html' => $input['sidebar_left_html'],
      'sidebar_right_html' => $input['sidebar_right_html'],
      'nav_location' => $input['nav_location'],
      'nav_type' => $input['nav_type'],
      'custom_url' => $input['custom_url'],
      'link_bar_links' => unserialize($input['link_bar_links']),
      'use_parent_config' => $input['use_parent_config'],
		);
		$row = array(
		  'pid' => $input['pid'],
			'is_available' => $input['is_available'],
			'last_edited' => serialize($last_edited_values),
			'last_published' => ($input['is_available'] == '1')? serialize($last_edited_values):'',
			'visibility' => $input['visibility'],
		);	
	  $query->values($row);	
	}
	$query->execute();
}		 
}
/**
 * Update to database to store visibililty of individual concepts and resources in a separate table
 */
function exhibition_config_update_7300() {
	if (!db_table_exists('exhibition_config_visibility')){
		$schema['exhibition_config_7300'] = array(
    'description' => t('Stores individual visibilities for exhibitions'),
    'fields' => array(
      'pid' => array(
        'type' => 'varchar',
        'length' => '256',
        'not null' => TRUE,
        'default' => '',
      ),
      'path' => array(
        'type' => 'text',
				'size' => 'normal',
      ),
      'visibility' => array(
        'type' => 'text',
        'size' => 'big',
      ),
    ),
  );
	db_create_table('exhibition_config_visibility', $schema['exhibition_config_7300']);
	}
  $result = db_query("Select ". //SELECT
"pid, visibility ". 
"FROM {exhibition_config}");
  $row = array();
  while($input = $result->fetchAssoc()){
    $root_pid = $input['pid'];
    if (($input['visibility'] !== NULL) && ($input['visibility'] !== 'false')) {
      $root_visibility = $input['visibility'];
	    $exists = db_query("SELECT 1 FROM {exhibition_config_visibility} WHERE pid = :pid", array(':pid' => $root_pid))->fetchField();
	if (!$exists) {
      $json_decoded_visibility = json_decode($root_visibility, TRUE);
      if ($json_decoded_visibility !== NULL) {
        $unserialized_visibility = $json_decoded_visibility;
      }else{
        $unserialized_visibility = unserialize($root_visibility); 
      }	
      $unserialized_visibility = array($unserialized_visibility);
      $visibility_settings = array(
         'show_name' => 'Show Name',
         'show_meta' => 'Show Meta',
         'show_preview' => 'Show Preview',
         'allow_download' => 'Show Download',
         'show_degraded' => 'Show Degraded',
         'future_children_show_name' => 'Show Name',
         'future_children_show_meta' => 'Show Meta',
         'future_children_show_preview' => 'Show Preview',
         'future_children_allow_download' => 'Show Download',
         'future_children_show_degraded' => 'Show Degraded');
       $flat_visibility = array();
       exhibition_config_flatten_tree($unserialized_visibility,$flat_visibility,$visibility_settings,$root_pid);
       $inserted_records = 0;
       foreach ($flat_visibility as $key => $value) {
	$path = preg_replace('/[\/]/', '_', $key);
	$path_array = explode('_',$path);
	array_pop($path_array);
	$path = implode('_',$path_array);
 	 $pid_visibility = json_encode($value);
	if ($path == ''){
	  $exists = db_query("SELECT 1 FROM {exhibition_config_visibility} WHERE pid = :pid", array(':pid' => $value['pid']))->fetchField();
	}else{
	  $exists = db_query("SELECT 1 FROM {exhibition_config_visibility} WHERE pid = :pid and path = :path", array(':pid' => $value['pid'],':path' => $path))->fetchField();
  }
	if (!$exists) {
        $fields = 
        array(
          'pid',
	  'path', 
          'visibility', 
        );
        $insert_query = db_insert('exhibition_config_visibility')->fields($fields);
        $insert_query->values( 
         array(
           'pid' => $value['pid'],
	   'path' => $path,
           'visibility' => $pid_visibility,
         )
       );
       $new_entry = $insert_query->execute();
	$inserted_records++;
     }
    }
  watchdog("exhibition_config",'exhibition_config visibility update completed. Inserted :' . $inserted_records);
  }
}
			 
}		 
}
    
/*
* Implementation of hook_uninstall().
*/
function exhibition_config_uninstall() {
  $new_roles = _exhibition_config_get_roles_by_name ();
  
  foreach ($new_roles as $r){
    if(user_role_load_by_name($r)){
      user_role_delete($r);
      drupal_set_message(t('Role removed:').$r);
    }else{
      drupal_set_message(t('Expected Role to remove was missing:').$r);
    }
  }
}
function _exhibition_config_install_roles(){
  //Add the role for those that can edit the exhibition configs without being owners
  $new_roles = _exhibition_config_get_roles_by_name ();
  foreach ($new_roles as $r){
    if(!user_role_load_by_name($r)){
      $role = new stdClass();
      $role->name = $r;
      user_role_save($role);
    }
  }
  drupal_set_message(t("Drupal roles installed: '").implode("','",$new_roles)."'");
  return array();

}

function _exhibition_config_get_roles_by_name() {
  // Return role information
  return array (
    'Exhibition Configuration Administrator',
  );
}
