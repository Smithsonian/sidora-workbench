<?php
/*
 * Copyright 2015 Smithsonian Institution.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License.You may obtain a copy of
 * the License at: http://www.apache.org/licenses/
 *
 * This software and accompanying documentation is supplied without
 * warranty of any kind. The copyright holder and the Smithsonian Institution:
 * (1) expressly disclaim any warranties, express or implied, including but not
 * limited to any implied warranties of merchantability, fitness for a
 * particular purpose, title or non-infringement; (2) do not assume any legal
 * liability or responsibility for the accuracy, completeness, or usefulness of
 * the software; (3) do not represent that use of the software would not
 * infringe privately owned rights; (4) do not warrant that the software
 * is error-free or will be maintained, supported, updated or enhanced;
 * (5) will not be liable for any indirect, incidental, consequential special
 * or punitive damages of any kind or nature, including but not limited to lost
 * profits or loss of data, on any basis arising from contract, tort or
 * otherwise, even if any of the parties has been warned of the possibility of
 * such loss or damage.
 *
 *
 * This distribution includes several third-party libraries, each with their own
 * license terms. For a complete copy of all copyright and license terms, including
 * those of third-party libraries, please see the product release notes.
 */

defined("SIDORA_EMAMMAL_OPT_IN_TAG") or define('SIDORA_EMAMMAL_OPT_IN_TAG',"recordIdOI");

/*
 * hook_init
 * run on every drupal call, loads items that the rest of the code needs
 */
function sidora_emammal_init() {
  drupal_add_css(drupal_get_path('module','sidora_emammal') . '/css/sidora_emammal.css', array('weight' => 10000, 'group' => CSS_THEME));
}


/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function sidora_emammal_help($path, $arg) {
  switch ($path) {
    case "admin/help#sidora":
      $output =  '<p>' . t("Sidora eMammal") . '</p>';
      $output .=  '<p>' . t("Smithsonian Institution's module to integrate eMammal Wildlife Insights with SIdora workbench.") . '</p>';
      return $output;
      break;
  }
}

/**
 * Implements hook_menu().
 */
function sidora_emammal_menu() {
  return array(
    'admin/sidora_emammal/configure' => array(
      'title' => 'Sidora Configuration',
      'description' => 'Configure the Sidora eMammal Module.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('sidora_emammal_admin_settings'),
      'access arguments' => array('administer site configuration'),
      'file' => 'sidora_emammal.admin.inc',
      'type' => MENU_NORMAL_ITEM,
    ),
    'admin/sidora_emammal/test' => array(
      'title' => 'eMammal Administrative test functions',
      'page callback' => 'sidora_emammal_test',
      'access arguments' => array('administer site configuration'),
      'type' => MENU_CALLBACK,
    ),
  );
}
function sidora_emammal_test($method = '', $data = '', $data2 = '', $data3 = ''){
  switch ($method) {
    case 'wi_curl':
      echo '<pre>';
      $curl_return = sidora_emammal_wi_curl(
        'https://staging.api.wildlifeinsights.org/v1/auth/sign-in',
        json_encode(array('email' => 'vizz@info.com', 'password' => '1234')),
        'POST',
        FALSE
      );
      var_dump($curl_return);
      echo($curl_return);
      break;
    case 'token':
      $token = sidora_emammal_get_wi_token();
      print($token);

      break;
    case 'initialize':
      echo 'Start<br>';
      echo      sidora_emammal_wi_org_init();
      echo '<br>End';
      break;
    case 'createProj':
      $obj = sidora_obj($data);
      $wi_id = sidora_emammal_wi_create_project($obj, TRUE); 
      var_dump($wi_id);
      break;
    case 'wi_id':
      $obj = sidora_obj($data);
      $wi_id = sidora_emammal_wi_get_id($obj, $data2);
      var_dump($wi_id);
      echo $obj['SIDORA']->content;
      break;
    case 'add_wi_id':
      $obj = sidora_obj($data);
      sidora_emammal_add_wi_id_to_sidora_ds($obj, $data2, $data3);
      echo $obj['SIDORA']->content;
      break;
    case 'dus':
      $obj = sidora_obj($data);
      $us = sidora_emammal_wi_deployment_update_strings($obj);
      echo json_encode($us);
      break;
    case 'get_project_wi_id':
      echo 'Start<br>';
      $obj = sidora_obj($data);
      echo sidora_emammal_get_project_wi_id($obj);
      echo '<br>End';
      break;
    case 'get_deployment_wi_id':
      echo 'Start<br>';
      $obj = sidora_obj($data);
      echo sidora_emammal_get_deployment_wi_id($obj);
      echo '<br>End';
      break;
    case 'get_wi_type':
      echo 'Start<br>';
      $obj = sidora_obj($data);
      echo json_encode(sidora_emammal_get_wi_type($obj));
      echo '<br>End';
      break;
    case 'createSeq':
      echo 'Start<br>';
      $obj = sidora_obj($data);
      $seq_id = sidora_emammal_wi_create_sequence($obj);
      echo $seq_id;
      echo '<br>End';
      break;
    case 'createDf':
      echo 'Start<br>';
      $obj = sidora_obj($data);
      $df = sidora_emammal_wi_create_datafile($obj, TRUE);
      echo $df;
      echo '<br>End';
      break;
    default:
      echo "No function to test";
    // testing end
  }
  exit();
}











/*****************************************************************************
 *****************************************************************************
 *****************************************************************************
 *** GENERIC SECTION
 *** These functions are for all aspects of obtaining information
 *** for WI
 *****************************************************************************
 *****************************************************************************
 ****************************************************************************/

/**
 * Returns the Wildlife Insights ID
 * $emammal_obj = the Islandora object to obtain the id from, or the pid
 * $subtype = the wi_id to return for subtypes, like location for project
 * $emammal_id = emammal's identifier, used to determine when multiple exist of the same subtype
 */
function sidora_emammal_wi_get_id($emammal_obj, $subtype = '', $emammal_id = ''){
  if (is_string($emammal_obj)){
    $emammal_obj = sidora_obj($emammal_obj);
  }
  // See if there is already a Wildlife Insights ID present (Stored in eMammal's SIDORA datastream if it exists)
  $org_id = NULL;
  $sidora_ds = $emammal_obj['SIDORA'];
  $creating_sidora = empty($sidora_ds);
  if (!$creating_sidora){
    $doc = new DOMDocument();
    $docToLoad = ('<?xml version="1.0" encoding="UTF-8"?'.'>'.$emammal_obj['SIDORA']->content);
    $doc->loadXML($docToLoad);
    $existing_wi_id_nodes = $doc->getElementsByTagName("wi_id");
    // If there is more than one, return the one
    foreach($existing_wi_id_nodes as $exister){
      $saved_type = $exister->getAttribute('subtype');
      if (empty($subtype) && empty($saved_type)){
        $org_id = $exister->nodeValue;
      }
      elseif ($subtype == $saved_type){
        $saved_emammal_id = $exister->getAttribute('emammal_id');
        if (empty($emammal_id) && empty($saved_emammal_id)){
          $org_id = $exister->nodeValue;
        }
        elseif ($emammal_id == $saved_emammal_id){
          $org_id = $exister->nodeValue;
        }
      }
    }
  }
  return $org_id;
}

/**
 * Returns the Wildlife Insights ID or creates the object and then returns the WI ID
 * $emammal_obj = the Islandora object to obtain the id from, or the pid
 * $create_type = the type of object to create for this if the ID is not found, leave empty if no object should be created
 * $subtype = the wi_id to return for subtypes, like location for project
 * TODO: Vestigial? Remove?
function sidora_emammal_wi_create_if_not_exist($emammal_obj, $create_type = NULL, $subtype = ''){
  $org_id = sidora_emammal_wi_get_id($emammal_obj, $subtype);
  if (empty($org_id) && !(empty($create_type) && empty($subtype))){
    // No ID, need to create it if the create type is there
    $org_id =  sidora_emammal_wi_create($emammal_obj, $create_type, $subtype);
    sidora_emammal_add_wi_id_to_sidora_ds($emammal_obj, $org_id, $subtype);
  }
  return $org_id;
}
 */

/**
 * Adds a Wildlife Insights ID to the SIDORA datastream of the object, overwriting existing ones
 * $emammal_obj = the Islandora object to add this WI onto
 * $org_id = the WI Id
 * $subtype = the wi_id subtype, like location for project
 * $emammal_id = eMammal's original ID (e.g. sequence number is d21021s99) to differentiate subtype ids
 */
function sidora_emammal_add_wi_id_to_sidora_ds($emammal_obj, $org_id, $subtype = '', $emammal_id = ''){
  $sidora_ds = $emammal_obj['SIDORA'];
  $creating_sidora = empty($sidora_ds);
  $doc = new DOMDocument();
  if ($creating_sidora){
    watchdog("sidora_emammal", t("Creating SIdora datastream for object: %pid", array("%pid" => $emammal_obj->id)));
    $docToLoad = ('<?xml version="1.0" encoding="UTF-8"?'.'>'.'<sidora></sidora>');
  }
  else {
    $docToLoad = ('<?xml version="1.0" encoding="UTF-8"?'.'>'.$emammal_obj['SIDORA']->content);
  }
  $doc->loadXML($docToLoad);
  $node = $doc->createElement('wi_id');
  if (!empty($subtype)){
    $node->setAttribute('subtype', $subtype);
  }
  if (!empty($emammal_id)){
    $node->setAttribute('emammal_id', $emammal_id);
  }
  $node->nodeValue = $org_id;
  $sidora_node = $doc->getElementsByTagName('sidora');
  // Remove existing IDs of the same type
  $existing_wi_id_nodes = $doc->getElementsByTagName("wi_id");
  foreach($existing_wi_id_nodes as $to_remove){
    $saved_type = $to_remove->getAttribute('subtype');
    if (empty($subtype) && empty($saved_type)){
      $sidora_node->item(0)->removeChild($to_remove);
    }
    elseif ($subtype == $saved_type){
      $saved_emammal_id = $to_remove->getAttribute('emammal_id');
      if (empty($emammal_id) && empty($saved_emammal_id)){
        $sidora_node->item(0)->removeChild($to_remove);
      }
      elseif ($emammal_id == $saved_emammal_id){
        $sidora_node->item(0)->removeChild($to_remove);
      }
    }
  }
  $sidora_node->item(0)->appendChild($node);
  $new_content =  $doc->saveXML($sidora_node->item(0));
  $saved = sidora_update_datastream($emammal_obj, $new_content, 'SIDORA', NULL, NULL, 'X');
  return $saved;
}

/**
 * Remove the specified wi_id from the object
 */
function sidora_emammal_remove_wi_id($emammal_obj, $wi_id){
  sidora_emammal_debug("Remove this WI id:" . $wi_id);
  $sidora_ds = $emammal_obj['SIDORA'];
  if ( empty($sidora_ds) ) {
    sidora_emammal_debug("No SIDORA datastream to remove the WI ID from");
    // Nothing to do here...
    return TRUE;
  }
  
  $doc = new DOMDocument();
  $docToLoad = ('<?xml version="1.0" encoding="UTF-8"?'.'>'.$emammal_obj['SIDORA']->content);
  $doc->loadXML($docToLoad);
  $sidora_node = $doc->getElementsByTagName('sidora');
  // Remove existing IDs of the same type
  $existing_wi_id_nodes = $doc->getElementsByTagName("wi_id");
  foreach($existing_wi_id_nodes as $to_remove){
    sidora_emammal_debug("Check:" . $to_remove->nodeValue);
    if ($to_remove->nodeValue == $wi_id){
      $sidora_node->item(0)->removeChild($to_remove);
    }
  }
  $new_content =  $doc->saveXML($sidora_node->item(0));
  $saved = sidora_update_datastream($emammal_obj, $new_content, 'SIDORA', NULL, NULL, 'X');
  return $saved;
}

/**
 * Returns the WI token if we have one in the cache or creates one and returns it
 */
function sidora_emammal_get_wi_token(){
  $token = sidora_emammal_get_cache('token');
  if (empty($token)){
    $token_url = variable_get('sidora_emammal_wi_token_url', '');
    if (empty($token_url)){
      return "";
    }
    $curl_return = sidora_emammal_wi_curl(
      $token_url, //'https://staging.api.wildlifeinsights.org/v1/auth/sign-in',
      variable_get('sidora_emammal_wi_sign_in', ''),
      'POST',
      FALSE
    );
    $token_obj = json_decode($curl_return, TRUE);
    if (empty($token_obj['token'])){
      watchdog('Sidora_emammal',t("Could not get authentication token from WI"));
      return "";
    }
    $token = $token_obj['token'];
    // Assume the token will be valid for 12 hours
    cache_set('sidora_emammal:token', $token, 'cache', time()+12*60*60);
  }
  return $token;
}

/*
 * Wrapper for cache getting
 * @param: key - an arbitrary name given to the cached data
 * @return: the cached data, but only if not expired
 */
function sidora_emammal_get_cache($key = 'token'){
  $data = NULL;
  // get cache
  $cache = cache_get('sidora_emammal:'.$key);
  if ($cache && (time() < $cache->expire))
  {
    $data = $cache->data;
  }
  return $data;
}

/**
 * Helper method to call the WI API
 */
function sidora_emammal_wi_curl($url, $data = '', $method = "POST", $include_bearer = TRUE){
  $curl = curl_init();
  $header_array = array(
    'Content-Type: application/json',
  );
  sidora_emammal_debug("curl inited, header_array started");
  if ($include_bearer){
    sidora_emammal_debug("Bearer for url:" . $url);
    $header_array[] = 'Authorization: Bearer ' . sidora_emammal_get_wi_token();
  }
  sidora_emammal_debug("curl method:" . $method);
  if ($method == 'POST'){
    sidora_emammal_debug("POSTing...");
    curl_setopt($curl, CURLOPT_POST, 1);
    sidora_emammal_debug("POSTing adding data...");
    curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
    sidora_emammal_debug("POSTing setting length...");
    $header_array[] = 'Content-Length: ' . strlen($data);
    sidora_emammal_debug("POSTing header array set:" . json_encode($header_array));
  }
  elseif ($method == 'DELETE'){
    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'DELETE');
  }
  elseif ($method == 'PATCH'){
    curl_setopt($curl, CURLOPT_CUSTOMREQUEST, 'PATCH');
    curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
    $header_array[] = 'Content-Length: ' . strlen($data);
  }
  sidora_emammal_debug("About to set header_array:" . json_encode($header_array));
  curl_setopt($curl, CURLOPT_HTTPHEADER, $header_array);
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  sidora_emammal_debug("About to curl:" . $url);
  $result = curl_exec($curl);
  //$all_info = curl_getinfo($curl);
  //var_dump($all_info);
  curl_close($curl);
  //echo $result; 
  return $result;
}
/**
 * Intended to be the main method used to access the api
 * $call_name - should be the full call including WI IDs ("/project/2345345/deployment/3456543" for a deployment)
 * $data - full string of data or an object which will be run through json_encode 
 * $method_override - will be used for PATCH or DELETE instead of POST or GET
 */
function sidora_emammal_wi_api_call($call_name, $data = NULL, $method_override = NULL){
  $method = 'POST';
  if ($data == NULL){
    $method = 'GET';
  }
  else {
    if (!is_string($data)){
      $data = json_encode($data);
    }
  }
  if ($method_override != NULL){
    $method = $method_override;
  }
  $url = variable_get('sidora_emammal_wi_base_url', '') . $call_name;
  sidora_emammal_debug("api call, url:" . $url);
  return sidora_emammal_wi_curl($url, $data, $method);
}

/**
 * Helper function to pull out an ID from a wi api call return data
 * returns NULL if not found
 */
function sidora_emammal_wi_helper_pull_id($data){
  if (is_string($data)){
    $data = json_decode($data);
  }
  if (is_array($data)){
    if (empty($data['id'])){
      return NULL;
    }
    return $data['id'];
  }
  if (is_object($data)){
    if (property_exists($data, 'id')){
      return $data->id;
    }
    return NULL;
  }
  return NULL;
}

function sidora_emammal_debug($output){
  //if (FALSE)
    watchdog("emammal_debug", $output);
}

/*****************************************************************************
 *****************************************************************************
 *****************************************************************************
 *** CONTROLLER SECTION
 *** These dispense out to the specific calls
 *** 
 *****************************************************************************
 *****************************************************************************
 ****************************************************************************/

/**
 * Direct the delete of all types
 * $type - the WI type
 * $subtype - the WI type to update that is not a direct representation of the base_obj
 *    e.g. location created for a project
 * $base_obj - the Fedora object to use for deletion information
 */
function sidora_emammal_wi_delete($base_obj = NULL, $type = '', $subtype = ''){
  sidora_emammal_debug( "delete:" . $base_obj->id);
  $to_return = NULL;
  if ($type == 'organization'){
    // TBD / TODO
  }
  if ($type == 'project'){
    // delete all the deployments under it
    $subprojects = array();
    $children_concepts = $base_obj->relationships->get(FEDORA_RELS_EXT_URI, 'hasConcept');
    foreach($children_concepts as $child_rel) {
      $to_check_pid = $child_rel['object']['value'];
      $subprojects[] = sidora_obj($to_check_pid);
    }
    sidora_emammal_debug("Num subprojects:" . sizeof($subprojects));
    $deployments = array();
    foreach($subprojects as $subproject){
      $children_concepts = $subproject->relationships->get(FEDORA_RELS_EXT_URI, 'hasConcept');
      sidora_emammal_debug("Subproject children:" . json_encode($children_concepts));
      foreach($children_concepts as $child_rel) {
        // This could be a deployment or it could be a plot, check the type
        $to_check_pid = $child_rel['object']['value'];
        sidora_emammal_debug("Checking pid to see if deployment(1):" . $to_check_pid);
        $check_obj = sidora_obj($to_check_pid);
        sidora_emammal_debug("Got a fedora object with id:" . $check_obj->id);
        $check_type = sidora_emammal_get_wi_type($check_obj);
        sidora_emammal_debug("type:" . $check_type);
        if ($check_type == 'deployment'){
          $wi_id = sidora_emammal_wi_get_id($check_obj);
          sidora_emammal_debug("wi id:" . $wi_id);
          if (!empty($wi_id)){
            sidora_emammal_wi_delete($check_obj, 'deployment');
          }
        }
        else {
          // This is a plot, check its children for deployments
          $plot_children_concepts = $check_obj->relationships->get(FEDORA_RELS_EXT_URI, 'hasConcept');
          foreach($plot_children_concepts as $plot_child_rel) {
            $to_check_pid = $plot_child_rel['object']['value'];
            sidora_emammal_debug("Checking pid to see if deployment(2):" . $to_check_pid);
            $check_obj = sidora_obj($to_check_pid);
            if (sidora_emammal_get_wi_type($check_obj) == 'deployment'){
              $wi_id = sidora_emammal_wi_get_id($check_obj);
              if (!empty($wi_id)){
                sidora_emammal_wi_delete($check_obj, 'deployment');
              }
            }
          }
        }
      }
    }
    $to_return = sidora_emammal_wi_delete_project($base_obj);
    if ($to_return){
      watchdog('Sidora_emammal',t(
        "Remove project from WI: %removed",
        array('%removed' => $base_obj->id)
      ));
    }
  }
  if ($type == 'deployment'){
    $to_return = sidora_emammal_wi_delete_deployment($base_obj);
  }
  return $to_return;
}

/**
 * Direct the update of all types
 * $type - the WI type
 * $subtype - the WI type to update that is not a direct representation of the base_obj
 *    e.g. location created for a project
 * $base_obj - the Fedora object to use for creation
 */
function sidora_emammal_wi_update($base_obj = NULL, $type = '', $subtype = ''){
  $to_return = NULL;
  if ($type == 'organization'){
    // TBD / TODO
  }
  if ($type == 'project'){
    $to_return = sidora_emammal_wi_update_project($base_obj);
    // Assume that this is NOT a call to update the children. Those calls should
    // occur that their own level
  }
  return $to_return;
}

/**
 * Direct the creation of all types and handle whatever additional creation of WI
 * objects that needs to happen
 * $type - the WI type
 * $subtype - the WI type to create that is not a direct representation of the base_obj
 *    e.g. location created for a project
 * $base_obj - the Fedora object to use for creation
 * $create_override - normally do not create an object if it already has a WI ID
 *    if TRUE, will create a WI object anyway, and recreate all children
 *    if FALSE, will return the ID of the item, but will continue to create
 *      any children that do not have their WI ID
 */
function sidora_emammal_wi_create($base_obj = NULL, $type = '', $subtype = '', $create_override = FALSE){
  // If creating a project or deployment, also create the tree under it.

  if ($type == 'organization'){
    return sidora_emammal_wi_create_organization();
  }
  if ($type == 'project'){
    sidora_emammal_debug("Create project:" . $type);
    $project_wi_id = sidora_emammal_wi_create_project($base_obj, $create_override);
    // create all the deployments under it
    $subprojects = array();
    $children_concepts = $base_obj->relationships->get(FEDORA_RELS_EXT_URI, 'hasConcept');
    foreach($children_concepts as $child_rel) {
      $to_check_pid = $child_rel['object']['value'];
      $subprojects[] = sidora_obj($to_check_pid);
    }
    $deployments = array();
    foreach($subprojects as $subproject){
      $children_concepts = $subproject->relationships->get(FEDORA_RELS_EXT_URI, 'hasConcept');
      foreach($children_concepts as $child_rel) {
        // This could be a deployment or it could be a plot, check the type
        $to_check_pid = $child_rel['object']['value'];
        $check_obj = sidora_obj($to_check_pid);
        if (sidora_emammal_get_wi_type($check_obj) == 'deployment'){
          $wi_id = sidora_emammal_wi_get_id($check_obj);
          if (empty($wi_id)){
            sidora_emammal_wi_create($check_obj, 'deployment');
          }
        }
        else {
          // This is a plot, check its children for deployments
          $plot_children_concepts = $check_obj->relationships->get(FEDORA_RELS_EXT_URI, 'hasConcept');
          foreach($plot_children_concepts as $plot_child_rel) {
            $to_check_pid = $plot_child_rel['object']['value'];
            $check_obj = sidora_obj($to_check_pid);
            if (sidora_emammal_get_wi_type($check_obj) == 'deployment'){
              $wi_id = sidora_emammal_wi_get_id($check_obj);
              if (empty($wi_id)){
                sidora_emammal_wi_create($check_obj, 'deployment');
              }
            }
          }
        }
      }
    }
    // the deployments are typically the grandchildren of projects
    // find all the subprojects
    // find all the deployments from the subprojects
    // create deployments
    // Do not create any deployments which already have a WI id in their 
    //    SIDORA datastream
  }
  if ($type == 'deployment'){
    sidora_emammal_wi_create_deployment($base_obj, $create_override);
  }
  if ($type == 'sequences'){
    sidora_emammal_wi_create_sequence($base_obj, $create_override);
  }
  return NULL;
}

/*****************************************************************************
 *****************************************************************************
 *****************************************************************************
 *** WI OBJECT: Data Files
 *** These functions deal with Data Files
 *** 
 *****************************************************************************
 *****************************************************************************
 ****************************************************************************/

/* TODO
 * This creates the data file object in WI, and the sequence if needed.
 * The deployment is checked for an existing sequence ID
 *   The most likely reason a sequence ID is in the deployment is if there
 *   are 2+ images in the sequence and one has already been added.
 * Identifiers for eMammal data:
 *   deployment: d21021
 *   sequence:   d21021s99
 *   image:      d21021s99i4
 * It does not create DataFileMetaValue
 * It does not create IdentificationOutputs
 *
 * $base_obj - the Fedora object to use for creation
 * $create_override - normally do not create an object if it already has a WI ID
 *    if TRUE, will create a WI object anyway
 *    if FALSE, will return the ID of the item
 * returns the Wildlife Insights ID of the existing object or newly created object
 */
function sidora_emammal_wi_create_datafile($base_obj, $create_override = FALSE){
  $do_create = $create_override;
  // See if it has a WI id
  $wi_id = sidora_emammal_wi_get_id($base_obj);
  if (empty($wi_id)){
    $do_create = TRUE;
  }
  $proj_id = sidora_emammal_get_project_wi_id($base_obj);
  if (empty($proj_id)){
    sidora_emammal_debug("The project for $base_obj->id is not in WI or does not have opt-in");
    $do_create = FALSE;
  }
  sidora_emammal_debug("Create datafile:" . $do_create);
  if ($do_create){
    $deploy_obj = sidora_emammal_get_deployment_obj($base_obj);
    $deploy_id = sidora_emammal_wi_get_id($deploy_obj);
    $sequence_wi_id = sidora_emammal_wi_create_sequence($base_obj, FALSE, NULL, $deploy_obj);
    $update_info = sidora_emammal_wi_datafile_update_strings($base_obj, $deploy_id, $sequence_wi_id);

    sidora_emammal_debug("update strings:" . json_encode($update_info));
    // Should contain 3 objects, device and location must be entered first so that their ids can be put in the deployment
    $deploy_id = sidora_emammal_get_deployment_wi_id($base_obj);
    $result = sidora_emammal_wi_api_call("project/" . $proj_id . "/deployment/" . $deploy_id . "/data-file", $update_info[0]['json']);
    sidora_emammal_debug("create datafile result::" . $result);
    $datafile_id = sidora_emammal_wi_helper_pull_id($result);
    if (empty($datafile_id)){
      watchdog('Sidora_emammal',t(
        "Tried to create datafile for deployment, but did not get WI ID: %uinfo %result", 
        array('%uinfo' => json_encode($update_info), '%result' => $result)
      ));
    }
    else {
      // datafile created, update the sidora datastream with the result
      sidora_emammal_add_wi_id_to_sidora_ds($base_obj, $datafile_id);
    }
    if (!empty($datafile_id)){ 
      $result = sidora_emammal_wi_api_call("project/" . $proj_id . "/deployment/" . $deploy_id . "/data-file/" . $datafile_id . '/upload-url', $update_info[1]['json']);
      sidora_emammal_debug("create datafile upload result::" . $result);
      // Uploads do not have an ID
    }
    // Now the object is created. Its WI ID is in its SIDORA datastream and
    // in the $wi_id variable
  }
  return $datafile_id;
}
/**
 * Intended to be used as part of the create datafile
 * $base_obj - Image Fedora object
 * $create_override - normally do not create an object if it already has a WI ID
 *    if TRUE, will create a WI object anyway
 *    if FALSE, will return the ID of the item
 * returns the Wildlife Insights ID of the existing object or newly created object
 */
function sidora_emammal_wi_create_sequence($base_obj, $create_override = FALSE, $proj_id = NULL, $deploy_obj = NULL){
  if (empty($proj_id)){
    $proj_id = sidora_emammal_get_project_wi_id($base_obj);
    sidora_emammal_debug("create sequence, got proj id:" . json_encode($proj_id));
  }
  
  if (empty($deploy_obj)){
    sidora_emammal_debug("create sequence, getting deploy obj");
    $deploy_obj = sidora_emammal_get_deployment_obj($base_obj);
    sidora_emammal_debug("create sequence, got deploy obj:" . $deploy_obj);
  }
  sidora_emammal_debug("getting deployment id from deployment object:" . $deploy_obj);
  $deploy_id = sidora_emammal_wi_get_id($deploy_obj);

  sidora_emammal_debug("create sequence, proj id: $proj_id deploy id: $deploy_id");
  // See if the sequence ID already exists on the data file
  $existing_wi_seq_id_from_df = sidora_emammal_wi_get_id($base_obj, 'sequence');


  $content = $base_obj['MODS']->content;
  if (!empty($content)){
    $doc = new DOMDocument();
    $docToLoad = ($content);
    $doc->loadXML($docToLoad);

    $identifier_nodes = $doc->getElementsByTagName("identifier");
    foreach($identifier_nodes as $exister){
      $check_is_seq_id = $exister->getAttribute('type');
      if ($check_is_seq_id == 'Image Sequence ID'){
        $emammal_sequence_id = $exister->nodeValue;
      }
    }
  }
  if (empty($emammal_sequence_id)){
    watchdog('Sidora_emammal', t(
      "Wildlife Insights Sequence ID missing eMammal sequence id for: %pid",
      array('%pid' => $base_obj->id)
    ));
    return NULL;
  }

  $existing_wi_seq_id_from_deploy = sidora_emammal_wi_get_id($deploy_obj, 'sequence', $emammal_sequence_id);

  // If there is a sequence id on the datafile does not match the one on the deployment, this is an error!
  if (!empty($existing_wi_seq_id_from_df) && !empty($existing_wi_seq_id_from_deploy) && 
    $existing_wi_seq_id_from_df != $existing_wi_seq_id_from_deploy
  ){
    watchdog('Sidora_emammal', t(
      "Wildlife Insights Sequence IDs between a data file and deployment mismatch: DF: %df Deploy: %dep",
      array('%df' => $base_obj->id, '%dep' => $deploy_obj->id)
    ));
    return NULL;
  }

  if (!$create_override){
    // If both are the same, sequence is already existing
    if (!empty($existing_wi_seq_id_from_df) && $existing_wi_seq_id_from_df == $existing_wi_seq_id_from_deploy){
      return $existing_wi_seq_id_from_df;
    }
    // If df has it but deployment does not, add info to deployment
    if (!empty($existing_wi_seq_id_from_df) && empty($existing_wi_seq_id_from_deploy)){
      $wi_sequence_id = $existing_wi_seq_id_from_df;
      sidora_emammal_add_wi_id_to_sidora_ds($deploy_obj, $wi_sequence_id, 'sequence', $emammal_sequence_id);
      return $wi_sequence_id;
    }
    // If deploy has it but df does not (happens often), add info to df
    if (!empty($existing_wi_seq_id_from_df) && empty($existing_wi_seq_id_from_deploy)){
      $wi_sequence_id = $existing_wi_seq_id_from_deploy;
      sidora_emammal_add_wi_id_to_sidora_ds($base_obj, $wi_sequence_id, 'sequence');
      return $wi_sequence_id;
    }
  }
  sidora_emammal_debug("create sequence, existing ids df: $existing_wi_seq_id_from_df deploy: $existing_wi_seq_id_from_deploy");
 
  // If both empty or create_override then create a new sequence
  $seq_obj = array(
    'name' => $emammal_sequence_id,
    'controlField' => '',
    'rule' => 0,
    'remarks' => '',
    'sequenceIdentifier' => $emammal_sequence_id
  );
  $seq_json_string = json_encode($seq_obj);
  $result = sidora_emammal_wi_api_call("project/" . $proj_id . "/deployment/" . $deploy_id . "/sequence", $seq_json_string);
  sidora_emammal_debug("create sequence result::" . $result);
  $wi_sequence_id = sidora_emammal_wi_helper_pull_id($result);
  if (empty($wi_sequence_id)){
    watchdog('Sidora_emammal',t(
      "Tried to create sequence for data file, but did not get WI ID: %uinfo %result", 
      array('%uinfo' => $seq_json_string, '%result' => $result)
    ));
  }
  else {
    // sequence created, update the sidora datastream with the result
    sidora_emammal_add_wi_id_to_sidora_ds($base_obj, $wi_sequence_id, 'sequence');
    // update the deployment with the wi sequence id so that it can be used by other data files
    sidora_emammal_add_wi_id_to_sidora_ds($deploy_obj, $wi_sequence_id, 'sequence', $emammal_sequence_id);
    return $wi_sequence_id;
  }
  return NULL;
}

/**
 * Returns an array of objects to use to update or create project and location in WI
 * the array looks like this:
 * $returned = array(
 *   [0] => array("wi_type" => "datafile",  "json" => $creation_string),
 *   [1] => array("wi_type" => "upload",  "json" => $upload_creation_string),
 * );
 */
function sidora_emammal_wi_datafile_update_strings($base_obj, $deployment_id = '', $sequence_id = ''){
  $to_return = array();
  $content = $base_obj['MODS']->content;
  if (!empty($content)){
    $doc = new DOMDocument();
    $docToLoad = ($content);
    $doc->loadXML($docToLoad);

    $emammal_image_id = "";
    $identifier_nodes = $doc->getElementsByTagName("identifier");
    foreach($identifier_nodes as $exister){
      $check_is_seq_id = $exister->getAttribute('type');
      if ($check_is_seq_id == 'Image ID'){
        $emammal_image_id = $exister->nodeValue;
      }
    }
    $index_i = strrpos($emammal_image_id, 'i');
    $image_sequence_position = substr($emammal_image_id, $index_i);
    $creation_obj = array(
      "noCV" => "",
      "position" => intval($image_sequence_position),
      "sequenceId" => $sequence_id
    );
    $creation_string = json_encode($creation_obj);

    global $base_url;
    $upload_url_obj = array(
      "fileName" => $emammal_image_id,
      "contentType" => "image/jpeg",
      "clientId" => "eMammal",
      "url" => $base_url . "/sidora/info/" . $base_obj->id . "/meta/OBJ/" . $emammal_image_id . ".jpg"
    );
  }
  $to_return[] = array("wi_type" => "datafile", "json" => $creation_string);
  $to_return[] = array("wi_type" => "upload-url", "json" => $creation_string);
  return $to_return;
}
/** TODO
 * Deletes this deployment, device and location ONLY from the WI API
 * Assume the children get deleted by this function's caller
 */
function sidora_emammal_wi_delete_datafile($base_obj){
  sidora_emammal_debug("Starting delete deployment...");
  
  if (!is_object($base_obj)){
    watchdog('Sidora_emammal',t(
      "Tried to delete deployment, but did not have a valid object: %encoded", 
      array('%encoded' => json_encode($base_obj))
    ));
    return FALSE;
  }
  sidora_emammal_debug("Getting base_obj id");
  $wi_id = sidora_emammal_wi_get_id($base_obj);
  sidora_emammal_debug("base_obj id:" . $wi_id);
  if (empty($wi_id)){
    watchdog('Sidora_emammal',t(
      "Tried to delete deployment, but did not have a WI ID in SIDORA: %pid", 
      array('%pid' => $base_obj->id)
    ));
    return FALSE;
  }
  sidora_emammal_debug("Getting location id");
  $loc_wi_id = sidora_emammal_wi_get_id($base_obj, 'location');
  eidora_emammal_debug("location id:" . $loc_wi_id);
  if (empty($loc_wi_id)){
    watchdog('Sidora_emammal',t(
      "Tried to delete deployment location, but did not have a WI ID in SIDORA: %pid", 
      array('%pid' => $base_obj->id)
    ));
    return FALSE;
  }
  sidora_emammal_debug("Getting device id");
  $device_wi_id = sidora_emammal_wi_get_id($base_obj, 'device');
  sidora_emammal_debug("device id:" . $device_wi_id);
  if (empty($device_wi_id)){
    watchdog('Sidora_emammal',t(
      "Tried to delete deployment device, but did not have a WI ID in SIDORA: %pid", 
      array('%pid' => $base_obj->id)
    ));
    return FALSE;
  }
  $proj_id = sidora_emammal_get_project_wi_id($base_obj);
  if (empty($proj_id)){
    watchdog('Sidora_emammal',t(
      "Tried to delete deployment, but did not have an associated PROJECT WI ID in SIDORA: %pid", 
      array('%pid' => $base_obj->id)
    ));
    return FALSE;
  }
  sidora_emammal_debug("Deleting location");
  $call_worked = sidora_emammal_wi_api_call("project/" . $proj_id . "/location" . $loc_wi_id, NULL, 'DELETE');
  sidora_emammal_remove_wi_id($base_obj, $loc_wi_id);
  $org_id = sidora_emammal_wi_get_organization_id();
  sidora_emammal_debug("Deleting device");
  $call_worked = $call_worked && sidora_emammal_wi_api_call("organization/" . $org_id . "/device/" . $device_wi_id, NULL, 'DELETE');
  sidora_emammal_remove_wi_id($base_obj, $device_wi_id);
  sidora_emammal_debug("Deleting deployment");
  $call_worked = $call_worked && sidora_emammal_wi_api_call("project/" . $proj_id . "/deployment/" .  $wi_id, NULL, 'DELETE');
  sidora_emammal_remove_wi_id($base_obj, $wi_id);
  return $call_worked;
}
/**

/*****************************************************************************
 *****************************************************************************
 *****************************************************************************
 *** WI OBJECT: PROJECT AND LOCATION
 *** These functions deal with Project and Location
 *** 
 *****************************************************************************
 *****************************************************************************
 ****************************************************************************/

/*
 * This creates the project object in WI. It will not create any child objects
 * of a project. Does NOT update existing project with new data. ONLY used for
 * creation. This will create the location object in WI
 *
 * $base_obj - the Fedora object to use for creation
 * $create_override - normally do not create an object if it already has a WI ID
 *    if TRUE, will create a WI object anyway
 *    if FALSE, will return the ID of the item
 * returns the Wildlife Insights ID of the existing object or newly created object
 */
function sidora_emammal_wi_create_project($base_obj, $create_override = FALSE){
  $do_create = $create_override;
  // See if it has a WI id
  $wi_id = sidora_emammal_wi_get_id($base_obj);
  if (empty($wi_id)){
    $do_create = TRUE;
  }
  sidora_emammal_debug("Create project?" . $do_create);
  if ($do_create){
    $update_info = sidora_emammal_wi_project_update_strings($base_obj);
    sidora_emammal_debug("update strings:" . json_encode($update_info));
    // Should contain 2 objects, first is the project
    $result = sidora_emammal_wi_api_call("project", $update_info[0]['json']);
    sidora_emammal_debug("create project result::" . $result);
    $proj_id = sidora_emammal_wi_helper_pull_id($result);
    if (empty($proj_id)){
      watchdog('Sidora_emammal',t(
        "Tried to create project, but did not get WI ID: %uinfo %result", 
        array('%uinfo' => json_encode($update_info), '%result' => $result)
      ));
    }
    else {
      // project created, update the sidora datastream with the result
      sidora_emammal_add_wi_id_to_sidora_ds($base_obj, $proj_id);
      $result = sidora_emammal_wi_api_call("project/" . $proj_id . "/location", $update_info[1]['json']);
      $loc_id = sidora_emammal_wi_helper_pull_id($result);
      if (empty($loc_id)){
        watchdog('Sidora_emammal',t(
          "Tried to create location for new project, but did not get location's WI ID: %uinfo %result", 
          array('%uinfo' => json_encode($update_info), '%result' => $result)
        ));
      }
      else {
        sidora_emammal_add_wi_id_to_sidora_ds($base_obj, $loc_id, 'location');
      }
      // Should we still add the project id to the return if location failed? TBD / TODO
      $wi_id = $proj_id;
    }
    // Now the object is created. Its WI ID is in its SIDORA datastream and
    // in the $wi_id variable
  }
  return $wi_id;
}

/**
 * Updates the project that exists in WI.
 */
function sidora_emammal_wi_update_project($base_obj){
  if (!is_object($base_obj)){
    watchdog('Sidora_emammal',t(
      "Tried to update project, but did not have a valid object: %encoded", 
      array('%encoded' => json_encode($base_obj))
    ));
    return FALSE;
  }
  $wi_id = sidora_emammal_wi_get_id($base_obj);
  if (empty($wi_id)){
    watchdog('Sidora_emammal',t(
      "Tried to update project, but did not have a WI ID in SIDORA: %pid", 
      array('%pid' => $base_obj->id)
    ));
    return FALSE;
  }
  $loc_wi_id = sidora_emammal_wi_get_id($base_obj, 'location');
  if (empty($wi_id)){
    watchdog('Sidora_emammal',t(
      "Tried to update project, but did not have a WI ID in SIDORA: %pid", 
      array('%pid' => $base_obj->id)
    ));
    return FALSE;
  }
  
  $update_info = sidora_emammal_wi_project_update_strings($base_obj);
  // Should contain 2 objects, first is the project
  $result = sidora_emammal_wi_api_call("project/" . $wi_id, $update_info[0]['json'], 'PATCH');
  $returned_wi_id = sidora_emammal_wi_helper_pull_id($result);
  if ($returned_wi_id != $wi_id){
    watchdog('Sidora_emammal',t(
      "Tried to update project, but update failed: %res <br>Sent ID: %sent <br> got back: %back",
      array('%res' => $result, '%sent' => $wi_id, '%back' => $returned_wi_id)
    ));
    return FALSE;
  }

  $result = sidora_emammal_wi_api_call("project/" . $wi_id . "/location/" . $loc_wi_id, $update_info[1]['json'], 'PATCH');
  $returned_loc_wi_id = sidora_emammal_wi_helper_pull_id($result);
  if ($returned_loc_wi_id != $loc_wi_id){
    watchdog('Sidora_emammal',t(
      "Tried to update project, but location update failed: %res",
      array('%res' => $result)
    ));
    return FALSE;
  }
  return TRUE;
}

/**
 * Deletes this project and location ONLY from the WI API
 * Assume the children get deleted by this function's caller
 */
function sidora_emammal_wi_delete_project($base_obj){
  sidora_emammal_debug("Starting delete project...");
  
  if (!is_object($base_obj)){
    watchdog('Sidora_emammal',t(
      "Tried to delete project, but did not have a valid object: %encoded", 
      array('%encoded' => json_encode($base_obj))
    ));
    return FALSE;
  }
  sidora_emammal_debug("Getting base_obj id");
  $wi_id = sidora_emammal_wi_get_id($base_obj);
  sidora_emammal_debug("base_obj id:" . $wi_id);
  if (empty($wi_id)){
    watchdog('Sidora_emammal',t(
      "Tried to delete project, but did not have a WI ID in SIDORA: %pid", 
      array('%pid' => $base_obj->id)
    ));
    return FALSE;
  }
  sidora_emammal_debug("Getting location id");
  $loc_wi_id = sidora_emammal_wi_get_id($base_obj, 'location');
  sidora_emammal_debug("location id:" . $loc_wi_id);
  if (empty($wi_id)){
    watchdog('Sidora_emammal',t(
      "Tried to delete project, but did not have a WI ID in SIDORA: %pid", 
      array('%pid' => $base_obj->id)
    ));
    return FALSE;
  }
  sidora_emammal_debug("Deleting location");
  $call_worked = sidora_emammal_wi_api_call("project/" . $wi_id . "/location" . $loc_wi_id, NULL, 'DELETE');
  sidora_emammal_remove_wi_id($base_obj, $loc_wi_id);
  sidora_emammal_debug("Deleting project");
  $call_worked = $call_worked && sidora_emammal_wi_api_call("project/" . $wi_id, NULL, 'DELETE');
  sidora_emammal_remove_wi_id($base_obj, $wi_id);
  return $call_worked;
}
/**
 * Returns an array of objects to use to update or create project and location in WI
 * the array looks like this:
 * $returned = array(
 *   [0] => array("wi_type" => "project",  "json" => $creation_string),
     [1] => array("wi_type" => "location", "json" => $location_string)
 * );
 */
function sidora_emammal_wi_project_update_strings($base_obj){
  $to_return = array();
  $name = $base_obj->label;
  $content = $base_obj['EAC-CPF']->content;
  if (!empty($content)){
    $doc = new DOMDocument();
    $docToLoad = ($content);
    $doc->loadXML($docToLoad);

    $short_nodes = $doc->getElementsByTagName("recordId");
    foreach($short_nodes as $exister){
      $short_name = $exister->nodeValue;
    }

    $status_nodes = $doc->getElementsByTagName("maintenanceStatus");
    foreach($status_nodes as $exister){
      $status = $exister->nodeValue;
    }

    $from_nodes = $doc->getElementsByTagName("fromDate");
    foreach($from_nodes as $exister){
      $from_date = $exister->nodeValue;
    }

    $to_nodes = $doc->getElementsByTagName("toDate");
    foreach($to_nodes as $exister){
      $to_date = $exister->nodeValue;
    }

    $ne_nodes = $doc->getElementsByTagName("nameEntry");
    foreach($ne_nodes as $exister){
      $check_is_abbr = $exister->getAttribute('localType');
      if ($check_is_abbr == "abbreviation"){
        foreach($exister->childNodes as $part){ 
          $abbr = $part->nodeValue;
        }
      }
    }

    $func_nodes = $doc->getElementsByTagName("function");
    $remarks = '';
    $objectives = '';
    $data_access = '';
    $acknow = '';
    $design = '';
    foreach($func_nodes as $exister){
      $term = '';
      $dnote = '';
      foreach($exister->childNodes as $func_part){
        if($func_part->nodeType == XML_ELEMENT_NODE) {
          // See which kind of function this is
          if ($func_part->tagName == 'term'){
            $term = $func_part->nodeValue;
          }
          if ($func_part->tagName == 'descriptiveNote'){
            // We want the full html but not the outer spacing from the XML pretty printing
            $dnote_children = $func_part->childNodes;
            $dnote = '';
            foreach($dnote_children as $dnote_child){
              $dnote .= $doc->saveXML($dnote_child);
            }
            $dnote = trim($dnote);
          }
        }
      }
      if ($term == 'Project Objectives'){
        $objectives .= $dnote;
      }
      if ($term == 'Project Data Access and Use Constraints'){
        $data_access .= $dnote;
      }
      if ($term == 'Project Acknowledgements'){
        $acknow .= $dnote;
      }
      if ($term == 'Project Design'){
        $design .= $dnote;
      }
      if ($term == ''){
        $remarks .= $dnote;
      }
    }

    $place_entry_nodes = $doc->getElementsByTagName("placeEntry");
    $proj_loc = '';
    $region = '';
    $country = '';
    $lat = '';
    $long = '';
    foreach($place_entry_nodes as $exister){
      $local_type = $exister->getAttribute('localType');
      if ($local_type == 'address'){
        $proj_loc = $exister->nodeValue;
      }
      elseif ($local_type == 'region'){
        $region = $exister->nodeValue;
      }
      else {
        $c_country = $exister->getAttribute('countryCode');
        $c_lat = $exister->getAttribute('latitude');
        $c_long = $exister->getAttribute('longitude');
        $country = empty($c_country)?$country:$c_country;
        $lat     = empty($c_lat)?    $lat    :$c_lat;
        $long    = empty($c_long)?   $long   :$c_long;
      }
    }
    
    $creation_obj = array(
     'name' => $name,
     'abbreviation' => $abbr,
     'shortName' => $short_name,
     'design' => $design,
     'objectives' => $objectives,
     'rightsHolder' => '',
     'accessRights' => $data_access,
     'projectUrl' => '',
     'projectStatus' => $status,
     'methodology' => '',
     'startDate' => $from_date, //array(),
     'endDate' => $to_date, //array(),
     'remarks' => $remarks,
     'projectCreditLine' => '',
     'acknowledgements' => $acknow,
     'dataCitation' => '',
     'embargo' => 0,
     'dataUse' => 0,
     'tags' => array(),
    );
    $creation_string = json_encode($creation_obj);

    $location_obj = array(
      "latitude" => $lat,
      "longitude" => $long,
      "placename" => $proj_loc,
      "propertyType" => "",
      "habitat" => "",
      "remarks" => "",
      "plotTreatment" => "",
      "plotTreatmentDescription" => "",
      "geodeticDatum" => "",
      "fieldNumber" => "",
      "country" => $country,
      "firstOrderDivision" => $region,
      "secondOrderDivision" => "",
      "landcoverType" => "",
      "igbpClimateClassification" => "",
      "elevationGtopo30" => 0
    );

    $location_string = json_encode($location_obj);
  }
  $to_return[] = array("wi_type" => "project", "json" => $creation_string);
  $to_return[] = array("wi_type" => "location", "json" => $location_string);
  return $to_return;
}

/*****************************************************************************
 *****************************************************************************
 *****************************************************************************
 *** WI OBJECT: DEPLOYMENT
 *** These functions deal with Deployment
 *** 
 *****************************************************************************
 *****************************************************************************
 ****************************************************************************/

/*
 * This creates the deployment object in WI. It will not create any child objects
 * of a deployment. Does NOT update existing deployments with new data. ONLY used for
 * creation. This will create the device object in the WI as well
 *
 * $base_obj - the Fedora object to use for creation
 * $create_override - normally do not create an object if it already has a WI ID
 *    if TRUE, will create a WI object anyway
 *    if FALSE, will return the ID of the item
 * returns the Wildlife Insights ID of the existing object or newly created object
 */
function sidora_emammal_wi_create_deployment($base_obj, $create_override = FALSE){
  $do_create = $create_override;
  // See if it has a WI id
  $wi_id = sidora_emammal_wi_get_id($base_obj);
  if (empty($wi_id)){
    $do_create = TRUE;
  }
  $proj_id = sidora_emammal_get_project_wi_id($base_obj);
  if (empty($proj_id)){
    sidora_emammal_debug("The project for $base_obj->id is not in WI or does not have opt-in");
    $do_create = FALSE;
  }
  sidora_emammal_debug("Create deployment:" . $do_create);
  if ($do_create){
    $update_info = sidora_emammal_wi_deployment_update_strings($base_obj);
    sidora_emammal_debug("update strings:" . json_encode($update_info));
    // Should contain 3 objects, device and location must be entered first so that their ids can be put in the deployment
    $org_id = sidora_emammal_wi_get_organization_id();
    $result = sidora_emammal_wi_api_call("organization/" . $org_id . "/device", $update_info[1]['json']);
    sidora_emammal_debug("create device result::" . $result);
    $device_id = sidora_emammal_wi_helper_pull_id($result);
    if (empty($device_id)){
      watchdog('Sidora_emammal',t(
        "Tried to create device for deployment, but did not get WI ID: %uinfo %result", 
        array('%uinfo' => json_encode($update_info), '%result' => $result)
      ));
    }
    else {
      // device created, update the sidora datastream with the result
      sidora_emammal_add_wi_id_to_sidora_ds($base_obj, $device_id, 'device');
    }
    // Create the location TBD TODO BBB
    $loc_id = NULL;
    if (!empty($device_id)){ 
      $result = sidora_emammal_wi_api_call("project/" . $proj_id . "/location", $update_info[2]['json']);
      $loc_id = sidora_emammal_wi_helper_pull_id($result);
      if (empty($loc_id)){
        watchdog('Sidora_emammal',t(
          "Tried to create location for new deployment, but did not get location's WI ID: %uinfo %result", 
          array('%uinfo' => json_encode($update_info), '%result' => $result)
        ));
      }
      else {
        sidora_emammal_add_wi_id_to_sidora_ds($base_obj, $loc_id, 'location');
      }
    }
    if (!empty($loc_id)){ 
      // Put in the location and device ids to the deployment
      $deployment_obj = json_decode($update_info[0]['json'], TRUE);
      $deployment_obj["deviceId"] = $device_id;
      $deployment_obj["locationId"] = $loc_id;
      $deployment_json = json_encode($deployment_obj);
      $result = sidora_emammal_wi_api_call("project/" . $proj_id . "/deployment", $deployment_json);
      $deployment_id = sidora_emammal_wi_helper_pull_id($result);
      if (empty($deployment_id)){
        watchdog('Sidora_emammal',t(
          "Tried to create deployment, but did not get deployment's WI ID: %uinfo %result", 
          array('%uinfo' => json_encode($update_info), '%result' => $result)
        ));
      }
      else {
        sidora_emammal_add_wi_id_to_sidora_ds($base_obj, $deployment_id);
      }
      $wi_id = $deployment_id;
    }
    // Now the object is created. Its WI ID is in its SIDORA datastream and
    // in the $wi_id variable
  }
  return $wi_id;
}

/**
 * Returns an array of objects to use to update or create project and location in WI
 * the array looks like this:
 * $returned = array(
 *   [0] => array("wi_type" => "deployment",  "json" => $creation_string),
 *   [1] => array("wi_type" => "device",  "json" => $dev_creation_string),
 *   [2] => array("wi_type" => "location",  "json" => $loc_creation_string),
 * );
 */
function sidora_emammal_wi_deployment_update_strings($base_obj){
  $to_return = array();
  $name = $base_obj->label;
  $content = $base_obj['FGDC']->content;
  if (!empty($content)){
    // The information to fill in:
    $deployment_id = '';
    $deployment_name = '';
    $sensor_resolution = '';
    $sensor_sensitivity = '';
    $start_date_time = '';
    $end_date_time = '';
    $remarks = '';
    $detection_distance = 0;
    $quiet_period = 0;
    $lat = "";
    $long = "";
    $camera_id = "";
    $camera_make = "";
    $camera_model = "";

    $doc = new DOMDocument();
    $docToLoad = ($content);
    $doc->loadXML($docToLoad);

    $di_nodes = $doc->getElementsByTagName("othercit");
    foreach($di_nodes as $exister){
      $deployment_id = $exister->nodeValue;
    }

    $title_nodes = $doc->getElementsByTagName("title");
    foreach($title_nodes as $exister){
      $deployment_name = $exister->nodeValue;
    }

    $start_date_time_nodes = $doc->getElementsByTagName("begdate");
    foreach($start_date_time_nodes as $exister){
      $start_date_time = $exister->nodeValue;
    }

    $end_date_time_nodes = $doc->getElementsByTagName("enddate");
    foreach($end_date_time_nodes as $exister){
      $end_date_time = $exister->nodeValue;
    }

    $attrlabl_nodes = $doc->getElementsByTagName("attrlabl");
    foreach($attrlabl_nodes as $exister){
      $label_value = $exister->nodeValue;
      $attr_node = $exister->parentNode;
      foreach($attr_node->childNodes as $attr_child_node){
        if($attr_child_node->nodeType == XML_ELEMENT_NODE) {
          if ($attr_child_node->tagName == 'attrdomv'){
            $domv_child_nodes = $attr_child_node->childNodes;
            foreach($domv_child_nodes as $edom_node){
              if ($edom_node->childNodes !== NULL){
                foreach($edom_node->childNodes as $ecn){
                  if($ecn->nodeType == XML_ELEMENT_NODE) {
                    if ($ecn->tagName == 'edomv'){
                      $value = $ecn->nodeValue;
                      if (empty($value)) $value = '';
                    }
                  }
                }
              }
            }
          }
        }
      }
      if ($label_value == "Image Resolution Setting"){
        $sensor_resolution = $value;
      }
      if ($label_value == "Sensitivity Setting"){
        $sensor_sensitivity = $value;
      }
      if ($label_value == "Detection Distance"){
        $detection_distance = floatval($value);
      }
      if ($label_value == "Quiet Period Setting"){
        $quiet_period = floatval($value);
      }
      if ($label_value == "Actual Latitude"){
        $lat = $value;
      }
      if ($label_value == "Actual Longitude"){
        $long = $value;
      }
      if ($label_value == "Camera ID"){
        $camera_id = $value;
      }
      if ($label_value == "Camera Make"){
        $camera_make = $value;
      }
      if ($label_value == "Camera Model"){
        $camera_model = $value;
      }
    }

    $creation_obj = array(
      "deploymentIdentifier" => $deployment_id,
      "deploymentName" => $deployment_name,
      "sensorHeight" => 0,
      "quietPeriod" => $quiet_period,
      "detectionDistance" => $detection_distance,
      "sampleRate" => '', // No sampleRate
      "sensorOrientation" => '', //No orientation
      "sensorSchedule" => '', //No schedule
      "sensorResolution" => $sensor_resolution, 
      "sensorSensitivity" => $sensor_sensitivity,
      "sensorFailureDetails" => '', /// No failure details
      "sensorEndStatus" => '', // No sensor end status
      "startDatetime" => $start_date_time,
      "endDatetime" => $end_date_time,
      "remarks" => $remarks,
      "sensorId" => 0,
      "deviceId" => 0,
      "baitTypeId" => 0,
      "locationId" => 0,
      "participantSetSensorId" => 0,
      "participantRemoveSensorId" => 0
    );
    $creation_string = json_encode($creation_obj);

    
    $device_obj = array(
      "name" => $camera_id,
      "purchaseDate" => array(),
      "make" => $camera_make,
      "model" => $camera_model,
      "modelNumber" => "",
      "serialNumber" => "",
      "purchaseYear" => 0,
      "purchasePrice" => 0,
      "productUrl" => "",
      "remarks" => "Camera for deployment:" . $deployment_name,
    );

    $device_string = json_encode($device_obj);

    $location_obj = array(
      "latitude" => $lat,
      "longitude" => $long,
      "placename" => "Camera Location for deployment:" . $deployment_name,
      "propertyType" => "",
      "habitat" => "",
      "remarks" => "",
      "plotTreatment" => "",
      "plotTreatmentDescription" => "",
      "geodeticDatum" => "",
      "fieldNumber" => "",
      "country" => "",
      "firstOrderDivision" => "",
      "secondOrderDivision" => "",
      "landcoverType" => "",
      "igbpClimateClassification" => "",
      "elevationGtopo30" => 0
    );

    $location_string = json_encode($location_obj);
  }
  $to_return[] = array("wi_type" => "deployment", "json" => $creation_string);
  $to_return[] = array("wi_type" => "device", "json" => $device_string);
  $to_return[] = array("wi_type" => "location", "json" => $location_string);
  return $to_return;
}
/**
 * Deletes this deployment, device and location ONLY from the WI API
 * Assume the children get deleted by this function's caller
 */
function sidora_emammal_wi_delete_deployment($base_obj){
  sidora_emammal_debug("Starting delete deployment...");
  
  if (!is_object($base_obj)){
    watchdog('Sidora_emammal',t(
      "Tried to delete deployment, but did not have a valid object: %encoded", 
      array('%encoded' => json_encode($base_obj))
    ));
    return FALSE;
  }
  sidora_emammal_debug("Getting base_obj id");
  $wi_id = sidora_emammal_wi_get_id($base_obj);
  sidora_emammal_debug("base_obj id:" . $wi_id);
  if (empty($wi_id)){
    watchdog('Sidora_emammal',t(
      "Tried to delete deployment, but did not have a WI ID in SIDORA: %pid", 
      array('%pid' => $base_obj->id)
    ));
    return FALSE;
  }
  sidora_emammal_debug("Getting location id");
  $loc_wi_id = sidora_emammal_wi_get_id($base_obj, 'location');
  sidora_emammal_debug("location id:" . $loc_wi_id);
  if (empty($loc_wi_id)){
    watchdog('Sidora_emammal',t(
      "Tried to delete deployment location, but did not have a WI ID in SIDORA: %pid", 
      array('%pid' => $base_obj->id)
    ));
    return FALSE;
  }
  sidora_emammal_debug("Getting device id");
  $device_wi_id = sidora_emammal_wi_get_id($base_obj, 'device');
  sidora_emammal_debug("device id:" . $device_wi_id);
  if (empty($device_wi_id)){
    watchdog('Sidora_emammal',t(
      "Tried to delete deployment device, but did not have a WI ID in SIDORA: %pid", 
      array('%pid' => $base_obj->id)
    ));
    return FALSE;
  }
  $proj_id = sidora_emammal_get_project_wi_id($base_obj);
  if (empty($proj_id)){
    watchdog('Sidora_emammal',t(
      "Tried to delete deployment, but did not have an associated PROJECT WI ID in SIDORA: %pid", 
      array('%pid' => $base_obj->id)
    ));
    return FALSE;
  }
  sidora_emammal_debug("Deleting location");
  $call_worked = sidora_emammal_wi_api_call("project/" . $proj_id . "/location" . $loc_wi_id, NULL, 'DELETE');
  sidora_emammal_remove_wi_id($base_obj, $loc_wi_id);
  $org_id = sidora_emammal_wi_get_organization_id();
  sidora_emammal_debug("Deleting device");
  $call_worked = $call_worked && sidora_emammal_wi_api_call("organization/" . $org_id . "/device/" . $device_wi_id, NULL, 'DELETE');
  sidora_emammal_remove_wi_id($base_obj, $device_wi_id);
  sidora_emammal_debug("Deleting deployment");
  $call_worked = $call_worked && sidora_emammal_wi_api_call("project/" . $proj_id . "/deployment/" .  $wi_id, NULL, 'DELETE');
  sidora_emammal_remove_wi_id($base_obj, $wi_id);
  return $call_worked;
}

function sidora_emammal_wi_create_identification_output(){
}
function sidora_emammal_wi_create_datafilemetadatavalues(){
}

/*****************************************************************************
 *****************************************************************************
 *****************************************************************************
 *** WI OBJECT: ORGANIZATION
 *** These functions deal with Organization / eMammal Project Space
 *** 
 *****************************************************************************
 *****************************************************************************
 ****************************************************************************/

/**
 * Return the Project Space object
 */
function sidora_emammal_get_project_space(){
  $id = 'si:121909';
  $emammal_org_obj = sidora_obj($id);
  if (empty($emammal_org_obj) || ($emammal_org_obj->id != $id)){
    watchdog("sidora_emammal",t("Could not find emammal object with pid: %pid", array("%pid" => $id)));
    echo 'eMammal object not found'; 
    exit();
  }
  return $emammal_org_obj;
}

/**
 * Create the organization
 */
function sidora_emammal_wi_org_init($emammal_org_obj = NULL){
  if (empty($emammal_org_obj)){
    $emammal_org_obj = sidora_emammal_get_project_space();
  }
  return sidora_emammal_wi_create($emammal_org_obj, 'organization');
}

/**
 * Get the WI organization ID
 */
function sidora_emammal_wi_get_organization_id(){
  // Cache the WI organization ID so we don't go get it from Fedora every time
  $key = "org_id";
  $cache = cache_get('sidora_emammal:'.$key);
  if ($cache){
    $org_id = $cache->data;
  }
  else {
    $emammal_org_obj = sidora_emammal_get_project_space();
    $org_id = sidora_emammal_wi_get_id($emammal_obj);
    cache_set('sidora_emammal:'.$key, $org_id);
  }
  return $org_id; 
}

/**
 * Ask the WI API to create an organization based on hard-coded values
 */
function sidora_emammal_wi_create_organization(){
  $data = array(
    'name' => 'eMammal Wildlife Insights Integration',
    'streetAddress' => 'unknown', 
    'city' => 'unknown', 
    'state' => 'unknown', 
    'postalCode' => 'unknown', 
    'phone' => 'unknown', 
    'email' => 'unknown', 
    'countryCode' => 'unknown', 
    'organizationUrl' => 'unknown', 
    'remarks' => 'unknown', 
  );
  $result = sidora_emammal_wi_api_call("organization", $data);
  $org_id = sidora_emammal_wi_helper_pull_id($result);
  return $org_id;
}

/*****************************************************************************
 *****************************************************************************
 *****************************************************************************
 *** ISLANDORA HOOKS
 *** Islandora hooks and helper functions for the islandora hooks 
 *** 
 *****************************************************************************
 *****************************************************************************
 ****************************************************************************/
function sidora_emammal_islandora_object_ingested(AbstractObject $object) {
    watchdog('emammal',"1");// . $object['id']);
}
function sidora_emammal_islandora_object_modified(AbstractObject $object) {
    watchdog('emammal',"2");// . $object['id']);
}
function sidora_emammal_islandora_datastream_modified(AbstractObject $object, AbstractDatastream $datastream) {
  sidora_emammal_create_or_update_for_wi_if_needed($object, $datastream);
}
function sidora_emammal_islandora_datastream_ingested(AbstractObject $object, AbstractDatastream $datastream) {
  sidora_emammal_create_or_update_for_wi_if_needed($object, $datastream);
}

function sidora_emammal_create_or_update_for_wi_if_needed(AbstractObject $object, AbstractDatastream $datastream){
  // Do NOT perform updates if the datastream that was updated is SIDORA or DC,
  // We only care if the metadata was updated or if it gained / lost children
  if ($datastream->id == 'SIDORA' || $datastream->id == 'DC'){
    return;
  }
  $opt_in = sidora_emammal_check_opt_in_for_wi($object);
  sidora_emammal_debug("Checking update:" . $object->id . " , opt-in: '" . ($opt_in?"TRUE":"FALSE") . "'");
  if ($opt_in){
    if ($datastream->id == 'RELS-EXT'){
      // Run though all its children trees and update them all
      // But we don't need to update this object
      // TBD
    }
    else {
      sidora_emammal_create_or_update_for_wi($object);
    }
  }
  else {
    $wi_id = sidora_emammal_wi_get_id($object);
    if (!empty($wi_id)){
      sidora_emammal_debug("Opt-out, but has ID:" . $wi_id . " proceeding to remove");
      sidora_emammal_delete_from_wi($object, $wi_id);
    }
  }
  
}

/** 
 * Remove from WI if no longer Opted In
 */
function sidora_emammal_delete_from_wi(AbstractObject $object, $wi_id){
  sidora_emammal_debug("delete from wi, wi_id:" . $wi_id);
  if (!empty($wi_id)){
    $type = sidora_emammal_get_wi_type($object);
    sidora_emammal_wi_delete($object, $type);
  }
  return TRUE;
}

/**
 * Create or Update this item in WI
 */
function sidora_emammal_create_or_update_for_wi(AbstractObject $object){
  // See if it already exists
  $wi_id = sidora_emammal_wi_get_id($object);
  $type = sidora_emammal_get_wi_type($object);
  
  if (empty($wi_id)){
    if (!empty($type)){
      sidora_emammal_debug("Create:" . $type);
      sidora_emammal_wi_create($object, $type);
      // Create the object in WI, sidora_emammal_wi_create will handle children if needed
    }
  }
  else {
    // Update the object in WI, assume its children are unchanged
    if (!empty($type)){
      sidora_emammal_wi_update($object, $type);
    }
  } 
}

/**
 * Helper function to return the base type of the WI object for this Fedora object
 */
function sidora_emammal_get_wi_type($object, $return_distances = FALSE){
  if (empty($object)){
    sidora_emammal_debug("Tried getting type for empty object");
    return NULL;
  }
  if (!is_object($object)){
    sidora_emammal_debug("Tried getting type for non-object:" . json_encode($object));
    return NULL;
  }
  sidora_emammal_debug("Getting type for:" . $object->id);
  $fedora_models_to_wi_type = sidora_emammal_get_fedora_models_to_wi_type();
  $models = ($object->relationships->get('info:fedora/fedora-system:def/model#', 'hasModel'));
  $wi_model_types = array_keys($fedora_models_to_wi_type);
  $wi_info = array();
  foreach($models as $model_rel) {
    $model = $model_rel['object']['value'];
    if (in_array($model, $wi_model_types)){
      $check = $fedora_models_to_wi_type[$model];
      if (!$return_distances){
        return $check['wi_type'];
      }
      $wi_info[] = $check;
    }
  }
  return $wi_info;
}

/**
 * Helper single location for this array of info linking Feodra to WI types
 */
function sidora_emammal_get_fedora_models_to_wi_type(){
  return array(
    'si:projectCModel' => array(
       'min_distance_to_project' => 0,
       'max_distance_to_project' => 0,
       'wi_type' => 'project',
    ),
    'si:cameraTrapCModel' => array(
       'min_distance_to_project' => 2,
       'max_distance_to_project' => 3,
       'wi_type' => 'deployment',
    ),
    'si:generalImageCModel' => array(
       'min_distance_to_project' => 3,
       'max_distance_to_project' => 4,
       'wi_type' => 'dataFile',
    ),
    'si:datasetCModel' => array(
       'min_distance_to_project' => 3,
       'max_distance_to_project' => 4,
       'wi_type' => 'dataFile',
    ),
    // Optional level of plots push things one down
  );
}

/**
 * When a datastream is created or updated, check to see if it is an eMammal object and if the Opt-In is selected
 * for the project. If these are true, update the information for the object in WI
 */
function sidora_emammal_check_opt_in_for_wi(AbstractObject $object){
  sidora_emammal_debug("Checking opt-in for:" . $object->id);
  $wi_infos = sidora_emammal_get_wi_type($object, TRUE);
  sidora_emammal_debug("wi_infos:" . json_encode($wi_infos));
  if (!empty($wi_infos)){
    foreach($wi_infos as $wi_info) {
      sidora_emammal_debug("wi_info:" . json_encode($wi_info));
      $opt_in = FALSE;
      $parent_id = $object->id;
      sidora_emammal_debug("parent_id:" . $parent_id);
      for($i = 0; $i <= $wi_info['max_distance_to_project']; $i++){ 
        $checker_id = $parent_id;
        sidora_emammal_debug("checker_id:" . $checker_id);
        if ($i >= $wi_info['min_distance_to_project']){
          sidora_emammal_debug("past_min_dist_check:" . $checker_id);
          // $checker_id should now hold the pid of the project, which we need to check to see if it's opt-in is checked
          $project_obj = sidora_obj($checker_id);
          if (!empty($project_obj) && (!empty($project_obj['EAC-CPF']))){
            $content = $project_obj['EAC-CPF']->content;
            if (!empty($content)){
              $doc = new DOMDocument();
              $docToLoad = ($content);
              $doc->loadXML($docToLoad);
              $existing_wi_opt_in_nodes = $doc->getElementsByTagName(SIDORA_EMAMMAL_OPT_IN_TAG);
              foreach($existing_wi_opt_in_nodes as $exister){
                $opt_in = $exister->nodeValue;
              }
            }
          }
          if ("" . $opt_in === "1"){
            return TRUE;
          }
        }
        if ($i < $wi_info['max_distance_to_project']){
          module_load_include('inc', 'sidora', 'includes/utils');
          // use isAdministeredBy if exists
          $parent_id = sidora_get_owning_parent_concept_pid_by_administered_pid($checker_id);
          if (empty($parent_id)){
            $parents = sidora_get_parent_concepts_by_pid($checker_id);
            foreach($parents as $ppid => $parent){
              $parent_id = $ppid;
            }
          }
        }
      }
    }
  }
  return FALSE;
}

/**
 * Find the deployment's WI ID given an object, or return NULL
 * $object - any fedora object
 */
function sidora_emammal_get_deployment_wi_id(AbstractObject $object){
  $deploy_obj = sidora_emammal_get_deployment_obj($object);
  if (!empty($deploy_obj)){
    return sidora_emammal_wi_get_id($deploy_obj);
  }
  return FALSE;
}

/**
 * Find the deployment object, or return NULL
 * $object - any fedora object
 */
function sidora_emammal_get_deployment_obj(AbstractObject $object){
  // Keep going up the chain until we find a model match for a deployment, then return ID
  // Stop if we have gone up to the the project
  sidora_emammal_debug("Getting deployment WI ID for:" . $object->id);
  $wi_infos = sidora_emammal_get_wi_type($object, TRUE);
  sidora_emammal_debug("wi_infos:" . json_encode($wi_infos));
  if (!empty($wi_infos)){
    foreach($wi_infos as $wi_info) {
      sidora_emammal_debug("wi_info:" . json_encode($wi_info));
      $opt_in = FALSE;
      $parent_id = $object->id;
      sidora_emammal_debug("parent_id:" . $parent_id);
      for($i = 0; $i <= $wi_info['max_distance_to_project']; $i++){ 
        $checker_id = $parent_id;
        sidora_emammal_debug("checker_id:" . $checker_id);
        $project_obj = sidora_obj($checker_id);
        $check_deployment_string = sidora_emammal_get_wi_type($project_obj);
        if ($check_deployment_string == 'deployment'){
          return $project_obj;
        }
        if ($i < $wi_info['max_distance_to_project']){
          module_load_include('inc', 'sidora', 'includes/utils');
          // use isAdministeredBy if exists
          $parent_id = sidora_get_owning_parent_concept_pid_by_administered_pid($checker_id);
          if (empty($parent_id)){
            $parents = sidora_get_parent_concepts_by_pid($checker_id);
            foreach($parents as $ppid => $parent){
              $parent_id = $ppid;
            }
          }
        }
      }
    }
  }
  return FALSE;
}
/**
 * Find the project's WI ID given an object, or return NULL
 * $object - any fedora object
 */
function sidora_emammal_get_project_wi_id(AbstractObject $object){
  sidora_emammal_debug("Getting project WI ID for:" . $object->id);
  $wi_infos = sidora_emammal_get_wi_type($object, TRUE);
  sidora_emammal_debug("wi_infos:" . json_encode($wi_infos));
  if (!empty($wi_infos)){
    foreach($wi_infos as $wi_info) {
      sidora_emammal_debug("wi_info:" . json_encode($wi_info));
      $opt_in = FALSE;
      $parent_id = $object->id;
      sidora_emammal_debug("parent_id:" . $parent_id);
      for($i = 0; $i <= $wi_info['max_distance_to_project']; $i++){ 
        $checker_id = $parent_id;
        sidora_emammal_debug("checker_id:" . $checker_id);
        if ($i >= $wi_info['min_distance_to_project']){
          sidora_emammal_debug("past_min_dist_check:" . $checker_id);
          // $checker_id should now hold the pid of the project, which we need to check to see if it's opt-in is checked
          $project_obj = sidora_obj($checker_id);
          if (!empty($project_obj) && (!empty($project_obj['EAC-CPF']))){
            $content = $project_obj['EAC-CPF']->content;
            if (!empty($content)){
              sidora_emammal_debug("Found the project::" . $project_obj->id);
              $proj_wi_id = sidora_emammal_wi_get_id($project_obj);
              sidora_emammal_debug("project has wi id::" . $proj_wi_id);
              return $proj_wi_id;
            }
          }
        }
        if ($i < $wi_info['max_distance_to_project']){
          module_load_include('inc', 'sidora', 'includes/utils');
          // use isAdministeredBy if exists
          $parent_id = sidora_get_owning_parent_concept_pid_by_administered_pid($checker_id);
          if (empty($parent_id)){
            $parents = sidora_get_parent_concepts_by_pid($checker_id);
            foreach($parents as $ppid => $parent){
              $parent_id = $ppid;
            }
          }
        }
      }
    }
  }
  sidora_emammal_debug("Couldn't find a project id for:" . $object->id);
  return FALSE;
}
